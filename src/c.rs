//! The C interface (CBLAS).
//!
//! ## Example
//!
//! ```
//! use lapack::c::*;
//!
//! let n = 3;
//! let mut a = vec![3.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 3.0];
//! let mut w = vec![0.0; n as usize];
//!
//! dsyev(Layout::ColumnMajor, b'V', b'U', n, &mut a, n, &mut w);
//!
//! for (one, another) in w.iter().zip(&[2.0, 2.0, 5.0]) {
//!     assert!((one - another).abs() < 1e-14);
//! }
//! ```

use lapack_sys::c as ffi;

include!("common.rs");

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum Error {
    None = 0,
    WorkMemory = -1010,
    TransposeMemory = -1011,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum Layout {
    RowMajor = 101,
    ColumnMajor = 102,
}

impl PartialEq<i32> for Error {
    #[inline(always)]
    fn eq(&self, other: &i32) -> bool {
        i32::from(*self) == *other
    }
}

impl PartialEq<Error> for i32 {
    #[inline(always)]
    fn eq(&self, other: &Error) -> bool {
        other == self
    }
}

macro_rules! convert {
    ($($from:ident => $into:ident,)*) => (
        $(
            impl From<$from> for $into {
                #[inline(always)]
                fn from(value: $from) -> $into {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
        )*
    );
}

convert! {
    Error => i32,
    Layout => i32,
}

#[inline]
pub fn sbdsdc(matrix_layout: Layout, uplo: u8, compq: u8, n: i32, d: &mut [f32], e: &mut [f32],
              u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32, q: &mut f32,
              iq: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sbdsdc(matrix_layout.into(), uplo as c_char, compq as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(),
                            ldvt, q, iq.as_mut_ptr())
    }
}

#[inline]
pub fn dbdsdc(matrix_layout: Layout, uplo: u8, compq: u8, n: i32, d: &mut [f64], e: &mut [f64],
              u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32, q: &mut f64,
              iq: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dbdsdc(matrix_layout.into(), uplo as c_char, compq as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(),
                            ldvt, q, iq.as_mut_ptr())
    }
}

#[inline]
pub fn sbdsqr(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
              d: &mut [f32], e: &mut [f32], vt: &mut [f32], ldvt: i32, u: &mut [f32], ldu: i32,
              c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sbdsqr(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                            d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr(), ldvt, u.as_mut_ptr(),
                            ldu, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dbdsqr(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
              d: &mut [f64], e: &mut [f64], vt: &mut [f64], ldvt: i32, u: &mut [f64], ldu: i32,
              c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dbdsqr(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                            d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr(), ldvt, u.as_mut_ptr(),
                            ldu, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn cbdsqr(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
              d: &mut [f32], e: &mut [f32], vt: &mut [c32], ldvt: i32, u: &mut [c32], ldu: i32,
              c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cbdsqr(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                            d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr() as *mut _, ldvt,
                            u.as_mut_ptr() as *mut _, ldu, c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zbdsqr(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
              d: &mut [f64], e: &mut [f64], vt: &mut [c64], ldvt: i32, u: &mut [c64], ldu: i32,
              c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zbdsqr(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                            d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr() as *mut _, ldvt,
                            u.as_mut_ptr() as *mut _, ldu, c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn sbdsvdx(matrix_layout: Layout, uplo: u8, jobz: u8, range: u8, n: i32, d: &mut [f32],
               e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, ns: i32, s: &mut [f32],
               z: &mut [f32], ldz: i32, superb: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sbdsvdx(matrix_layout.into(), uplo as c_char, jobz as c_char, range as c_char,
                             n, d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, ns, s.as_mut_ptr(),
                             z.as_mut_ptr(), ldz, superb.as_mut_ptr())
    }
}

#[inline]
pub fn dbdsvdx(matrix_layout: Layout, uplo: u8, jobz: u8, range: u8, n: i32, d: &mut [f64],
               e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, ns: i32, s: &mut [f64],
               z: &mut [f64], ldz: i32, superb: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dbdsvdx(matrix_layout.into(), uplo as c_char, jobz as c_char, range as c_char,
                             n, d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, ns, s.as_mut_ptr(),
                             z.as_mut_ptr(), ldz, superb.as_mut_ptr())
    }
}

#[inline]
pub fn sdisna(job: u8, m: i32, n: i32, d: &[f32], sep: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_sdisna(job as c_char, m, n, d.as_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn ddisna(job: u8, m: i32, n: i32, d: &[f64], sep: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_ddisna(job as c_char, m, n, d.as_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn sgbbrd(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
              ab: &mut [f32], ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut f32, ldq: i32,
              pt: &mut [f32], ldpt: i32, c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbbrd(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                            ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq,
                            pt.as_mut_ptr(), ldpt, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dgbbrd(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
              ab: &mut [f64], ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut f64, ldq: i32,
              pt: &mut [f64], ldpt: i32, c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbbrd(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                            ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq,
                            pt.as_mut_ptr(), ldpt, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn cgbbrd(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
              ab: &mut [c32], ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut c32, ldq: i32,
              pt: &mut [c32], ldpt: i32, c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbbrd(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                            ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                            q as *mut _ as *mut _, ldq, pt.as_mut_ptr() as *mut _, ldpt,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zgbbrd(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
              ab: &mut [c64], ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut c64, ldq: i32,
              pt: &mut [c64], ldpt: i32, c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbbrd(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                            ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                            q as *mut _ as *mut _, ldq, pt.as_mut_ptr() as *mut _, ldpt,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn sgbcon(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[f32], ldab: i32,
              ipiv: &[i32], anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbcon(matrix_layout.into(), norm as c_char, n, kl, ku, ab.as_ptr(), ldab,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn dgbcon(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[f64], ldab: i32,
              ipiv: &[i32], anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbcon(matrix_layout.into(), norm as c_char, n, kl, ku, ab.as_ptr(), ldab,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn cgbcon(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[c32], ldab: i32,
              ipiv: &[i32], anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbcon(matrix_layout.into(), norm as c_char, n, kl, ku,
                            ab.as_ptr() as *const _, ldab, ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn zgbcon(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[c64], ldab: i32,
              ipiv: &[i32], anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbcon(matrix_layout.into(), norm as c_char, n, kl, ku,
                            ab.as_ptr() as *const _, ldab, ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn sgbequ(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f32], ldab: i32,
              r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
              amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbequ(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab, r.as_mut_ptr(),
                            c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                            amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgbequ(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f64], ldab: i32,
              r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
              amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbequ(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab, r.as_mut_ptr(),
                            c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                            amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgbequ(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c32], ldab: i32,
              r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
              amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbequ(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _, ldab,
                            r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                            colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgbequ(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c64], ldab: i32,
              r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
              amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbequ(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _, ldab,
                            r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                            colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgbequb(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f32], ldab: i32,
               r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
               amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbequb(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab, r.as_mut_ptr(),
                             c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                             amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgbequb(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f64], ldab: i32,
               r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
               amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbequb(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab, r.as_mut_ptr(),
                             c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                             amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgbequb(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c32], ldab: i32,
               r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
               amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbequb(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _, ldab,
                             r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                             colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgbequb(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c64], ldab: i32,
               r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
               amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbequb(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _, ldab,
                             r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                             colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgbrfs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[f32],
              ldab: i32, afb: &[f32], ldafb: i32, ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32],
              ldx: i32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbrfs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs, ab.as_ptr(),
                            ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(), b.as_ptr(), ldb,
                            x.as_mut_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dgbrfs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[f64],
              ldab: i32, afb: &[f64], ldafb: i32, ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64],
              ldx: i32, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbrfs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs, ab.as_ptr(),
                            ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(), b.as_ptr(), ldb,
                            x.as_mut_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cgbrfs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[c32],
              ldab: i32, afb: &[c32], ldafb: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32],
              ldx: i32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbrfs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                            ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                            ipiv.as_ptr(), b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _,
                            ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zgbrfs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[c64],
              ldab: i32, afb: &[c64], ldafb: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64],
              ldx: i32, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbrfs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                            ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                            ipiv.as_ptr(), b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _,
                            ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sgbrfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &[f32], ldab: i32, afb: &[f32], ldafb: i32, ipiv: &[i32], r: &[f32], c: &[f32],
               b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32, berr: &mut [f32],
               n_err_bnds: i32, err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbrfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, kl, ku,
                             nrhs, ab.as_ptr(), ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(),
                             r.as_ptr(), c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn dgbrfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &[f64], ldab: i32, afb: &[f64], ldafb: i32, ipiv: &[i32], r: &[f64], c: &[f64],
               b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64, berr: &mut [f64],
               n_err_bnds: i32, err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbrfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, kl, ku,
                             nrhs, ab.as_ptr(), ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(),
                             r.as_ptr(), c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn cgbrfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &[c32], ldab: i32, afb: &[c32], ldafb: i32, ipiv: &[i32], r: &[f32], c: &[f32],
               b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32, berr: &mut [f32],
               n_err_bnds: i32, err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbrfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, kl, ku,
                             nrhs, ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                             ipiv.as_ptr(), r.as_ptr(), c.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn zgbrfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &[c64], ldab: i32, afb: &[c64], ldafb: i32, ipiv: &[i32], r: &[f64], c: &[f64],
               b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64, berr: &mut [f64],
               n_err_bnds: i32, err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbrfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, kl, ku,
                             nrhs, ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                             ipiv.as_ptr(), r.as_ptr(), c.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn sgbsv(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [f32], ldab: i32,
             ipiv: &mut [i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbsv(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr(), ldab,
                           ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgbsv(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [f64], ldab: i32,
             ipiv: &mut [i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbsv(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr(), ldab,
                           ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgbsv(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [c32], ldab: i32,
             ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbsv(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr() as *mut _, ldab,
                           ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgbsv(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [c64], ldab: i32,
             ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbsv(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr() as *mut _, ldab,
                           ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgbsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
              ab: &mut [f32], ldab: i32, afb: &mut [f32], ldafb: i32, ipiv: &mut [i32],
              equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32],
              ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
              rpivot: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku, nrhs,
                            ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb, ipiv.as_mut_ptr(),
                            equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn dgbsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
              ab: &mut [f64], ldab: i32, afb: &mut [f64], ldafb: i32, ipiv: &mut [i32],
              equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64],
              ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
              rpivot: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku, nrhs,
                            ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb, ipiv.as_mut_ptr(),
                            equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn cgbsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
              ab: &mut [c32], ldab: i32, afb: &mut [c32], ldafb: i32, ipiv: &mut [i32],
              equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32],
              ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
              rpivot: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku, nrhs,
                            ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _, ldafb,
                            ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                            c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn zgbsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
              ab: &mut [c64], ldab: i32, afb: &mut [c64], ldafb: i32, ipiv: &mut [i32],
              equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64],
              ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
              rpivot: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku, nrhs,
                            ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _, ldafb,
                            ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                            c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn sgbsvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &mut [f32], ldab: i32, afb: &mut [f32], ldafb: i32, ipiv: &mut [i32],
               equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [f32], ldb: i32,
               x: &mut [f32], ldx: i32, rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32],
               n_err_bnds: i32, err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbsvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                             nrhs, ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                             c.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn dgbsvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &mut [f64], ldab: i32, afb: &mut [f64], ldafb: i32, ipiv: &mut [i32],
               equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [f64], ldb: i32,
               x: &mut [f64], ldx: i32, rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64],
               n_err_bnds: i32, err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbsvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                             nrhs, ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                             c.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn cgbsvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &mut [c32], ldab: i32, afb: &mut [c32], ldafb: i32, ipiv: &mut [i32],
               equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [c32], ldb: i32,
               x: &mut [c32], ldx: i32, rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32],
               n_err_bnds: i32, err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbsvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                             nrhs, ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _,
                             ldafb, ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                             c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn zgbsvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
               ab: &mut [c64], ldab: i32, afb: &mut [c64], ldafb: i32, ipiv: &mut [i32],
               equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [c64], ldb: i32,
               x: &mut [c64], ldx: i32, rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64],
               n_err_bnds: i32, err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbsvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                             nrhs, ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _,
                             ldafb, ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                             c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn sgbtrf(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [f32], ldab: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbtrf(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr(), ldab,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgbtrf(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [f64], ldab: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbtrf(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr(), ldab,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgbtrf(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [c32], ldab: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbtrf(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr() as *mut _, ldab,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgbtrf(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [c64], ldab: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbtrf(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr() as *mut _, ldab,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgbtrs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[f32],
              ldab: i32, ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbtrs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs, ab.as_ptr(),
                            ldab, ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgbtrs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[f64],
              ldab: i32, ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbtrs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs, ab.as_ptr(),
                            ldab, ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgbtrs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[c32],
              ldab: i32, ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbtrs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                            ab.as_ptr() as *const _, ldab, ipiv.as_ptr(), b.as_mut_ptr() as *mut _,
                            ldb)
    }
}

#[inline]
pub fn zgbtrs(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &[c64],
              ldab: i32, ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbtrs(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                            ab.as_ptr() as *const _, ldab, ipiv.as_ptr(), b.as_mut_ptr() as *mut _,
                            ldb)
    }
}

#[inline]
pub fn sgebak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, scale: &[f32],
              m: i32, v: &mut [f32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgebak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            scale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn dgebak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, scale: &[f64],
              m: i32, v: &mut [f64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgebak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            scale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn cgebak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, scale: &[f32],
              m: i32, v: &mut [c32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgebak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            scale.as_ptr(), m, v.as_mut_ptr() as *mut _, ldv)
    }
}

#[inline]
pub fn zgebak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, scale: &[f64],
              m: i32, v: &mut [c64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgebak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            scale.as_ptr(), m, v.as_mut_ptr() as *mut _, ldv)
    }
}

#[inline]
pub fn sgebal(matrix_layout: Layout, job: u8, n: i32, a: &mut [f32], lda: i32, ilo: &mut i32,
              ihi: &mut i32, scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgebal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda, ilo, ihi,
                            scale.as_mut_ptr())
    }
}

#[inline]
pub fn dgebal(matrix_layout: Layout, job: u8, n: i32, a: &mut [f64], lda: i32, ilo: &mut i32,
              ihi: &mut i32, scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgebal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda, ilo, ihi,
                            scale.as_mut_ptr())
    }
}

#[inline]
pub fn cgebal(matrix_layout: Layout, job: u8, n: i32, a: &mut [c32], lda: i32, ilo: &mut i32,
              ihi: &mut i32, scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgebal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ilo, ihi, scale.as_mut_ptr())
    }
}

#[inline]
pub fn zgebal(matrix_layout: Layout, job: u8, n: i32, a: &mut [c64], lda: i32, ilo: &mut i32,
              ihi: &mut i32, scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgebal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ilo, ihi, scale.as_mut_ptr())
    }
}

#[inline]
pub fn sgebrd(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, d: &mut [f32],
              e: &mut [f32], tauq: &mut [f32], taup: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgebrd(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, d.as_mut_ptr(),
                            e.as_mut_ptr(), tauq.as_mut_ptr(), taup.as_mut_ptr())
    }
}

#[inline]
pub fn dgebrd(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, d: &mut [f64],
              e: &mut [f64], tauq: &mut [f64], taup: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgebrd(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, d.as_mut_ptr(),
                            e.as_mut_ptr(), tauq.as_mut_ptr(), taup.as_mut_ptr())
    }
}

#[inline]
pub fn cgebrd(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, d: &mut [f32],
              e: &mut [f32], tauq: &mut [c32], taup: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgebrd(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            d.as_mut_ptr(), e.as_mut_ptr(), tauq.as_mut_ptr() as *mut _,
                            taup.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgebrd(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, d: &mut [f64],
              e: &mut [f64], tauq: &mut [c64], taup: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgebrd(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            d.as_mut_ptr(), e.as_mut_ptr(), tauq.as_mut_ptr() as *mut _,
                            taup.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgecon(matrix_layout: Layout, norm: u8, n: i32, a: &[f32], lda: i32, anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgecon(matrix_layout.into(), norm as c_char, n, a.as_ptr(), lda, anorm, rcond)
    }
}

#[inline]
pub fn dgecon(matrix_layout: Layout, norm: u8, n: i32, a: &[f64], lda: i32, anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dgecon(matrix_layout.into(), norm as c_char, n, a.as_ptr(), lda, anorm, rcond)
    }
}

#[inline]
pub fn cgecon(matrix_layout: Layout, norm: u8, n: i32, a: &[c32], lda: i32, anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgecon(matrix_layout.into(), norm as c_char, n, a.as_ptr() as *const _, lda,
                            anorm, rcond)
    }
}

#[inline]
pub fn zgecon(matrix_layout: Layout, norm: u8, n: i32, a: &[c64], lda: i32, anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zgecon(matrix_layout.into(), norm as c_char, n, a.as_ptr() as *const _, lda,
                            anorm, rcond)
    }
}

#[inline]
pub fn sgeequ(matrix_layout: Layout, m: i32, n: i32, a: &[f32], lda: i32, r: &mut [f32],
              c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeequ(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                            c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                            amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgeequ(matrix_layout: Layout, m: i32, n: i32, a: &[f64], lda: i32, r: &mut [f64],
              c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeequ(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                            c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                            amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgeequ(matrix_layout: Layout, m: i32, n: i32, a: &[c32], lda: i32, r: &mut [f32],
              c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeequ(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                            r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                            colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgeequ(matrix_layout: Layout, m: i32, n: i32, a: &[c64], lda: i32, r: &mut [f64],
              c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeequ(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                            r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                            colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgeequb(matrix_layout: Layout, m: i32, n: i32, a: &[f32], lda: i32, r: &mut [f32],
               c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeequb(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                             c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                             amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgeequb(matrix_layout: Layout, m: i32, n: i32, a: &[f64], lda: i32, r: &mut [f64],
               c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeequb(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                             c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                             amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgeequb(matrix_layout: Layout, m: i32, n: i32, a: &[c32], lda: i32, r: &mut [f32],
               c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeequb(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                             r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                             colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgeequb(matrix_layout: Layout, m: i32, n: i32, a: &[c64], lda: i32, r: &mut [f64],
               c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeequb(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                             r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                             colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgees(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F32, n: i32, a: &mut [f32],
             lda: i32, sdim: &mut [i32], wr: &mut [f32], wi: &mut [f32], vs: &mut [f32],
             ldvs: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgees(matrix_layout.into(), jobvs as c_char, sort as c_char,
                           transmute(select), n, a.as_mut_ptr(), lda, sdim.as_mut_ptr(),
                           wr.as_mut_ptr(), wi.as_mut_ptr(), vs.as_mut_ptr(), ldvs)
    }
}

#[inline]
pub fn dgees(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F64, n: i32, a: &mut [f64],
             lda: i32, sdim: &mut [i32], wr: &mut [f64], wi: &mut [f64], vs: &mut [f64],
             ldvs: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgees(matrix_layout.into(), jobvs as c_char, sort as c_char,
                           transmute(select), n, a.as_mut_ptr(), lda, sdim.as_mut_ptr(),
                           wr.as_mut_ptr(), wi.as_mut_ptr(), vs.as_mut_ptr(), ldvs)
    }
}

#[inline]
pub fn cgees(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C32, n: i32, a: &mut [c32],
             lda: i32, sdim: &mut [i32], w: &mut [c32], vs: &mut [c32], ldvs: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgees(matrix_layout.into(), jobvs as c_char, sort as c_char,
                           transmute(select), n, a.as_mut_ptr() as *mut _, lda, sdim.as_mut_ptr(),
                           w.as_mut_ptr() as *mut _, vs.as_mut_ptr() as *mut _, ldvs)
    }
}

#[inline]
pub fn zgees(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C64, n: i32, a: &mut [c64],
             lda: i32, sdim: &mut [i32], w: &mut [c64], vs: &mut [c64], ldvs: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgees(matrix_layout.into(), jobvs as c_char, sort as c_char,
                           transmute(select), n, a.as_mut_ptr() as *mut _, lda, sdim.as_mut_ptr(),
                           w.as_mut_ptr() as *mut _, vs.as_mut_ptr() as *mut _, ldvs)
    }
}

#[inline]
pub fn sgeesx(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F32, sense: u8, n: i32,
              a: &mut [f32], lda: i32, sdim: &mut [i32], wr: &mut [f32], wi: &mut [f32],
              vs: &mut [f32], ldvs: i32, rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeesx(matrix_layout.into(), jobvs as c_char, sort as c_char,
                            transmute(select), sense as c_char, n, a.as_mut_ptr(), lda,
                            sdim.as_mut_ptr(), wr.as_mut_ptr(), wi.as_mut_ptr(), vs.as_mut_ptr(),
                            ldvs, rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn dgeesx(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F64, sense: u8, n: i32,
              a: &mut [f64], lda: i32, sdim: &mut [i32], wr: &mut [f64], wi: &mut [f64],
              vs: &mut [f64], ldvs: i32, rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeesx(matrix_layout.into(), jobvs as c_char, sort as c_char,
                            transmute(select), sense as c_char, n, a.as_mut_ptr(), lda,
                            sdim.as_mut_ptr(), wr.as_mut_ptr(), wi.as_mut_ptr(), vs.as_mut_ptr(),
                            ldvs, rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn cgeesx(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C32, sense: u8, n: i32,
              a: &mut [c32], lda: i32, sdim: &mut [i32], w: &mut [c32], vs: &mut [c32], ldvs: i32,
              rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeesx(matrix_layout.into(), jobvs as c_char, sort as c_char,
                            transmute(select), sense as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            sdim.as_mut_ptr(), w.as_mut_ptr() as *mut _, vs.as_mut_ptr() as *mut _,
                            ldvs, rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn zgeesx(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C64, sense: u8, n: i32,
              a: &mut [c64], lda: i32, sdim: &mut [i32], w: &mut [c64], vs: &mut [c64], ldvs: i32,
              rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeesx(matrix_layout.into(), jobvs as c_char, sort as c_char,
                            transmute(select), sense as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            sdim.as_mut_ptr(), w.as_mut_ptr() as *mut _, vs.as_mut_ptr() as *mut _,
                            ldvs, rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn sgeev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f32], lda: i32,
             wr: &mut [f32], wi: &mut [f32], vl: &mut f32, ldvl: i32, vr: &mut f32,
             ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr(), lda, wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl, vr,
                           ldvr)
    }
}

#[inline]
pub fn dgeev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f64], lda: i32,
             wr: &mut [f64], wi: &mut [f64], vl: &mut f64, ldvl: i32, vr: &mut f64,
             ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr(), lda, wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl, vr,
                           ldvr)
    }
}

#[inline]
pub fn cgeev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c32], lda: i32,
             w: &mut [c32], vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr() as *mut _,
                           vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr)
    }
}

#[inline]
pub fn zgeev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c64], lda: i32,
             w: &mut [c64], vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr() as *mut _,
                           vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr)
    }
}

#[inline]
pub fn sgeevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [f32], lda: i32, wr: &mut [f32], wi: &mut [f32], vl: &mut f32, ldvl: i32,
              vr: &mut f32, ldvr: i32, ilo: &mut i32, ihi: &mut i32, scale: &mut [f32],
              abnrm: &mut [f32], rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                            wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl, vr, ldvr, ilo, ihi,
                            scale.as_mut_ptr(), abnrm.as_mut_ptr(), rconde.as_mut_ptr(),
                            rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn dgeevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [f64], lda: i32, wr: &mut [f64], wi: &mut [f64], vl: &mut f64, ldvl: i32,
              vr: &mut f64, ldvr: i32, ilo: &mut i32, ihi: &mut i32, scale: &mut [f64],
              abnrm: &mut [f64], rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                            wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl, vr, ldvr, ilo, ihi,
                            scale.as_mut_ptr(), abnrm.as_mut_ptr(), rconde.as_mut_ptr(),
                            rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn cgeevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [c32], lda: i32, w: &mut [c32], vl: &mut c32, ldvl: i32, vr: &mut c32,
              ldvr: i32, ilo: &mut i32, ihi: &mut i32, scale: &mut [f32], abnrm: &mut [f32],
              rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, ilo, ihi, scale.as_mut_ptr(),
                            abnrm.as_mut_ptr(), rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn zgeevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [c64], lda: i32, w: &mut [c64], vl: &mut c64, ldvl: i32, vr: &mut c64,
              ldvr: i32, ilo: &mut i32, ihi: &mut i32, scale: &mut [f64], abnrm: &mut [f64],
              rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, ilo, ihi, scale.as_mut_ptr(),
                            abnrm.as_mut_ptr(), rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn sgehrd(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgehrd(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda,
                            tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgehrd(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgehrd(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda,
                            tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgehrd(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgehrd(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgehrd(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgehrd(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgejsv(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8,
              m: i32, n: i32, a: &mut [f32], lda: i32, sva: &mut [f32], u: &mut [f32], ldu: i32,
              v: &mut [f32], ldv: i32, stat: &mut [f32], istat: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgejsv(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            jobr as c_char, jobt as c_char, jobp as c_char, m, n, a.as_mut_ptr(),
                            lda, sva.as_mut_ptr(), u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv,
                            stat.as_mut_ptr(), istat.as_mut_ptr())
    }
}

#[inline]
pub fn dgejsv(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8,
              m: i32, n: i32, a: &mut [f64], lda: i32, sva: &mut [f64], u: &mut [f64], ldu: i32,
              v: &mut [f64], ldv: i32, stat: &mut [f64], istat: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgejsv(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            jobr as c_char, jobt as c_char, jobp as c_char, m, n, a.as_mut_ptr(),
                            lda, sva.as_mut_ptr(), u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv,
                            stat.as_mut_ptr(), istat.as_mut_ptr())
    }
}

#[inline]
pub fn cgejsv(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8,
              m: i32, n: i32, a: &mut [c32], lda: i32, sva: &mut [f32], u: &mut [c32], ldu: i32,
              v: &mut [c32], ldv: i32, stat: &mut [f32], istat: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgejsv(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            jobr as c_char, jobt as c_char, jobp as c_char, m, n,
                            a.as_mut_ptr() as *mut _, lda, sva.as_mut_ptr(),
                            u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                            stat.as_mut_ptr(), istat.as_mut_ptr())
    }
}

#[inline]
pub fn zgejsv(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8,
              m: i32, n: i32, a: &mut [c64], lda: i32, sva: &mut [f64], u: &mut [c64], ldu: i32,
              v: &mut [c64], ldv: i32, stat: &mut [f64], istat: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgejsv(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            jobr as c_char, jobt as c_char, jobp as c_char, m, n,
                            a.as_mut_ptr() as *mut _, lda, sva.as_mut_ptr(),
                            u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                            stat.as_mut_ptr(), istat.as_mut_ptr())
    }
}

#[inline]
pub fn sgelq2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelq2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgelq2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelq2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgelq2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelq2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgelq2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelq2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgelqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelqf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgelqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelqf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgelqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelqf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgelqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelqf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgels(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
             b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgels(matrix_layout.into(), trans as c_char, m, n, nrhs, a.as_mut_ptr(), lda,
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgels(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
             b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgels(matrix_layout.into(), trans as c_char, m, n, nrhs, a.as_mut_ptr(), lda,
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgels(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
             b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgels(matrix_layout.into(), trans as c_char, m, n, nrhs,
                           a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgels(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
             b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgels(matrix_layout.into(), trans as c_char, m, n, nrhs,
                           a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgelsd(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelsd(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn dgelsd(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelsd(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn cgelsd(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelsd(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn zgelsd(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelsd(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn sgelss(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelss(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn dgelss(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelss(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn cgelss(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelss(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn zgelss(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelss(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn sgelsy(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, jpvt: &mut [i32], rcond: f32, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelsy(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, jpvt.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn dgelsy(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, jpvt: &mut [i32], rcond: f64, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelsy(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, jpvt.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn cgelsy(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, jpvt: &mut [i32], rcond: f32, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelsy(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, jpvt.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn zgelsy(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, jpvt: &mut [i32], rcond: f64, rank: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelsy(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, jpvt.as_mut_ptr(), rcond, rank)
    }
}

#[inline]
pub fn sgeqlf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqlf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqlf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqlf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqlf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqlf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqlf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqlf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqp3(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, jpvt: &mut [i32],
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqp3(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, jpvt.as_mut_ptr(),
                            tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqp3(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, jpvt: &mut [i32],
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqp3(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, jpvt.as_mut_ptr(),
                            tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqp3(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, jpvt: &mut [i32],
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqp3(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqp3(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, jpvt: &mut [i32],
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqp3(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqpf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, jpvt: &mut [i32],
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqpf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, jpvt.as_mut_ptr(),
                            tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqpf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, jpvt: &mut [i32],
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqpf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, jpvt.as_mut_ptr(),
                            tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqpf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, jpvt: &mut [i32],
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqpf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqpf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, jpvt: &mut [i32],
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqpf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqr2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqr2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqr2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqr2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqr2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqr2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqr2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqr2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqrfp(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
               tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrfp(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqrfp(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
               tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrfp(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqrfp(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
               tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrfp(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqrfp(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
               tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrfp(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgerfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f32], lda: i32, af: &[f32],
              ldaf: i32, ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgerfs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                            af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dgerfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f64], lda: i32, af: &[f64],
              ldaf: i32, ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgerfs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                            af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cgerfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c32], lda: i32, af: &[c32],
              ldaf: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgerfs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, ipiv.as_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zgerfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c64], lda: i32, af: &[c64],
              ldaf: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgerfs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, ipiv.as_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sgerfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
               af: &[f32], ldaf: i32, ipiv: &[i32], r: &[f32], c: &[f32], b: &[f32], ldb: i32,
               x: &mut [f32], ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgerfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                             a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), r.as_ptr(),
                             c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn dgerfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
               af: &[f64], ldaf: i32, ipiv: &[i32], r: &[f64], c: &[f64], b: &[f64], ldb: i32,
               x: &mut [f64], ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgerfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                             a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), r.as_ptr(),
                             c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn cgerfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
               af: &[c32], ldaf: i32, ipiv: &[i32], r: &[f32], c: &[f32], b: &[c32], ldb: i32,
               x: &mut [c32], ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgerfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             ipiv.as_ptr(), r.as_ptr(), c.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn zgerfsx(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
               af: &[c64], ldaf: i32, ipiv: &[i32], r: &[f64], c: &[f64], b: &[c64], ldb: i32,
               x: &mut [c64], ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgerfsx(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             ipiv.as_ptr(), r.as_ptr(), c.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn sgerqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgerqf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dgerqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgerqf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn cgerqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgerqf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgerqf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgerqf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgesdd(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [f32], lda: i32,
              s: &mut [f32], u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesdd(matrix_layout.into(), jobz as c_char, m, n, a.as_mut_ptr(), lda,
                            s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt)
    }
}

#[inline]
pub fn dgesdd(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [f64], lda: i32,
              s: &mut [f64], u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesdd(matrix_layout.into(), jobz as c_char, m, n, a.as_mut_ptr(), lda,
                            s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt)
    }
}

#[inline]
pub fn cgesdd(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [c32], lda: i32,
              s: &mut [f32], u: &mut [c32], ldu: i32, vt: &mut [c32], ldvt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesdd(matrix_layout.into(), jobz as c_char, m, n, a.as_mut_ptr() as *mut _,
                            lda, s.as_mut_ptr(), u.as_mut_ptr() as *mut _, ldu,
                            vt.as_mut_ptr() as *mut _, ldvt)
    }
}

#[inline]
pub fn zgesdd(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [c64], lda: i32,
              s: &mut [f64], u: &mut [c64], ldu: i32, vt: &mut [c64], ldvt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesdd(matrix_layout.into(), jobz as c_char, m, n, a.as_mut_ptr() as *mut _,
                            lda, s.as_mut_ptr(), u.as_mut_ptr() as *mut _, ldu,
                            vt.as_mut_ptr() as *mut _, ldvt)
    }
}

#[inline]
pub fn sgesv(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [f32], lda: i32, ipiv: &mut [i32],
             b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesv(matrix_layout.into(), n, nrhs, a.as_mut_ptr(), lda, ipiv.as_mut_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgesv(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [f64], lda: i32, ipiv: &mut [i32],
             b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesv(matrix_layout.into(), n, nrhs, a.as_mut_ptr(), lda, ipiv.as_mut_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgesv(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [c32], lda: i32, ipiv: &mut [i32],
             b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesv(matrix_layout.into(), n, nrhs, a.as_mut_ptr() as *mut _, lda,
                           ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgesv(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [c64], lda: i32, ipiv: &mut [i32],
             b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesv(matrix_layout.into(), n, nrhs, a.as_mut_ptr() as *mut _, lda,
                           ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn dsgesv(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [f64], lda: i32, ipiv: &mut [i32],
              b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsgesv(matrix_layout.into(), n, nrhs, a.as_mut_ptr(), lda, ipiv.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, iter.as_mut_ptr())
    }
}

#[inline]
pub fn zcgesv(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [c64], lda: i32, ipiv: &mut [i32],
              b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zcgesv(matrix_layout.into(), n, nrhs, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, iter.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvd(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [f32], lda: i32,
              s: &mut [f32], u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32,
              superb: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvd(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                            a.as_mut_ptr(), lda, s.as_mut_ptr(), u.as_mut_ptr(), ldu,
                            vt.as_mut_ptr(), ldvt, superb.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvd(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [f64], lda: i32,
              s: &mut [f64], u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32,
              superb: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvd(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                            a.as_mut_ptr(), lda, s.as_mut_ptr(), u.as_mut_ptr(), ldu,
                            vt.as_mut_ptr(), ldvt, superb.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvd(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [c32], lda: i32,
              s: &mut [f32], u: &mut [c32], ldu: i32, vt: &mut [c32], ldvt: i32,
              superb: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvd(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                            a.as_mut_ptr() as *mut _, lda, s.as_mut_ptr(),
                            u.as_mut_ptr() as *mut _, ldu, vt.as_mut_ptr() as *mut _, ldvt,
                            superb.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvd(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [c64], lda: i32,
              s: &mut [f64], u: &mut [c64], ldu: i32, vt: &mut [c64], ldvt: i32,
              superb: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvd(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                            a.as_mut_ptr() as *mut _, lda, s.as_mut_ptr(),
                            u.as_mut_ptr() as *mut _, ldu, vt.as_mut_ptr() as *mut _, ldvt,
                            superb.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvdx(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
               a: &mut [f32], lda: i32, vl: f32, vu: f32, il: i32, iu: i32, ns: i32, s: &mut [f32],
               u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32, superb: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvdx(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                             range as c_char, m, n, a.as_mut_ptr(), lda, vl, vu, il, iu, ns,
                             s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt,
                             superb.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvdx(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
               a: &mut [f64], lda: i32, vl: f64, vu: f64, il: i32, iu: i32, ns: i32, s: &mut [f64],
               u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32, superb: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvdx(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                             range as c_char, m, n, a.as_mut_ptr(), lda, vl, vu, il, iu, ns,
                             s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt,
                             superb.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvdx(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
               a: &mut [c32], lda: i32, vl: f32, vu: f32, il: i32, iu: i32, ns: i32, s: &mut [f32],
               u: &mut [c32], ldu: i32, vt: &mut [c32], ldvt: i32, superb: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvdx(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                             range as c_char, m, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu,
                             ns, s.as_mut_ptr(), u.as_mut_ptr() as *mut _, ldu,
                             vt.as_mut_ptr() as *mut _, ldvt, superb.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvdx(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
               a: &mut [c64], lda: i32, vl: f64, vu: f64, il: i32, iu: i32, ns: i32, s: &mut [f64],
               u: &mut [c64], ldu: i32, vt: &mut [c64], ldvt: i32, superb: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvdx(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                             range as c_char, m, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu,
                             ns, s.as_mut_ptr(), u.as_mut_ptr() as *mut _, ldu,
                             vt.as_mut_ptr() as *mut _, ldvt, superb.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvj(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32, a: &mut [f32],
              lda: i32, sva: &mut [f32], mv: i32, v: &mut [f32], ldv: i32,
              stat: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvj(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            m, n, a.as_mut_ptr(), lda, sva.as_mut_ptr(), mv, v.as_mut_ptr(), ldv,
                            stat.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvj(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32, a: &mut [f64],
              lda: i32, sva: &mut [f64], mv: i32, v: &mut [f64], ldv: i32,
              stat: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvj(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            m, n, a.as_mut_ptr(), lda, sva.as_mut_ptr(), mv, v.as_mut_ptr(), ldv,
                            stat.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvj(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32, a: &mut [c32],
              lda: i32, sva: &mut [f32], mv: i32, v: &mut [c32], ldv: i32,
              stat: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvj(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            m, n, a.as_mut_ptr() as *mut _, lda, sva.as_mut_ptr(), mv,
                            v.as_mut_ptr() as *mut _, ldv, stat.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvj(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32, a: &mut [c64],
              lda: i32, sva: &mut [f64], mv: i32, v: &mut [c64], ldv: i32,
              stat: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvj(matrix_layout.into(), joba as c_char, jobu as c_char, jobv as c_char,
                            m, n, a.as_mut_ptr() as *mut _, lda, sva.as_mut_ptr(), mv,
                            v.as_mut_ptr() as *mut _, ldv, stat.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f32],
              lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8, r: &mut [f32],
              c: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32,
              ferr: &mut [f32], berr: &mut [f32], rpivot: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                            equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f64],
              lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8, r: &mut [f64],
              c: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64,
              ferr: &mut [f64], berr: &mut [f64], rpivot: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                            equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c32],
              lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8, r: &mut [f32],
              c: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
              ferr: &mut [f32], berr: &mut [f32], rpivot: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                            c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c64],
              lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8, r: &mut [f64],
              c: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
              ferr: &mut [f64], berr: &mut [f64], rpivot: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                            c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr(), rpivot.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f32],
               lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               r: &mut [f32], c: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32,
               rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                             a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                             equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                             b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f64],
               lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               r: &mut [f64], c: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32,
               rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                             a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                             equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                             b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c32],
               lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               r: &mut [f32], c: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32,
               rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                             c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvxx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c64],
               lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               r: &mut [f64], c: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
               rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvxx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                             c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn sgetf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetf2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgetf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetf2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgetf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetf2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgetf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetf2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgetrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetrf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgetrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetrf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgetrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetrf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgetrf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetrf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgetrf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
               ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetrf2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgetrf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
               ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetrf2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgetrf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
               ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetrf2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgetrf2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
               ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetrf2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgetri(matrix_layout: Layout, n: i32, a: &mut [f32], lda: i32, ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_sgetri(matrix_layout.into(), n, a.as_mut_ptr(), lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn dgetri(matrix_layout: Layout, n: i32, a: &mut [f64], lda: i32, ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_dgetri(matrix_layout.into(), n, a.as_mut_ptr(), lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn cgetri(matrix_layout: Layout, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cgetri(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn zgetri(matrix_layout: Layout, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_zgetri(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn sgetrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
              ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetrs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                            ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgetrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
              ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetrs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                            ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgetrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
              ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetrs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgetrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
              ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetrs(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sggbak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, lscale: &[f32],
              rscale: &[f32], m: i32, v: &mut [f32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggbak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn dggbak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, lscale: &[f64],
              rscale: &[f64], m: i32, v: &mut [f64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggbak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn cggbak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, lscale: &[f32],
              rscale: &[f32], m: i32, v: &mut [c32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggbak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr() as *mut _, ldv)
    }
}

#[inline]
pub fn zggbak(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32, lscale: &[f64],
              rscale: &[f64], m: i32, v: &mut [c64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggbak(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                            lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr() as *mut _, ldv)
    }
}

#[inline]
pub fn sggbal(matrix_layout: Layout, job: u8, n: i32, a: &mut [f32], lda: i32, b: &mut [f32],
              ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f32],
              rscale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggbal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, ilo, ihi, lscale.as_mut_ptr(),
                            rscale.as_mut_ptr())
    }
}

#[inline]
pub fn dggbal(matrix_layout: Layout, job: u8, n: i32, a: &mut [f64], lda: i32, b: &mut [f64],
              ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f64],
              rscale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggbal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, ilo, ihi, lscale.as_mut_ptr(),
                            rscale.as_mut_ptr())
    }
}

#[inline]
pub fn cggbal(matrix_layout: Layout, job: u8, n: i32, a: &mut [c32], lda: i32, b: &mut [c32],
              ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f32],
              rscale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggbal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, ilo, ihi, lscale.as_mut_ptr(),
                            rscale.as_mut_ptr())
    }
}

#[inline]
pub fn zggbal(matrix_layout: Layout, job: u8, n: i32, a: &mut [c64], lda: i32, b: &mut [c64],
              ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f64],
              rscale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggbal(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, ilo, ihi, lscale.as_mut_ptr(),
                            rscale.as_mut_ptr())
    }
}

#[inline]
pub fn sgges(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F32, n: i32,
             a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, sdim: &mut [i32], alphar: &mut f32,
             alphai: &mut f32, beta: &mut f32, vsl: &mut [f32], ldvsl: i32, vsr: &mut [f32],
             ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgges(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                           sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                           b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                           vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr)
    }
}

#[inline]
pub fn dgges(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F64, n: i32,
             a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, sdim: &mut [i32], alphar: &mut f64,
             alphai: &mut f64, beta: &mut f64, vsl: &mut [f64], ldvsl: i32, vsr: &mut [f64],
             ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgges(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                           sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                           b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                           vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr)
    }
}

#[inline]
pub fn cgges(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C32, n: i32,
             a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, sdim: &mut [i32], alpha: &mut c32,
             beta: &mut c32, vsl: &mut [c32], ldvsl: i32, vsr: &mut [c32], ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgges(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                           sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _, lda,
                           b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                           alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                           vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _, ldvsr)
    }
}

#[inline]
pub fn zgges(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C64, n: i32,
             a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, sdim: &mut [i32], alpha: &mut c64,
             beta: &mut c64, vsl: &mut [c64], ldvsl: i32, vsr: &mut [c64], ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgges(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                           sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _, lda,
                           b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                           alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                           vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _, ldvsr)
    }
}

#[inline]
pub fn sgges3(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F32, n: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, sdim: &mut [i32], alphar: &mut f32,
              alphai: &mut f32, beta: &mut f32, vsl: &mut [f32], ldvsl: i32, vsr: &mut [f32],
              ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgges3(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                            vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr)
    }
}

#[inline]
pub fn dgges3(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F64, n: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, sdim: &mut [i32], alphar: &mut f64,
              alphai: &mut f64, beta: &mut f64, vsl: &mut [f64], ldvsl: i32, vsr: &mut [f64],
              ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgges3(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                            vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr)
    }
}

#[inline]
pub fn cgges3(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C32, n: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, sdim: &mut [i32], alpha: &mut c32,
              beta: &mut c32, vsl: &mut [c32], ldvsl: i32, vsr: &mut [c32], ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgges3(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                            alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _, ldvsr)
    }
}

#[inline]
pub fn zgges3(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C64, n: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, sdim: &mut [i32], alpha: &mut c64,
              beta: &mut c64, vsl: &mut [c64], ldvsl: i32, vsr: &mut [c64], ldvsr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgges3(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                            alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _, ldvsr)
    }
}

#[inline]
pub fn sggesx(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F32,
              sense: u8, n: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32,
              sdim: &mut [i32], alphar: &mut f32, alphai: &mut f32, beta: &mut f32,
              vsl: &mut [f32], ldvsl: i32, vsr: &mut [f32], ldvsr: i32, rconde: &mut [f32],
              rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggesx(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), sense as c_char, n, a.as_mut_ptr(),
                            lda, b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                            vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr, rconde.as_mut_ptr(),
                            rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn dggesx(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F64,
              sense: u8, n: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32,
              sdim: &mut [i32], alphar: &mut f64, alphai: &mut f64, beta: &mut f64,
              vsl: &mut [f64], ldvsl: i32, vsr: &mut [f64], ldvsr: i32, rconde: &mut [f64],
              rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggesx(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), sense as c_char, n, a.as_mut_ptr(),
                            lda, b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                            vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr, rconde.as_mut_ptr(),
                            rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn cggesx(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C32,
              sense: u8, n: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32,
              sdim: &mut [i32], alpha: &mut c32, beta: &mut c32, vsl: &mut [c32], ldvsl: i32,
              vsr: &mut [c32], ldvsr: i32, rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggesx(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), sense as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            sdim.as_mut_ptr(), alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _, ldvsr,
                            rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn zggesx(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C64,
              sense: u8, n: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32,
              sdim: &mut [i32], alpha: &mut c64, beta: &mut c64, vsl: &mut [c64], ldvsl: i32,
              vsr: &mut [c64], ldvsr: i32, rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggesx(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                            sort as c_char, transmute(selctg), sense as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            sdim.as_mut_ptr(), alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _, ldvsr,
                            rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn sggev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f32], lda: i32,
             b: &mut [f32], ldb: i32, alphar: &mut f32, alphai: &mut f32, beta: &mut f32,
             vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, vl,
                           ldvl, vr, ldvr)
    }
}

#[inline]
pub fn dggev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f64], lda: i32,
             b: &mut [f64], ldb: i32, alphar: &mut f64, alphai: &mut f64, beta: &mut f64,
             vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, vl,
                           ldvl, vr, ldvr)
    }
}

#[inline]
pub fn cggev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c32], lda: i32,
             b: &mut [c32], ldb: i32, alpha: &mut c32, beta: &mut c32, vl: &mut c32, ldvl: i32,
             vr: &mut c32, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                           alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                           vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr)
    }
}

#[inline]
pub fn zggev(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c64], lda: i32,
             b: &mut [c64], ldb: i32, alpha: &mut c64, beta: &mut c64, vl: &mut c64, ldvl: i32,
             vr: &mut c64, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggev(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                           alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                           vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr)
    }
}

#[inline]
pub fn sggev3(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, alphar: &mut f32, alphai: &mut f32, beta: &mut f32,
              vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggev3(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, vl,
                            ldvl, vr, ldvr)
    }
}

#[inline]
pub fn dggev3(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, alphar: &mut f64, alphai: &mut f64, beta: &mut f64,
              vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggev3(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, vl,
                            ldvl, vr, ldvr)
    }
}

#[inline]
pub fn cggev3(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, alpha: &mut c32, beta: &mut c32, vl: &mut c32, ldvl: i32,
              vr: &mut c32, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggev3(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr)
    }
}

#[inline]
pub fn zggev3(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, alpha: &mut c64, beta: &mut c64, vl: &mut c64, ldvl: i32,
              vr: &mut c64, ldvr: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggev3(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr)
    }
}

#[inline]
pub fn sggevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, alphar: &mut f32, alphai: &mut f32,
              beta: &mut f32, vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32, ilo: &mut i32,
              ihi: &mut i32, lscale: &mut [f32], rscale: &mut [f32], abnrm: &mut [f32],
              bbnrm: &mut [f32], rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo,
                            ihi, lscale.as_mut_ptr(), rscale.as_mut_ptr(), abnrm.as_mut_ptr(),
                            bbnrm.as_mut_ptr(), rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn dggevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, alphar: &mut f64, alphai: &mut f64,
              beta: &mut f64, vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32, ilo: &mut i32,
              ihi: &mut i32, lscale: &mut [f64], rscale: &mut [f64], abnrm: &mut [f64],
              bbnrm: &mut [f64], rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo,
                            ihi, lscale.as_mut_ptr(), rscale.as_mut_ptr(), abnrm.as_mut_ptr(),
                            bbnrm.as_mut_ptr(), rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn cggevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, alpha: &mut c32, beta: &mut c32,
              vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32, ilo: &mut i32, ihi: &mut i32,
              lscale: &mut [f32], rscale: &mut [f32], abnrm: &mut [f32], bbnrm: &mut [f32],
              rconde: &mut [f32], rcondv: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, alpha as *mut _ as *mut _,
                            beta as *mut _ as *mut _, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, ilo, ihi, lscale.as_mut_ptr(),
                            rscale.as_mut_ptr(), abnrm.as_mut_ptr(), bbnrm.as_mut_ptr(),
                            rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn zggevx(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, alpha: &mut c64, beta: &mut c64,
              vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32, ilo: &mut i32, ihi: &mut i32,
              lscale: &mut [f64], rscale: &mut [f64], abnrm: &mut [f64], bbnrm: &mut [f64],
              rconde: &mut [f64], rcondv: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggevx(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                            jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, alpha as *mut _ as *mut _,
                            beta as *mut _ as *mut _, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, ilo, ihi, lscale.as_mut_ptr(),
                            rscale.as_mut_ptr(), abnrm.as_mut_ptr(), bbnrm.as_mut_ptr(),
                            rconde.as_mut_ptr(), rcondv.as_mut_ptr())
    }
}

#[inline]
pub fn sggglm(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, d: &mut [f32], x: &mut [f32], y: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggglm(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, d.as_mut_ptr(), x.as_mut_ptr(), y.as_mut_ptr())
    }
}

#[inline]
pub fn dggglm(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, d: &mut [f64], x: &mut [f64], y: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggglm(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, d.as_mut_ptr(), x.as_mut_ptr(), y.as_mut_ptr())
    }
}

#[inline]
pub fn cggglm(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, d: &mut [c32], x: &mut [c32], y: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggglm(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, d.as_mut_ptr() as *mut _,
                            x.as_mut_ptr() as *mut _, y.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zggglm(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, d: &mut [c64], x: &mut [c64], y: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggglm(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, d.as_mut_ptr() as *mut _,
                            x.as_mut_ptr() as *mut _, y.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgghrd(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, q: &mut f32, ldq: i32,
              z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgghrd(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dgghrd(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, q: &mut f64, ldq: i32,
              z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgghrd(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn cgghrd(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, q: &mut c32, ldq: i32,
              z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgghrd(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zgghrd(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, q: &mut c64, ldq: i32,
              z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgghrd(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn sgghd3(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, q: &mut f32, ldq: i32,
              z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgghd3(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dgghd3(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, q: &mut f64, ldq: i32,
              z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgghd3(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn cgghd3(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, q: &mut c32, ldq: i32,
              z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgghd3(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zgghd3(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, q: &mut c64, ldq: i32,
              z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgghd3(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo, ihi,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn sgglse(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, c: &mut [f32], d: &mut [f32], x: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgglse(matrix_layout.into(), m, n, p, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, c.as_mut_ptr(), d.as_mut_ptr(), x.as_mut_ptr())
    }
}

#[inline]
pub fn dgglse(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, c: &mut [f64], d: &mut [f64], x: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgglse(matrix_layout.into(), m, n, p, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, c.as_mut_ptr(), d.as_mut_ptr(), x.as_mut_ptr())
    }
}

#[inline]
pub fn cgglse(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, c: &mut [c32], d: &mut [c32], x: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgglse(matrix_layout.into(), m, n, p, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, c.as_mut_ptr() as *mut _,
                            d.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgglse(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, c: &mut [c64], d: &mut [c64], x: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgglse(matrix_layout.into(), m, n, p, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, c.as_mut_ptr() as *mut _,
                            d.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sggqrf(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f32], lda: i32,
              taua: &mut [f32], b: &mut [f32], ldb: i32, taub: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggqrf(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda, taua.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, taub.as_mut_ptr())
    }
}

#[inline]
pub fn dggqrf(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f64], lda: i32,
              taua: &mut [f64], b: &mut [f64], ldb: i32, taub: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggqrf(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda, taua.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, taub.as_mut_ptr())
    }
}

#[inline]
pub fn cggqrf(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c32], lda: i32,
              taua: &mut [c32], b: &mut [c32], ldb: i32, taub: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggqrf(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                            taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                            taub.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zggqrf(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c64], lda: i32,
              taua: &mut [c64], b: &mut [c64], ldb: i32, taub: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggqrf(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                            taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                            taub.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sggrqf(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [f32], lda: i32,
              taua: &mut [f32], b: &mut [f32], ldb: i32, taub: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggrqf(matrix_layout.into(), m, p, n, a.as_mut_ptr(), lda, taua.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, taub.as_mut_ptr())
    }
}

#[inline]
pub fn dggrqf(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [f64], lda: i32,
              taua: &mut [f64], b: &mut [f64], ldb: i32, taub: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggrqf(matrix_layout.into(), m, p, n, a.as_mut_ptr(), lda, taua.as_mut_ptr(),
                            b.as_mut_ptr(), ldb, taub.as_mut_ptr())
    }
}

#[inline]
pub fn cggrqf(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [c32], lda: i32,
              taua: &mut [c32], b: &mut [c32], ldb: i32, taub: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggrqf(matrix_layout.into(), m, p, n, a.as_mut_ptr() as *mut _, lda,
                            taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                            taub.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zggrqf(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [c64], lda: i32,
              taua: &mut [c64], b: &mut [c64], ldb: i32, taub: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggrqf(matrix_layout.into(), m, p, n, a.as_mut_ptr() as *mut _, lda,
                            taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                            taub.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sggsvd(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
              k: &mut i32, l: &mut i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32,
              alpha: &mut f32, beta: &mut f32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32,
              q: &mut f32, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvd(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, n, p, k, l, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alpha, beta,
                            u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dggsvd(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
              k: &mut i32, l: &mut i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32,
              alpha: &mut f64, beta: &mut f64, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32,
              q: &mut f64, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvd(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, n, p, k, l, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alpha, beta,
                            u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cggsvd(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
              k: &mut i32, l: &mut i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32,
              alpha: &mut f32, beta: &mut f32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32,
              q: &mut c32, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvd(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, n, p, k, l, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _,
                            ldb, alpha, beta, u.as_mut_ptr() as *mut _, ldu,
                            v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq,
                            iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggsvd(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
              k: &mut i32, l: &mut i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32,
              alpha: &mut f64, beta: &mut f64, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32,
              q: &mut c64, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvd(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, n, p, k, l, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _,
                            ldb, alpha, beta, u.as_mut_ptr() as *mut _, ldu,
                            v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq,
                            iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggsvd3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
               k: &mut i32, l: &mut i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32,
               alpha: &mut f32, beta: &mut f32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32,
               q: &mut f32, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvd3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, n, p, k, l, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alpha, beta,
                             u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dggsvd3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
               k: &mut i32, l: &mut i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32,
               alpha: &mut f64, beta: &mut f64, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32,
               q: &mut f64, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvd3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, n, p, k, l, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alpha, beta,
                             u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cggsvd3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
               k: &mut i32, l: &mut i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32,
               alpha: &mut f32, beta: &mut f32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32,
               q: &mut c32, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvd3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, n, p, k, l, a.as_mut_ptr() as *mut _, lda,
                             b.as_mut_ptr() as *mut _, ldb, alpha, beta, u.as_mut_ptr() as *mut _,
                             ldu, v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq,
                             iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggsvd3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
               k: &mut i32, l: &mut i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32,
               alpha: &mut f64, beta: &mut f64, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32,
               q: &mut c64, ldq: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvd3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, n, p, k, l, a.as_mut_ptr() as *mut _, lda,
                             b.as_mut_ptr() as *mut _, ldb, alpha, beta, u.as_mut_ptr() as *mut _,
                             ldu, v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq,
                             iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggsvp(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, tola: f32, tolb: f32, k: &mut i32,
              l: &mut i32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32, q: &mut f32,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvp(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, tola, tolb, k, l,
                            u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq)
    }
}

#[inline]
pub fn dggsvp(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, tola: f64, tolb: f64, k: &mut i32,
              l: &mut i32, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32, q: &mut f64,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvp(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, tola, tolb, k, l,
                            u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq)
    }
}

#[inline]
pub fn cggsvp(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, tola: f32, tolb: f32, k: &mut i32,
              l: &mut i32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32, q: &mut c32,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvp(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            tola, tolb, k, l, u.as_mut_ptr() as *mut _, ldu,
                            v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn zggsvp(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, tola: f64, tolb: f64, k: &mut i32,
              l: &mut i32, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32, q: &mut c64,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvp(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            tola, tolb, k, l, u.as_mut_ptr() as *mut _, ldu,
                            v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn sggsvp3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
               a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, tola: f32, tolb: f32, k: &mut i32,
               l: &mut i32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32, q: &mut f32,
               ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvp3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, tola, tolb, k, l,
                             u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq)
    }
}

#[inline]
pub fn dggsvp3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
               a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, tola: f64, tolb: f64, k: &mut i32,
               l: &mut i32, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32, q: &mut f64,
               ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvp3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, tola, tolb, k, l,
                             u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq)
    }
}

#[inline]
pub fn cggsvp3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
               a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, tola: f32, tolb: f32, k: &mut i32,
               l: &mut i32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32, q: &mut c32,
               ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvp3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, p, n, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                             tola, tolb, k, l, u.as_mut_ptr() as *mut _, ldu,
                             v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn zggsvp3(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
               a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, tola: f64, tolb: f64, k: &mut i32,
               l: &mut i32, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32, q: &mut c64,
               ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvp3(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                             m, p, n, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                             tola, tolb, k, l, u.as_mut_ptr() as *mut _, ldu,
                             v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn sgtcon(norm: u8, n: i32, dl: &[f32], d: &[f32], du: &[f32], du2: &[f32], ipiv: &[i32],
              anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtcon(norm as c_char, n, dl.as_ptr(), d.as_ptr(), du.as_ptr(), du2.as_ptr(),
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn dgtcon(norm: u8, n: i32, dl: &[f64], d: &[f64], du: &[f64], du2: &[f64], ipiv: &[i32],
              anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtcon(norm as c_char, n, dl.as_ptr(), d.as_ptr(), du.as_ptr(), du2.as_ptr(),
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn cgtcon(norm: u8, n: i32, dl: &[c32], d: &[c32], du: &[c32], du2: &[c32], ipiv: &[i32],
              anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtcon(norm as c_char, n, dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, du2.as_ptr() as *const _, ipiv.as_ptr(),
                            anorm, rcond)
    }
}

#[inline]
pub fn zgtcon(norm: u8, n: i32, dl: &[c64], d: &[c64], du: &[c64], du2: &[c64], ipiv: &[i32],
              anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtcon(norm as c_char, n, dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, du2.as_ptr() as *const _, ipiv.as_ptr(),
                            anorm, rcond)
    }
}

#[inline]
pub fn sgtrfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f32], d: &[f32],
              du: &[f32], dlf: &[f32], df: &[f32], duf: &[f32], du2: &[f32], ipiv: &[i32],
              b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtrfs(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                            d.as_ptr(), du.as_ptr(), dlf.as_ptr(), df.as_ptr(), duf.as_ptr(),
                            du2.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dgtrfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f64], d: &[f64],
              du: &[f64], dlf: &[f64], df: &[f64], duf: &[f64], du2: &[f64], ipiv: &[i32],
              b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtrfs(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                            d.as_ptr(), du.as_ptr(), dlf.as_ptr(), df.as_ptr(), duf.as_ptr(),
                            du2.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cgtrfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c32], d: &[c32],
              du: &[c32], dlf: &[c32], df: &[c32], duf: &[c32], du2: &[c32], ipiv: &[i32],
              b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtrfs(matrix_layout.into(), trans as c_char, n, nrhs,
                            dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, dlf.as_ptr() as *const _,
                            df.as_ptr() as *const _, duf.as_ptr() as *const _,
                            du2.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zgtrfs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c64], d: &[c64],
              du: &[c64], dlf: &[c64], df: &[c64], duf: &[c64], du2: &[c64], ipiv: &[i32],
              b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtrfs(matrix_layout.into(), trans as c_char, n, nrhs,
                            dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, dlf.as_ptr() as *const _,
                            df.as_ptr() as *const _, duf.as_ptr() as *const _,
                            du2.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sgtsv(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [f32], d: &mut [f32],
             du: &mut [f32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtsv(matrix_layout.into(), n, nrhs, dl.as_mut_ptr(), d.as_mut_ptr(),
                           du.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgtsv(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [f64], d: &mut [f64],
             du: &mut [f64], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtsv(matrix_layout.into(), n, nrhs, dl.as_mut_ptr(), d.as_mut_ptr(),
                           du.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgtsv(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [c32], d: &mut [c32],
             du: &mut [c32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtsv(matrix_layout.into(), n, nrhs, dl.as_mut_ptr() as *mut _,
                           d.as_mut_ptr() as *mut _, du.as_mut_ptr() as *mut _,
                           b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgtsv(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [c64], d: &mut [c64],
             du: &mut [c64], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtsv(matrix_layout.into(), n, nrhs, dl.as_mut_ptr() as *mut _,
                           d.as_mut_ptr() as *mut _, du.as_mut_ptr() as *mut _,
                           b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgtsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[f32], d: &[f32],
              du: &[f32], dlf: &mut [f32], df: &mut [f32], duf: &mut [f32], du2: &mut [f32],
              ipiv: &mut [i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            dl.as_ptr(), d.as_ptr(), du.as_ptr(), dlf.as_mut_ptr(),
                            df.as_mut_ptr(), duf.as_mut_ptr(), du2.as_mut_ptr(), ipiv.as_mut_ptr(),
                            b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn dgtsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[f64], d: &[f64],
              du: &[f64], dlf: &mut [f64], df: &mut [f64], duf: &mut [f64], du2: &mut [f64],
              ipiv: &mut [i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            dl.as_ptr(), d.as_ptr(), du.as_ptr(), dlf.as_mut_ptr(),
                            df.as_mut_ptr(), duf.as_mut_ptr(), du2.as_mut_ptr(), ipiv.as_mut_ptr(),
                            b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn cgtsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[c32], d: &[c32],
              du: &[c32], dlf: &mut [c32], df: &mut [c32], duf: &mut [c32], du2: &mut [c32],
              ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, dlf.as_mut_ptr() as *mut _,
                            df.as_mut_ptr() as *mut _, duf.as_mut_ptr() as *mut _,
                            du2.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(), b.as_ptr() as *const _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn zgtsvx(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[c64], d: &[c64],
              du: &[c64], dlf: &mut [c64], df: &mut [c64], duf: &mut [c64], du2: &mut [c64],
              ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtsvx(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                            dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, dlf.as_mut_ptr() as *mut _,
                            df.as_mut_ptr() as *mut _, duf.as_mut_ptr() as *mut _,
                            du2.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(), b.as_ptr() as *const _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn sgttrf(n: i32, dl: &mut [f32], d: &mut [f32], du: &mut [f32], du2: &mut [f32],
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgttrf(n, dl.as_mut_ptr(), d.as_mut_ptr(), du.as_mut_ptr(), du2.as_mut_ptr(),
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgttrf(n: i32, dl: &mut [f64], d: &mut [f64], du: &mut [f64], du2: &mut [f64],
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgttrf(n, dl.as_mut_ptr(), d.as_mut_ptr(), du.as_mut_ptr(), du2.as_mut_ptr(),
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgttrf(n: i32, dl: &mut [c32], d: &mut [c32], du: &mut [c32], du2: &mut [c32],
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgttrf(n, dl.as_mut_ptr() as *mut _, d.as_mut_ptr() as *mut _,
                            du.as_mut_ptr() as *mut _, du2.as_mut_ptr() as *mut _,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgttrf(n: i32, dl: &mut [c64], d: &mut [c64], du: &mut [c64], du2: &mut [c64],
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgttrf(n, dl.as_mut_ptr() as *mut _, d.as_mut_ptr() as *mut _,
                            du.as_mut_ptr() as *mut _, du2.as_mut_ptr() as *mut _,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgttrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f32], d: &[f32],
              du: &[f32], du2: &[f32], ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgttrs(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                            d.as_ptr(), du.as_ptr(), du2.as_ptr(), ipiv.as_ptr(), b.as_mut_ptr(),
                            ldb)
    }
}

#[inline]
pub fn dgttrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f64], d: &[f64],
              du: &[f64], du2: &[f64], ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgttrs(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                            d.as_ptr(), du.as_ptr(), du2.as_ptr(), ipiv.as_ptr(), b.as_mut_ptr(),
                            ldb)
    }
}

#[inline]
pub fn cgttrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c32], d: &[c32],
              du: &[c32], du2: &[c32], ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgttrs(matrix_layout.into(), trans as c_char, n, nrhs,
                            dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, du2.as_ptr() as *const _, ipiv.as_ptr(),
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgttrs(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c64], d: &[c64],
              du: &[c64], du2: &[c64], ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgttrs(matrix_layout.into(), trans as c_char, n, nrhs,
                            dl.as_ptr() as *const _, d.as_ptr() as *const _,
                            du.as_ptr() as *const _, du2.as_ptr() as *const _, ipiv.as_ptr(),
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chbev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c32], ldab: i32,
             w: &mut [f32], z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbev(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                           ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                           z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhbev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c64], ldab: i32,
             w: &mut [f64], z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbev(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                           ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                           z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chbevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c32],
              ldab: i32, w: &mut [f32], z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhbevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c64],
              ldab: i32, w: &mut [f64], z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chbevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
              ab: &mut [c32], ldab: i32, q: &mut c32, ldq: i32, vl: f32, vu: f32, il: i32, iu: i32,
              abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [c32], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, kd, ab.as_mut_ptr() as *mut _, ldab, q as *mut _ as *mut _, ldq, vl,
                            vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                            ifail)
    }
}

#[inline]
pub fn zhbevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
              ab: &mut [c64], ldab: i32, q: &mut c64, ldq: i32, vl: f64, vu: f64, il: i32, iu: i32,
              abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [c64], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, kd, ab.as_mut_ptr() as *mut _, ldab, q as *mut _ as *mut _, ldq, vl,
                            vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                            ifail)
    }
}

#[inline]
pub fn chbgst(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [c32],
              ldab: i32, bb: &[c32], ldbb: i32, x: &mut [c32], ldx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgst(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr() as *mut _, ldab, bb.as_ptr() as *const _, ldbb,
                            x.as_mut_ptr() as *mut _, ldx)
    }
}

#[inline]
pub fn zhbgst(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [c64],
              ldab: i32, bb: &[c64], ldbb: i32, x: &mut [c64], ldx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgst(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr() as *mut _, ldab, bb.as_ptr() as *const _, ldbb,
                            x.as_mut_ptr() as *mut _, ldx)
    }
}

#[inline]
pub fn chbgv(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [c32],
             ldab: i32, bb: &mut [c32], ldbb: i32, w: &mut [f32], z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgv(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                           ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                           w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhbgv(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [c64],
             ldab: i32, bb: &mut [c64], ldbb: i32, w: &mut [f64], z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgv(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                           ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                           w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chbgvd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [c32],
              ldab: i32, bb: &mut [c32], ldbb: i32, w: &mut [f32], z: &mut [c32],
              ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgvd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhbgvd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [c64],
              ldab: i32, bb: &mut [c64], ldbb: i32, w: &mut [f64], z: &mut [c64],
              ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgvd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chbgvx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
              ab: &mut [c32], ldab: i32, bb: &mut [c32], ldbb: i32, q: &mut c32, ldq: i32, vl: f32,
              vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [c32],
              ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgvx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ka, kb, ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _,
                            ldbb, q as *mut _ as *mut _, ldq, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn zhbgvx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
              ab: &mut [c64], ldab: i32, bb: &mut [c64], ldbb: i32, q: &mut c64, ldq: i32, vl: f64,
              vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [c64],
              ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgvx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ka, kb, ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _,
                            ldbb, q as *mut _ as *mut _, ldq, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn chbtrd(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c32],
              ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut c32, ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbtrd(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                            q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn zhbtrd(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c64],
              ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut c64, ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbtrd(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                            q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn checon(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, ipiv: &[i32],
              anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_checon(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn zhecon(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, ipiv: &[i32],
              anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zhecon(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn cheequb(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, s: &mut [f32],
               scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cheequb(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                             s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zheequb(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, s: &mut [f64],
               scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zheequb(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                             s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cheev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c32], lda: i32,
             w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cheev(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn zheev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c64], lda: i32,
             w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zheev(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn cheevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cheevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn zheevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zheevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn cheevr(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c32],
              lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
              w: &mut [f32], z: &mut [c32], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cheevr(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn zheevr(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c64],
              lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
              w: &mut [f64], z: &mut [c64], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zheevr(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn cheevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c32],
              lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
              w: &mut [f32], z: &mut [c32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cheevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn zheevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c64],
              lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
              w: &mut [f64], z: &mut [c64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zheevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn chegst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              b: &[c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chegst(matrix_layout.into(), itype, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_ptr() as *const _, ldb)
    }
}

#[inline]
pub fn zhegst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              b: &[c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegst(matrix_layout.into(), itype, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_ptr() as *const _, ldb)
    }
}

#[inline]
pub fn chegv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c32],
             lda: i32, b: &mut [c32], ldb: i32, w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chegv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                           w.as_mut_ptr())
    }
}

#[inline]
pub fn zhegv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c64],
             lda: i32, b: &mut [c64], ldb: i32, w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                           w.as_mut_ptr())
    }
}

#[inline]
pub fn chegvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c32],
              lda: i32, b: &mut [c32], ldb: i32, w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chegvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            w.as_mut_ptr())
    }
}

#[inline]
pub fn zhegvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c64],
              lda: i32, b: &mut [c64], ldb: i32, w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            w.as_mut_ptr())
    }
}

#[inline]
pub fn chegvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, vl: f32, vu: f32, il: i32, iu: i32,
              abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [c32], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chegvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn zhegvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, vl: f64, vu: f64, il: i32, iu: i32,
              abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [c64], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn cherfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32, af: &[c32],
              ldaf: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cherfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, ipiv.as_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zherfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32, af: &[c64],
              ldaf: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zherfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, ipiv.as_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cherfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
               af: &[c32], ldaf: i32, ipiv: &[i32], s: &[f32], b: &[c32], ldb: i32, x: &mut [c32],
               ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cherfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn zherfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
               af: &[c64], ldaf: i32, ipiv: &[i32], s: &[f64], b: &[c64], ldb: i32, x: &mut [c64],
               ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zherfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn chesv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
             ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chesv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr() as *mut _,
                           lda, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhesv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
             ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhesv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr() as *mut _,
                           lda, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chesvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
              af: &mut [c32], ldaf: i32, ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32],
              ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chesvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn zhesvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
              af: &mut [c64], ldaf: i32, ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64],
              ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhesvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn chesvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
               lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               s: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
               rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chesvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                             b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn zhesvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
               lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               s: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
               rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhesvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                             b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn chetrd(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, d: &mut [f32],
              e: &mut [f32], tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrd(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhetrd(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, d: &mut [f64],
              e: &mut [f64], tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrd(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn chetrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zhetrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn chetri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn zhetri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn chetrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
              ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhetrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
              ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chfrk(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32, alpha: f32,
             a: &[c32], lda: i32, beta: f32, c: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chfrk(matrix_layout.into(), transr as c_char, uplo as c_char, trans as c_char,
                           n, k, alpha, a.as_ptr() as *const _, lda, beta,
                           c.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhfrk(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32, alpha: f64,
             a: &[c64], lda: i32, beta: f64, c: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhfrk(matrix_layout.into(), transr as c_char, uplo as c_char, trans as c_char,
                           n, k, alpha, a.as_ptr() as *const _, lda, beta,
                           c.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn shgeqz(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              h: &mut [f32], ldh: i32, t: &mut [f32], ldt: i32, alphar: &mut f32, alphai: &mut f32,
              beta: &mut f32, q: &mut f32, ldq: i32, z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_shgeqz(matrix_layout.into(), job as c_char, compq as c_char, compz as c_char,
                            n, ilo, ihi, h.as_mut_ptr(), ldh, t.as_mut_ptr(), ldt, alphar, alphai,
                            beta, q, ldq, z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dhgeqz(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              h: &mut [f64], ldh: i32, t: &mut [f64], ldt: i32, alphar: &mut f64, alphai: &mut f64,
              beta: &mut f64, q: &mut f64, ldq: i32, z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dhgeqz(matrix_layout.into(), job as c_char, compq as c_char, compz as c_char,
                            n, ilo, ihi, h.as_mut_ptr(), ldh, t.as_mut_ptr(), ldt, alphar, alphai,
                            beta, q, ldq, z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn chgeqz(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              h: &mut [c32], ldh: i32, t: &mut [c32], ldt: i32, alpha: &mut c32, beta: &mut c32,
              q: &mut c32, ldq: i32, z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chgeqz(matrix_layout.into(), job as c_char, compq as c_char, compz as c_char,
                            n, ilo, ihi, h.as_mut_ptr() as *mut _, ldh, t.as_mut_ptr() as *mut _,
                            ldt, alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhgeqz(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
              h: &mut [c64], ldh: i32, t: &mut [c64], ldt: i32, alpha: &mut c64, beta: &mut c64,
              q: &mut c64, ldq: i32, z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhgeqz(matrix_layout.into(), job as c_char, compq as c_char, compz as c_char,
                            n, ilo, ihi, h.as_mut_ptr() as *mut _, ldh, t.as_mut_ptr() as *mut _,
                            ldt, alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chpcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], ipiv: &[i32], anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn zhpcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], ipiv: &[i32], anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn chpev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c32], w: &mut [f32],
             z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpev(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr() as *mut _, w.as_mut_ptr(), z.as_mut_ptr() as *mut _,
                           ldz)
    }
}

#[inline]
pub fn zhpev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c64], w: &mut [f64],
             z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpev(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr() as *mut _, w.as_mut_ptr(), z.as_mut_ptr() as *mut _,
                           ldz)
    }
}

#[inline]
pub fn chpevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c32], w: &mut [f32],
              z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr() as *mut _, w.as_mut_ptr(), z.as_mut_ptr() as *mut _,
                            ldz)
    }
}

#[inline]
pub fn zhpevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c64], w: &mut [f64],
              z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr() as *mut _, w.as_mut_ptr(), z.as_mut_ptr() as *mut _,
                            ldz)
    }
}

#[inline]
pub fn chpevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [c32],
              vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
              z: &mut [c32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ap.as_mut_ptr() as *mut _, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn zhpevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [c64],
              vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
              z: &mut [c64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ap.as_mut_ptr() as *mut _, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn chpgst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [c32],
              bp: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgst(matrix_layout.into(), itype, uplo as c_char, n,
                            ap.as_mut_ptr() as *mut _, bp.as_ptr() as *const _)
    }
}

#[inline]
pub fn zhpgst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [c64],
              bp: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgst(matrix_layout.into(), itype, uplo as c_char, n,
                            ap.as_mut_ptr() as *mut _, bp.as_ptr() as *const _)
    }
}

#[inline]
pub fn chpgv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c32],
             bp: &mut [c32], w: &mut [f32], z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                           z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhpgv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c64],
             bp: &mut [c64], w: &mut [f64], z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                           z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chpgvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c32],
              bp: &mut [c32], w: &mut [f32], z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhpgvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c64],
              bp: &mut [c64], w: &mut [f64], z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn chpgvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              ap: &mut [c32], bp: &mut [c32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32,
              m: &mut i32, w: &mut [f32], z: &mut [c32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            bp.as_mut_ptr() as *mut _, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn zhpgvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              ap: &mut [c64], bp: &mut [c64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64,
              m: &mut i32, w: &mut [f64], z: &mut [c64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            bp.as_mut_ptr() as *mut _, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz, ifail)
    }
}

#[inline]
pub fn chprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], afp: &[c32],
              ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            afp.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zhprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], afp: &[c64],
              ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            afp.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn chpsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32], ipiv: &mut [i32],
             b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpsv(matrix_layout.into(), uplo as c_char, n, nrhs,
                           ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                           ldb)
    }
}

#[inline]
pub fn zhpsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64], ipiv: &mut [i32],
             b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpsv(matrix_layout.into(), uplo as c_char, n, nrhs,
                           ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                           ldb)
    }
}

#[inline]
pub fn chpsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c32],
              afp: &mut [c32], ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zhpsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c64],
              afp: &mut [c64], ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn chptrd(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], d: &mut [f32],
              e: &mut [f32], tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chptrd(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhptrd(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], d: &mut [f64],
              e: &mut [f64], tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhptrd(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn chptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], ipiv: &mut [i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_chptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zhptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], ipiv: &mut [i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_zhptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn chptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_chptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn zhptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_zhptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn chptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], ipiv: &[i32],
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], ipiv: &[i32],
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn shsein(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &mut [i32], n: i32,
              h: &[f32], ldh: i32, wr: &mut [f32], wi: &[f32], vl: &mut f32, ldvl: i32,
              vr: &mut f32, ldvr: i32, mm: i32, m: &mut i32, ifaill: &mut i32,
              ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_shsein(matrix_layout.into(), job as c_char, eigsrc as c_char, initv as c_char,
                            select.as_mut_ptr(), n, h.as_ptr(), ldh, wr.as_mut_ptr(), wi.as_ptr(),
                            vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr)
    }
}

#[inline]
pub fn dhsein(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &mut [i32], n: i32,
              h: &[f64], ldh: i32, wr: &mut [f64], wi: &[f64], vl: &mut f64, ldvl: i32,
              vr: &mut f64, ldvr: i32, mm: i32, m: &mut i32, ifaill: &mut i32,
              ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dhsein(matrix_layout.into(), job as c_char, eigsrc as c_char, initv as c_char,
                            select.as_mut_ptr(), n, h.as_ptr(), ldh, wr.as_mut_ptr(), wi.as_ptr(),
                            vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr)
    }
}

#[inline]
pub fn chsein(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &[i32], n: i32,
              h: &[c32], ldh: i32, w: &mut [c32], vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32,
              mm: i32, m: &mut i32, ifaill: &mut i32, ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chsein(matrix_layout.into(), job as c_char, eigsrc as c_char, initv as c_char,
                            select.as_ptr(), n, h.as_ptr() as *const _, ldh,
                            w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, mm, m, ifaill, ifailr)
    }
}

#[inline]
pub fn zhsein(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &[i32], n: i32,
              h: &[c64], ldh: i32, w: &mut [c64], vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32,
              mm: i32, m: &mut i32, ifaill: &mut i32, ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhsein(matrix_layout.into(), job as c_char, eigsrc as c_char, initv as c_char,
                            select.as_ptr(), n, h.as_ptr() as *const _, ldh,
                            w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, mm, m, ifaill, ifailr)
    }
}

#[inline]
pub fn shseqr(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32, h: &mut [f32],
              ldh: i32, wr: &mut [f32], wi: &mut [f32], z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_shseqr(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                            h.as_mut_ptr(), ldh, wr.as_mut_ptr(), wi.as_mut_ptr(), z.as_mut_ptr(),
                            ldz)
    }
}

#[inline]
pub fn dhseqr(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32, h: &mut [f64],
              ldh: i32, wr: &mut [f64], wi: &mut [f64], z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dhseqr(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                            h.as_mut_ptr(), ldh, wr.as_mut_ptr(), wi.as_mut_ptr(), z.as_mut_ptr(),
                            ldz)
    }
}

#[inline]
pub fn chseqr(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32, h: &mut [c32],
              ldh: i32, w: &mut [c32], z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chseqr(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                            h.as_mut_ptr() as *mut _, ldh, w.as_mut_ptr() as *mut _,
                            z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zhseqr(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32, h: &mut [c64],
              ldh: i32, w: &mut [c64], z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhseqr(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                            h.as_mut_ptr() as *mut _, ldh, w.as_mut_ptr() as *mut _,
                            z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn clacgv(n: i32, x: &mut [c32], incx: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_clacgv(n, x.as_mut_ptr() as *mut _, incx)
    }
}

#[inline]
pub fn zlacgv(n: i32, x: &mut [c64], incx: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zlacgv(n, x.as_mut_ptr() as *mut _, incx)
    }
}

#[inline]
pub fn slacn2(n: i32, v: &mut [f32], x: &mut [f32], isgn: &mut [i32], est: &mut [f32],
              kase: &mut i32, isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slacn2(n, v.as_mut_ptr(), x.as_mut_ptr(), isgn.as_mut_ptr(), est.as_mut_ptr(),
                            kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn dlacn2(n: i32, v: &mut [f64], x: &mut [f64], isgn: &mut [i32], est: &mut [f64],
              kase: &mut i32, isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlacn2(n, v.as_mut_ptr(), x.as_mut_ptr(), isgn.as_mut_ptr(), est.as_mut_ptr(),
                            kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn clacn2(n: i32, v: &mut [c32], x: &mut [c32], est: &mut [f32], kase: &mut i32,
              isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clacn2(n, v.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _,
                            est.as_mut_ptr(), kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn zlacn2(n: i32, v: &mut [c64], x: &mut [c64], est: &mut [f64], kase: &mut i32,
              isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlacn2(n, v.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _,
                            est.as_mut_ptr(), kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn slacpy(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f32], lda: i32, b: &mut [f32],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slacpy(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dlacpy(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f64], lda: i32, b: &mut [f64],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlacpy(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn clacpy(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[c32], lda: i32, b: &mut [c32],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clacpy(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr() as *const _,
                            lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zlacpy(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[c64], lda: i32, b: &mut [c64],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlacpy(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr() as *const _,
                            lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn clacp2(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f32], lda: i32, b: &mut [c32],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clacp2(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zlacp2(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f64], lda: i32, b: &mut [c64],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlacp2(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zlag2c(matrix_layout: Layout, m: i32, n: i32, a: &[c64], lda: i32, sa: &mut [c32],
              ldsa: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlag2c(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                            sa.as_mut_ptr() as *mut _, ldsa)
    }
}

#[inline]
pub fn slag2d(matrix_layout: Layout, m: i32, n: i32, sa: &[f32], ldsa: i32, a: &mut [f64],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slag2d(matrix_layout.into(), m, n, sa.as_ptr(), ldsa, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlag2s(matrix_layout: Layout, m: i32, n: i32, a: &[f64], lda: i32, sa: &mut [f32],
              ldsa: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlag2s(matrix_layout.into(), m, n, a.as_ptr(), lda, sa.as_mut_ptr(), ldsa)
    }
}

#[inline]
pub fn clag2z(matrix_layout: Layout, m: i32, n: i32, sa: &[c32], ldsa: i32, a: &mut [c64],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clag2z(matrix_layout.into(), m, n, sa.as_ptr() as *const _, ldsa,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slagge(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f32], a: &mut [f32],
              lda: i32, iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slagge(matrix_layout.into(), m, n, kl, ku, d.as_ptr(), a.as_mut_ptr(), lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn dlagge(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f64], a: &mut [f64],
              lda: i32, iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlagge(matrix_layout.into(), m, n, kl, ku, d.as_ptr(), a.as_mut_ptr(), lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn clagge(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f32], a: &mut [c32],
              lda: i32, iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clagge(matrix_layout.into(), m, n, kl, ku, d.as_ptr(),
                            a.as_mut_ptr() as *mut _, lda, iseed.as_mut_ptr())
    }
}

#[inline]
pub fn zlagge(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f64], a: &mut [c64],
              lda: i32, iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlagge(matrix_layout.into(), m, n, kl, ku, d.as_ptr(),
                            a.as_mut_ptr() as *mut _, lda, iseed.as_mut_ptr())
    }
}

#[inline]
pub fn slamch(cmach: u8) -> f32 {
    unsafe {
        ffi::LAPACKE_slamch(cmach as c_char)
    }
}

#[inline]
pub fn dlamch(cmach: u8) -> f64 {
    unsafe {
        ffi::LAPACKE_dlamch(cmach as c_char)
    }
}

#[inline]
pub fn slange(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[f32], lda: i32) -> f32 {
    unsafe {
        ffi::LAPACKE_slange(matrix_layout.into(), norm as c_char, m, n, a.as_ptr(), lda)
    }
}

#[inline]
pub fn dlange(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[f64], lda: i32) -> f64 {
    unsafe {
        ffi::LAPACKE_dlange(matrix_layout.into(), norm as c_char, m, n, a.as_ptr(), lda)
    }
}

#[inline]
pub fn clange(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[c32], lda: i32) -> f32 {
    unsafe {
        ffi::LAPACKE_clange(matrix_layout.into(), norm as c_char, m, n, a.as_ptr() as *const _,
                            lda)
    }
}

#[inline]
pub fn zlange(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[c64], lda: i32) -> f64 {
    unsafe {
        ffi::LAPACKE_zlange(matrix_layout.into(), norm as c_char, m, n, a.as_ptr() as *const _,
                            lda)
    }
}

#[inline]
pub fn clanhe(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c32], lda: i32) -> f32 {
    unsafe {
        ffi::LAPACKE_clanhe(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                            a.as_ptr() as *const _, lda)
    }
}

#[inline]
pub fn zlanhe(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c64], lda: i32) -> f64 {
    unsafe {
        ffi::LAPACKE_zlanhe(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                            a.as_ptr() as *const _, lda)
    }
}

#[inline]
pub fn slansy(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[f32], lda: i32) -> f32 {
    unsafe {
        ffi::LAPACKE_slansy(matrix_layout.into(), norm as c_char, uplo as c_char, n, a.as_ptr(),
                            lda)
    }
}

#[inline]
pub fn dlansy(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[f64], lda: i32) -> f64 {
    unsafe {
        ffi::LAPACKE_dlansy(matrix_layout.into(), norm as c_char, uplo as c_char, n, a.as_ptr(),
                            lda)
    }
}

#[inline]
pub fn clansy(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c32], lda: i32) -> f32 {
    unsafe {
        ffi::LAPACKE_clansy(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                            a.as_ptr() as *const _, lda)
    }
}

#[inline]
pub fn zlansy(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c64], lda: i32) -> f64 {
    unsafe {
        ffi::LAPACKE_zlansy(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                            a.as_ptr() as *const _, lda)
    }
}

#[inline]
pub fn slantr(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[f32],
              lda: i32) -> f32 {

    unsafe {
        ffi::LAPACKE_slantr(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            m, n, a.as_ptr(), lda)
    }
}

#[inline]
pub fn dlantr(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[f64],
              lda: i32) -> f64 {

    unsafe {
        ffi::LAPACKE_dlantr(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            m, n, a.as_ptr(), lda)
    }
}

#[inline]
pub fn clantr(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[c32],
              lda: i32) -> f32 {

    unsafe {
        ffi::LAPACKE_clantr(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            m, n, a.as_ptr() as *const _, lda)
    }
}

#[inline]
pub fn zlantr(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[c64],
              lda: i32) -> f64 {

    unsafe {
        ffi::LAPACKE_zlantr(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            m, n, a.as_ptr() as *const _, lda)
    }
}

#[inline]
pub fn slarfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, v: &[f32], ldv: i32, t: &[f32], ldt: i32, c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slarfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, v.as_ptr(), ldv,
                            t.as_ptr(), ldt, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dlarfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, v: &[f64], ldv: i32, t: &[f64], ldt: i32, c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlarfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, v.as_ptr(), ldv,
                            t.as_ptr(), ldt, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn clarfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, v: &[c32], ldv: i32, t: &[c32], ldt: i32, c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clarfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, v.as_ptr() as *const _,
                            ldv, t.as_ptr() as *const _, ldt, c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zlarfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, v: &[c64], ldv: i32, t: &[c64], ldt: i32, c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlarfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, v.as_ptr() as *const _,
                            ldv, t.as_ptr() as *const _, ldt, c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn slarfg(n: i32, alpha: &mut f32, x: &mut [f32], incx: i32, tau: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slarfg(n, alpha, x.as_mut_ptr(), incx, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dlarfg(n: i32, alpha: &mut f64, x: &mut [f64], incx: i32, tau: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlarfg(n, alpha, x.as_mut_ptr(), incx, tau.as_mut_ptr())
    }
}

#[inline]
pub fn clarfg(n: i32, alpha: &mut c32, x: &mut [c32], incx: i32, tau: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_clarfg(n, alpha as *mut _ as *mut _, x.as_mut_ptr() as *mut _, incx,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlarfg(n: i32, alpha: &mut c64, x: &mut [c64], incx: i32, tau: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zlarfg(n, alpha as *mut _ as *mut _, x.as_mut_ptr() as *mut _, incx,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slarft(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[f32], ldv: i32,
              tau: &[f32], t: &mut [f32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slarft(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                            v.as_ptr(), ldv, tau.as_ptr(), t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dlarft(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[f64], ldv: i32,
              tau: &[f64], t: &mut [f64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlarft(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                            v.as_ptr(), ldv, tau.as_ptr(), t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn clarft(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[c32], ldv: i32,
              tau: &[c32], t: &mut [c32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clarft(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                            v.as_ptr() as *const _, ldv, tau.as_ptr() as *const _,
                            t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zlarft(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[c64], ldv: i32,
              tau: &[c64], t: &mut [c64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlarft(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                            v.as_ptr() as *const _, ldv, tau.as_ptr() as *const _,
                            t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn slarfx(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[f32], tau: f32, c: &mut [f32],
              ldc: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slarfx(matrix_layout.into(), side as c_char, m, n, v.as_ptr(), tau,
                            c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn dlarfx(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[f64], tau: f64, c: &mut [f64],
              ldc: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlarfx(matrix_layout.into(), side as c_char, m, n, v.as_ptr(), tau,
                            c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn clarfx(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[c32], tau: c32, c: &mut [c32],
              ldc: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clarfx(matrix_layout.into(), side as c_char, m, n, v.as_ptr() as *const _,
                            transmute(tau), c.as_mut_ptr() as *mut _, ldc,
                            work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlarfx(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[c64], tau: c64, c: &mut [c64],
              ldc: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlarfx(matrix_layout.into(), side as c_char, m, n, v.as_ptr() as *const _,
                            transmute(tau), c.as_mut_ptr() as *mut _, ldc,
                            work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slarnv(idist: i32, iseed: &mut [i32], n: i32, x: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slarnv(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr())
    }
}

#[inline]
pub fn dlarnv(idist: i32, iseed: &mut [i32], n: i32, x: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlarnv(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr())
    }
}

#[inline]
pub fn clarnv(idist: i32, iseed: &mut [i32], n: i32, x: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_clarnv(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlarnv(idist: i32, iseed: &mut [i32], n: i32, x: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zlarnv(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slascl(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f32, cto: f32, m: i32,
              n: i32, a: &mut [f32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slascl(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                            a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlascl(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f64, cto: f64, m: i32,
              n: i32, a: &mut [f64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlascl(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                            a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn clascl(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f32, cto: f32, m: i32,
              n: i32, a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clascl(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zlascl(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f64, cto: f64, m: i32,
              n: i32, a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlascl(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slaset(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: f32, beta: f32,
              a: &mut [f32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slaset(matrix_layout.into(), uplo as c_char, m, n, alpha, beta,
                            a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlaset(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: f64, beta: f64,
              a: &mut [f64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlaset(matrix_layout.into(), uplo as c_char, m, n, alpha, beta,
                            a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn claset(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: c32, beta: c32,
              a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_claset(matrix_layout.into(), uplo as c_char, m, n, transmute(alpha),
                            transmute(beta), a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zlaset(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: c64, beta: c64,
              a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlaset(matrix_layout.into(), uplo as c_char, m, n, transmute(alpha),
                            transmute(beta), a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slasrt(id: u8, n: i32, d: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slasrt(id as c_char, n, d.as_mut_ptr())
    }
}

#[inline]
pub fn dlasrt(id: u8, n: i32, d: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlasrt(id as c_char, n, d.as_mut_ptr())
    }
}

#[inline]
pub fn slaswp(matrix_layout: Layout, n: i32, a: &mut [f32], lda: i32, k1: i32, k2: i32,
              ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slaswp(matrix_layout.into(), n, a.as_mut_ptr(), lda, k1, k2, ipiv.as_ptr(),
                            incx)
    }
}

#[inline]
pub fn dlaswp(matrix_layout: Layout, n: i32, a: &mut [f64], lda: i32, k1: i32, k2: i32,
              ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlaswp(matrix_layout.into(), n, a.as_mut_ptr(), lda, k1, k2, ipiv.as_ptr(),
                            incx)
    }
}

#[inline]
pub fn claswp(matrix_layout: Layout, n: i32, a: &mut [c32], lda: i32, k1: i32, k2: i32,
              ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_claswp(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda, k1, k2,
                            ipiv.as_ptr(), incx)
    }
}

#[inline]
pub fn zlaswp(matrix_layout: Layout, n: i32, a: &mut [c64], lda: i32, k1: i32, k2: i32,
              ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlaswp(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda, k1, k2,
                            ipiv.as_ptr(), incx)
    }
}

#[inline]
pub fn slatms(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
              d: &mut [f32], mode: i32, cond: f32, dmax: f32, kl: i32, ku: i32, pack: u8,
              a: &mut [f32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slatms(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                            sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                            pack as c_char, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlatms(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
              d: &mut [f64], mode: i32, cond: f64, dmax: f64, kl: i32, ku: i32, pack: u8,
              a: &mut [f64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlatms(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                            sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                            pack as c_char, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn clatms(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
              d: &mut [f32], mode: i32, cond: f32, dmax: f32, kl: i32, ku: i32, pack: u8,
              a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clatms(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                            sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                            pack as c_char, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zlatms(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
              d: &mut [f64], mode: i32, cond: f64, dmax: f64, kl: i32, ku: i32, pack: u8,
              a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlatms(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                            sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                            pack as c_char, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slauum(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_slauum(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlauum(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dlauum(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn clauum(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_clauum(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zlauum(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zlauum(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn sopgtr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], tau: &[f32], q: &mut f32,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sopgtr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), tau.as_ptr(), q,
                            ldq)
    }
}

#[inline]
pub fn dopgtr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], tau: &[f64], q: &mut f64,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dopgtr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), tau.as_ptr(), q,
                            ldq)
    }
}

#[inline]
pub fn sopmtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, ap: &[f32],
              tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sopmtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, ap.as_ptr(), tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dopmtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, ap: &[f64],
              tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dopmtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, ap.as_ptr(), tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sorgbr(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgbr(matrix_layout.into(), vect as c_char, m, n, k, a.as_mut_ptr(), lda,
                            tau.as_ptr())
    }
}

#[inline]
pub fn dorgbr(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgbr(matrix_layout.into(), vect as c_char, m, n, k, a.as_mut_ptr(), lda,
                            tau.as_ptr())
    }
}

#[inline]
pub fn sorghr(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorghr(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn dorghr(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorghr(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn sorglq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorglq(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn dorglq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorglq(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn sorgql(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgql(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn dorgql(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgql(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn sorgqr(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgqr(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn dorgqr(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgqr(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn sorgrq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgrq(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn dorgrq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgrq(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr())
    }
}

#[inline]
pub fn sorgtr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
              tau: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgtr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            tau.as_ptr())
    }
}

#[inline]
pub fn dorgtr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
              tau: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgtr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            tau.as_ptr())
    }
}

#[inline]
pub fn sormbr(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
              a: &[f32], lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormbr(matrix_layout.into(), vect as c_char, side as c_char, trans as c_char,
                            m, n, k, a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormbr(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
              a: &[f64], lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormbr(matrix_layout.into(), vect as c_char, side as c_char, trans as c_char,
                            m, n, k, a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormhr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
              a: &[f32], lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormhr(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo, ihi,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormhr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
              a: &[f64], lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormhr(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo, ihi,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormlq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
              lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormlq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormlq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
              lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormlq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormql(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
              lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormql(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormql(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
              lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormql(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormqr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
              lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormqr(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormqr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
              lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormqr(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormrq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
              lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormrq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormrq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
              lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormrq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormrz(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
              a: &[f32], lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormrz(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormrz(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
              a: &[f64], lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormrz(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                            a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn sormtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[f32],
              lda: i32, tau: &[f32], c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dormtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[f64],
              lda: i32, tau: &[f64], c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn spbcon(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f32], ldab: i32, anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbcon(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab, anorm,
                            rcond)
    }
}

#[inline]
pub fn dpbcon(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f64], ldab: i32, anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbcon(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab, anorm,
                            rcond)
    }
}

#[inline]
pub fn cpbcon(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c32], ldab: i32, anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbcon(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr() as *const _,
                            ldab, anorm, rcond)
    }
}

#[inline]
pub fn zpbcon(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c64], ldab: i32, anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbcon(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr() as *const _,
                            ldab, anorm, rcond)
    }
}

#[inline]
pub fn spbequ(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f32], ldab: i32,
              s: &mut [f32], scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbequ(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab,
                            s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dpbequ(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f64], ldab: i32,
              s: &mut [f64], scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbequ(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab,
                            s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cpbequ(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c32], ldab: i32,
              s: &mut [f32], scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbequ(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr() as *const _,
                            ldab, s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zpbequ(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c64], ldab: i32,
              s: &mut [f64], scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbequ(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr() as *const _,
                            ldab, s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn spbrfs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f32], ldab: i32,
              afb: &[f32], ldafb: i32, b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbrfs(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(), ldab,
                            afb.as_ptr(), ldafb, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dpbrfs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f64], ldab: i32,
              afb: &[f64], ldafb: i32, b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbrfs(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(), ldab,
                            afb.as_ptr(), ldafb, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cpbrfs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c32], ldab: i32,
              afb: &[c32], ldafb: i32, b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbrfs(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                            ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zpbrfs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c64], ldab: i32,
              afb: &[c64], ldafb: i32, b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbrfs(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                            ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn spbstf(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [f32], ldbb: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spbstf(matrix_layout.into(), uplo as c_char, n, kb, bb.as_mut_ptr(), ldbb)
    }
}

#[inline]
pub fn dpbstf(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [f64], ldbb: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpbstf(matrix_layout.into(), uplo as c_char, n, kb, bb.as_mut_ptr(), ldbb)
    }
}

#[inline]
pub fn cpbstf(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [c32], ldbb: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpbstf(matrix_layout.into(), uplo as c_char, n, kb, bb.as_mut_ptr() as *mut _,
                            ldbb)
    }
}

#[inline]
pub fn zpbstf(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [c64], ldbb: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpbstf(matrix_layout.into(), uplo as c_char, n, kb, bb.as_mut_ptr() as *mut _,
                            ldbb)
    }
}

#[inline]
pub fn spbsv(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [f32],
             ldab: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbsv(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_mut_ptr(),
                           ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpbsv(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [f64],
             ldab: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbsv(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_mut_ptr(),
                           ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpbsv(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [c32],
             ldab: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbsv(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                           ab.as_mut_ptr() as *mut _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpbsv(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [c64],
             ldab: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbsv(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                           ab.as_mut_ptr() as *mut _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spbsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
              ab: &mut [f32], ldab: i32, afb: &mut [f32], ldafb: i32, equed: &mut u8,
              s: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                            ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                            x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dpbsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
              ab: &mut [f64], ldab: i32, afb: &mut [f64], ldafb: i32, equed: &mut u8,
              s: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                            ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                            x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cpbsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
              ab: &mut [c32], ldab: i32, afb: &mut [c32], ldafb: i32, equed: &mut u8,
              s: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                            ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _, ldafb,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn zpbsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
              ab: &mut [c64], ldab: i32, afb: &mut [c64], ldafb: i32, equed: &mut u8,
              s: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                            ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _, ldafb,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn spbtrf(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [f32], ldab: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spbtrf(matrix_layout.into(), uplo as c_char, n, kd, ab.as_mut_ptr(), ldab)
    }
}

#[inline]
pub fn dpbtrf(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [f64], ldab: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpbtrf(matrix_layout.into(), uplo as c_char, n, kd, ab.as_mut_ptr(), ldab)
    }
}

#[inline]
pub fn cpbtrf(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [c32], ldab: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpbtrf(matrix_layout.into(), uplo as c_char, n, kd, ab.as_mut_ptr() as *mut _,
                            ldab)
    }
}

#[inline]
pub fn zpbtrf(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [c64], ldab: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpbtrf(matrix_layout.into(), uplo as c_char, n, kd, ab.as_mut_ptr() as *mut _,
                            ldab)
    }
}

#[inline]
pub fn spbtrs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f32], ldab: i32,
              b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbtrs(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(), ldab,
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpbtrs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f64], ldab: i32,
              b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbtrs(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(), ldab,
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpbtrs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c32], ldab: i32,
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbtrs(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                            ab.as_ptr() as *const _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpbtrs(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c64], ldab: i32,
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbtrs(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                            ab.as_ptr() as *const _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spftrf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spftrf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr())
    }
}

#[inline]
pub fn dpftrf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpftrf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr())
    }
}

#[inline]
pub fn cpftrf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpftrf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpftrf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpftrf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spftri(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spftri(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr())
    }
}

#[inline]
pub fn dpftri(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpftri(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr())
    }
}

#[inline]
pub fn cpftri(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpftri(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpftri(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpftri(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spftrs(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[f32],
              b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spftrs(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpftrs(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[f64],
              b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpftrs(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpftrs(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[c32],
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpftrs(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpftrs(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[c64],
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpftrs(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spocon(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32, anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_spocon(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda, anorm, rcond)
    }
}

#[inline]
pub fn dpocon(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32, anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dpocon(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda, anorm, rcond)
    }
}

#[inline]
pub fn cpocon(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpocon(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            anorm, rcond)
    }
}

#[inline]
pub fn zpocon(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zpocon(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            anorm, rcond)
    }
}

#[inline]
pub fn spoequ(matrix_layout: Layout, n: i32, a: &[f32], lda: i32, s: &mut [f32], scond: &mut [f32],
              amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spoequ(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                            scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dpoequ(matrix_layout: Layout, n: i32, a: &[f64], lda: i32, s: &mut [f64], scond: &mut [f64],
              amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpoequ(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                            scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cpoequ(matrix_layout: Layout, n: i32, a: &[c32], lda: i32, s: &mut [f32], scond: &mut [f32],
              amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpoequ(matrix_layout.into(), n, a.as_ptr() as *const _, lda, s.as_mut_ptr(),
                            scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zpoequ(matrix_layout: Layout, n: i32, a: &[c64], lda: i32, s: &mut [f64], scond: &mut [f64],
              amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpoequ(matrix_layout.into(), n, a.as_ptr() as *const _, lda, s.as_mut_ptr(),
                            scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn spoequb(matrix_layout: Layout, n: i32, a: &[f32], lda: i32, s: &mut [f32],
               scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spoequb(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                             scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dpoequb(matrix_layout: Layout, n: i32, a: &[f64], lda: i32, s: &mut [f64],
               scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpoequb(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                             scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cpoequb(matrix_layout: Layout, n: i32, a: &[c32], lda: i32, s: &mut [f32],
               scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpoequb(matrix_layout.into(), n, a.as_ptr() as *const _, lda, s.as_mut_ptr(),
                             scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zpoequb(matrix_layout: Layout, n: i32, a: &[c64], lda: i32, s: &mut [f64],
               scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpoequb(matrix_layout.into(), n, a.as_ptr() as *const _, lda, s.as_mut_ptr(),
                             scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sporfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32, af: &[f32],
              ldaf: i32, b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sporfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            af.as_ptr(), ldaf, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dporfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32, af: &[f64],
              ldaf: i32, b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dporfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            af.as_ptr(), ldaf, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cporfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32, af: &[c32],
              ldaf: i32, b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cporfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zporfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32, af: &[c64],
              ldaf: i32, b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zporfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sporfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
               af: &[f32], ldaf: i32, s: &[f32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
               rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sporfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr(), lda, af.as_ptr(), ldaf, s.as_ptr(), b.as_ptr(), ldb,
                             x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn dporfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
               af: &[f64], ldaf: i32, s: &[f64], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
               rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dporfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr(), lda, af.as_ptr(), ldaf, s.as_ptr(), b.as_ptr(), ldb,
                             x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn cporfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
               af: &[c32], ldaf: i32, s: &[f32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
               rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cporfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             s.as_ptr(), b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _,
                             ldx, rcond, berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn zporfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
               af: &[c64], ldaf: i32, s: &[f64], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
               rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zporfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             s.as_ptr(), b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _,
                             ldx, rcond, berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn sposv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
             b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sposv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dposv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
             b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dposv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cposv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
             b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cposv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr() as *mut _,
                           lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zposv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
             b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zposv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr() as *mut _,
                           lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn dsposv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsposv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, iter.as_mut_ptr())
    }
}

#[inline]
pub fn zcposv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zcposv(matrix_layout.into(), uplo as c_char, n, nrhs,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, iter.as_mut_ptr())
    }
}

#[inline]
pub fn sposvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f32],
              lda: i32, af: &mut [f32], ldaf: i32, equed: &mut u8, s: &mut [f32], b: &mut [f32],
              ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sposvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, equed as *mut _ as *mut _,
                            s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dposvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f64],
              lda: i32, af: &mut [f64], ldaf: i32, equed: &mut u8, s: &mut [f64], b: &mut [f64],
              ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dposvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, equed as *mut _ as *mut _,
                            s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cposvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
              lda: i32, af: &mut [c32], ldaf: i32, equed: &mut u8, s: &mut [f32], b: &mut [c32],
              ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cposvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn zposvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
              lda: i32, af: &mut [c64], ldaf: i32, equed: &mut u8, s: &mut [f64], b: &mut [c64],
              ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zposvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn sposvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f32],
               lda: i32, af: &mut [f32], ldaf: i32, equed: &mut u8, s: &mut [f32], b: &mut [f32],
               ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32, rpvgrw: &mut [f32],
               berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sposvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, equed as *mut _ as *mut _,
                             s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn dposvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f64],
               lda: i32, af: &mut [f64], ldaf: i32, equed: &mut u8, s: &mut [f64], b: &mut [f64],
               ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64, rpvgrw: &mut [f64],
               berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dposvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, equed as *mut _ as *mut _,
                             s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn cposvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
               lda: i32, af: &mut [c32], ldaf: i32, equed: &mut u8, s: &mut [f32], b: &mut [c32],
               ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32, rpvgrw: &mut [f32],
               berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cposvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                             ldb, x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn zposvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
               lda: i32, af: &mut [c64], ldaf: i32, equed: &mut u8, s: &mut [f64], b: &mut [c64],
               ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64, rpvgrw: &mut [f64],
               berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zposvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                             ldb, x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                             berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                             err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn spotrf2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spotrf2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dpotrf2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpotrf2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn cpotrf2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpotrf2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                             lda)
    }
}

#[inline]
pub fn zpotrf2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpotrf2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                             lda)
    }
}

#[inline]
pub fn spotrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spotrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dpotrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpotrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn cpotrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpotrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zpotrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpotrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn spotri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spotri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dpotri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpotri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn cpotri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpotri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zpotri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpotri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn spotrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
              b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spotrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpotrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
              b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpotrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpotrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpotrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpotrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpotrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sppcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_sppcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn dppcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dppcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn cppcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cppcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            anorm, rcond)
    }
}

#[inline]
pub fn zppcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zppcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            anorm, rcond)
    }
}

#[inline]
pub fn sppequ(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], s: &mut [f32],
              scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sppequ(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), s.as_mut_ptr(),
                            scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dppequ(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], s: &mut [f64],
              scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dppequ(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), s.as_mut_ptr(),
                            scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cppequ(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], s: &mut [f32],
              scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cppequ(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zppequ(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], s: &mut [f64],
              scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zppequ(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn spprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], afp: &[f32],
              b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            afp.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn dpprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], afp: &[f64],
              b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            afp.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn cpprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], afp: &[c32],
              b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            afp.as_ptr() as *const _, b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zpprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], afp: &[c64],
              b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            afp.as_ptr() as *const _, b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sppsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f32], b: &mut [f32],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sppsv(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dppsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f64], b: &mut [f64],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dppsv(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cppsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32], b: &mut [c32],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cppsv(matrix_layout.into(), uplo as c_char, n, nrhs,
                           ap.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zppsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64], b: &mut [c64],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zppsv(matrix_layout.into(), uplo as c_char, n, nrhs,
                           ap.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sppsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [f32],
              afp: &mut [f32], equed: &mut u8, s: &mut [f32], b: &mut [f32], ldb: i32,
              x: &mut [f32], ldx: i32, rcond: &mut f32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sppsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_mut_ptr(), afp.as_mut_ptr(), equed as *mut _ as *mut _,
                            s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dppsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [f64],
              afp: &mut [f64], equed: &mut u8, s: &mut [f64], b: &mut [f64], ldb: i32,
              x: &mut [f64], ldx: i32, rcond: &mut f64, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dppsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_mut_ptr(), afp.as_mut_ptr(), equed as *mut _ as *mut _,
                            s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cppsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32],
              afp: &mut [c32], equed: &mut u8, s: &mut [f32], b: &mut [c32], ldb: i32,
              x: &mut [c32], ldx: i32, rcond: &mut f32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cppsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_mut_ptr() as *mut _, afp.as_mut_ptr() as *mut _,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn zppsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64],
              afp: &mut [c64], equed: &mut u8, s: &mut [f64], b: &mut [c64], ldb: i32,
              x: &mut [c64], ldx: i32, rcond: &mut f64, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zppsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_mut_ptr() as *mut _, afp.as_mut_ptr() as *mut _,
                            equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                            ldb, x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn spptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn dpptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn cpptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn dpptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn cpptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], b: &mut [f32],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], b: &mut [f64],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], b: &mut [c32],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], b: &mut [c64],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spstrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, piv: &mut [i32],
              rank: &mut i32, tol: f32) -> i32 {

    unsafe {
        ffi::LAPACKE_spstrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            piv.as_mut_ptr(), rank, tol)
    }
}

#[inline]
pub fn dpstrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, piv: &mut [i32],
              rank: &mut i32, tol: f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dpstrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            piv.as_mut_ptr(), rank, tol)
    }
}

#[inline]
pub fn cpstrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, piv: &mut [i32],
              rank: &mut i32, tol: f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpstrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            piv.as_mut_ptr(), rank, tol)
    }
}

#[inline]
pub fn zpstrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, piv: &mut [i32],
              rank: &mut i32, tol: f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zpstrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            piv.as_mut_ptr(), rank, tol)
    }
}

#[inline]
pub fn sptcon(n: i32, d: &[f32], e: &[f32], anorm: f32, rcond: &mut f32) -> i32 {
    unsafe {
        ffi::LAPACKE_sptcon(n, d.as_ptr(), e.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn dptcon(n: i32, d: &[f64], e: &[f64], anorm: f64, rcond: &mut f64) -> i32 {
    unsafe {
        ffi::LAPACKE_dptcon(n, d.as_ptr(), e.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn cptcon(n: i32, d: &[f32], e: &[c32], anorm: f32, rcond: &mut f32) -> i32 {
    unsafe {
        ffi::LAPACKE_cptcon(n, d.as_ptr(), e.as_ptr() as *const _, anorm, rcond)
    }
}

#[inline]
pub fn zptcon(n: i32, d: &[f64], e: &[c64], anorm: f64, rcond: &mut f64) -> i32 {
    unsafe {
        ffi::LAPACKE_zptcon(n, d.as_ptr(), e.as_ptr() as *const _, anorm, rcond)
    }
}

#[inline]
pub fn spteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
              z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dpteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
              z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn cpteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
              z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zpteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
              z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn sptrfs(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f32], e: &[f32], df: &[f32],
              ef: &[f32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sptrfs(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(), df.as_ptr(),
                            ef.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn dptrfs(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f64], e: &[f64], df: &[f64],
              ef: &[f64], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dptrfs(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(), df.as_ptr(),
                            ef.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn cptrfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f32], e: &[c32], df: &[f32],
              ef: &[c32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cptrfs(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                            e.as_ptr() as *const _, df.as_ptr(), ef.as_ptr() as *const _,
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zptrfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f64], e: &[c64], df: &[f64],
              ef: &[c64], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zptrfs(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                            e.as_ptr() as *const _, df.as_ptr(), ef.as_ptr() as *const _,
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sptsv(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f32], e: &mut [f32], b: &mut [f32],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sptsv(matrix_layout.into(), n, nrhs, d.as_mut_ptr(), e.as_mut_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dptsv(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f64], e: &mut [f64], b: &mut [f64],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dptsv(matrix_layout.into(), n, nrhs, d.as_mut_ptr(), e.as_mut_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cptsv(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f32], e: &mut [c32], b: &mut [c32],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cptsv(matrix_layout.into(), n, nrhs, d.as_mut_ptr(), e.as_mut_ptr() as *mut _,
                           b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zptsv(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f64], e: &mut [c64], b: &mut [c64],
             ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zptsv(matrix_layout.into(), n, nrhs, d.as_mut_ptr(), e.as_mut_ptr() as *mut _,
                           b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sptsvx(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f32], e: &[f32],
              df: &mut [f32], ef: &mut [f32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
              rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sptsvx(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(), e.as_ptr(),
                            df.as_mut_ptr(), ef.as_mut_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dptsvx(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f64], e: &[f64],
              df: &mut [f64], ef: &mut [f64], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
              rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dptsvx(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(), e.as_ptr(),
                            df.as_mut_ptr(), ef.as_mut_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cptsvx(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f32], e: &[c32],
              df: &mut [f32], ef: &mut [c32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cptsvx(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(),
                            e.as_ptr() as *const _, df.as_mut_ptr(), ef.as_mut_ptr() as *mut _,
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zptsvx(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f64], e: &[c64],
              df: &mut [f64], ef: &mut [c64], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zptsvx(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(),
                            e.as_ptr() as *const _, df.as_mut_ptr(), ef.as_mut_ptr() as *mut _,
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn spttrf(n: i32, d: &mut [f32], e: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spttrf(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn dpttrf(n: i32, d: &mut [f64], e: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpttrf(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn cpttrf(n: i32, d: &mut [f32], e: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpttrf(n, d.as_mut_ptr(), e.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpttrf(n: i32, d: &mut [f64], e: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpttrf(n, d.as_mut_ptr(), e.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spttrs(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f32], e: &[f32], b: &mut [f32],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spttrs(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(), b.as_mut_ptr(),
                            ldb)
    }
}

#[inline]
pub fn dpttrs(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f64], e: &[f64], b: &mut [f64],
              ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpttrs(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(), b.as_mut_ptr(),
                            ldb)
    }
}

#[inline]
pub fn cpttrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f32], e: &[c32],
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpttrs(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                            e.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpttrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f64], e: &[c64],
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpttrs(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                            e.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ssbev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f32], ldab: i32,
             w: &mut [f32], z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbev(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                           ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dsbev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f64], ldab: i32,
             w: &mut [f64], z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbev(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                           ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn ssbevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f32],
              ldab: i32, w: &mut [f32], z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dsbevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f64],
              ldab: i32, w: &mut [f64], z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn ssbevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
              ab: &mut [f32], ldab: i32, q: &mut f32, ldq: i32, vl: f32, vu: f32, il: i32, iu: i32,
              abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [f32], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, kd, ab.as_mut_ptr(), ldab, q, ldq, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dsbevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
              ab: &mut [f64], ldab: i32, q: &mut f64, ldq: i32, vl: f64, vu: f64, il: i32, iu: i32,
              abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [f64], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, kd, ab.as_mut_ptr(), ldab, q, ldq, vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn ssbgst(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [f32],
              ldab: i32, bb: &[f32], ldbb: i32, x: &mut [f32], ldx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgst(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr(), ldab, bb.as_ptr(), ldbb, x.as_mut_ptr(), ldx)
    }
}

#[inline]
pub fn dsbgst(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [f64],
              ldab: i32, bb: &[f64], ldbb: i32, x: &mut [f64], ldx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgst(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr(), ldab, bb.as_ptr(), ldbb, x.as_mut_ptr(), ldx)
    }
}

#[inline]
pub fn ssbgv(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [f32],
             ldab: i32, bb: &mut [f32], ldbb: i32, w: &mut [f32], z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgv(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                           ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                           z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dsbgv(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [f64],
             ldab: i32, bb: &mut [f64], ldbb: i32, w: &mut [f64], z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgv(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                           ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                           z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn ssbgvd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [f32],
              ldab: i32, bb: &mut [f32], ldbb: i32, w: &mut [f32], z: &mut [f32],
              ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgvd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dsbgvd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32, ab: &mut [f64],
              ldab: i32, bb: &mut [f64], ldbb: i32, w: &mut [f64], z: &mut [f64],
              ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgvd(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                            ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn ssbgvx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
              ab: &mut [f32], ldab: i32, bb: &mut [f32], ldbb: i32, q: &mut f32, ldq: i32, vl: f32,
              vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [f32],
              ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgvx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ka, kb, ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, q, ldq, vl,
                            vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dsbgvx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
              ab: &mut [f64], ldab: i32, bb: &mut [f64], ldbb: i32, q: &mut f64, ldq: i32, vl: f64,
              vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [f64],
              ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgvx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ka, kb, ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, q, ldq, vl,
                            vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn ssbtrd(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f32],
              ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut f32, ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbtrd(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq)
    }
}

#[inline]
pub fn dsbtrd(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f64],
              ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut f64, ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbtrd(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                            ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq)
    }
}

#[inline]
pub fn ssfrk(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32, alpha: f32,
             a: &[f32], lda: i32, beta: f32, c: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssfrk(matrix_layout.into(), transr as c_char, uplo as c_char, trans as c_char,
                           n, k, alpha, a.as_ptr(), lda, beta, c.as_mut_ptr())
    }
}

#[inline]
pub fn dsfrk(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32, alpha: f64,
             a: &[f64], lda: i32, beta: f64, c: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsfrk(matrix_layout.into(), transr as c_char, uplo as c_char, trans as c_char,
                           n, k, alpha, a.as_ptr(), lda, beta, c.as_mut_ptr())
    }
}

#[inline]
pub fn sspcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], ipiv: &[i32], anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), ipiv.as_ptr(),
                            anorm, rcond)
    }
}

#[inline]
pub fn dspcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], ipiv: &[i32], anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dspcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), ipiv.as_ptr(),
                            anorm, rcond)
    }
}

#[inline]
pub fn cspcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], ipiv: &[i32], anorm: f32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_cspcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn zspcon(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], ipiv: &[i32], anorm: f64,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zspcon(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn sspev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f32], w: &mut [f32],
             z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspev(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dspev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f64], w: &mut [f64],
             z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspev(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn sspevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f32], w: &mut [f32],
              z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dspevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f64], w: &mut [f64],
              z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn sspevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
              z: &mut [f32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ap.as_mut_ptr(), vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dspevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
              z: &mut [f64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, ap.as_mut_ptr(), vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn sspgst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [f32],
              bp: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgst(matrix_layout.into(), itype, uplo as c_char, n, ap.as_mut_ptr(),
                            bp.as_ptr())
    }
}

#[inline]
pub fn dspgst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [f64],
              bp: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgst(matrix_layout.into(), itype, uplo as c_char, n, ap.as_mut_ptr(),
                            bp.as_ptr())
    }
}

#[inline]
pub fn sspgv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f32],
             bp: &mut [f32], w: &mut [f32], z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dspgv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f64],
             bp: &mut [f64], w: &mut [f64], z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn sspgvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f32],
              bp: &mut [f32], w: &mut [f32], z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dspgvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f64],
              bp: &mut [f64], w: &mut [f64], z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn sspgvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              ap: &mut [f32], bp: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32,
              m: &mut i32, w: &mut [f32], z: &mut [f32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, ap.as_mut_ptr(), bp.as_mut_ptr(), vl, vu, il, iu,
                            abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dspgvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              ap: &mut [f64], bp: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64,
              m: &mut i32, w: &mut [f64], z: &mut [f64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, ap.as_mut_ptr(), bp.as_mut_ptr(), vl, vu, il, iu,
                            abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn ssprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], afp: &[f32],
              ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            afp.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dsprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], afp: &[f64],
              ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            afp.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn csprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], afp: &[c32],
              ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            afp.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zsprfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], afp: &[c64],
              ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsprfs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            afp.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn sspsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f32], ipiv: &mut [i32],
             b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspsv(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                           ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dspsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f64], ipiv: &mut [i32],
             b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspsv(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                           ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cspsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32], ipiv: &mut [i32],
             b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cspsv(matrix_layout.into(), uplo as c_char, n, nrhs,
                           ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                           ldb)
    }
}

#[inline]
pub fn zspsv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64], ipiv: &mut [i32],
             b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zspsv(matrix_layout.into(), uplo as c_char, n, nrhs,
                           ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _,
                           ldb)
    }
}

#[inline]
pub fn sspsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[f32],
              afp: &mut [f32], ipiv: &mut [i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
              rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_ptr(), afp.as_mut_ptr(), ipiv.as_mut_ptr(), b.as_ptr(), ldb,
                            x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dspsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[f64],
              afp: &mut [f64], ipiv: &mut [i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
              rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_ptr(), afp.as_mut_ptr(), ipiv.as_mut_ptr(), b.as_ptr(), ldb,
                            x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn cspsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c32],
              afp: &mut [c32], ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cspsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zspsvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c64],
              afp: &mut [c64], ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zspsvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ssptrd(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32], d: &mut [f32],
              e: &mut [f32], tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssptrd(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr())
    }
}

#[inline]
pub fn dsptrd(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64], d: &mut [f64],
              e: &mut [f64], tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsptrd(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr())
    }
}

#[inline]
pub fn ssptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32], ipiv: &mut [i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_ssptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dsptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64], ipiv: &mut [i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_dsptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn csptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], ipiv: &mut [i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_csptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zsptrf(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], ipiv: &mut [i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_zsptrf(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn ssptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32], ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_ssptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn dsptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64], ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_dsptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn csptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_csptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn zsptri(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], ipiv: &[i32]) -> i32 {
    unsafe {
        ffi::LAPACKE_zsptri(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn ssptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], ipiv: &[i32],
              b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], ipiv: &[i32],
              b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                            ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], ipiv: &[i32],
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsptrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], ipiv: &[i32],
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsptrs(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr() as *const _,
                            ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sstebz(range: u8, order: u8, n: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32,
              d: &[f32], e: &[f32], m: &mut i32, nsplit: &mut [i32], w: &mut [f32],
              iblock: &mut [i32], isplit: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sstebz(range as c_char, order as c_char, n, vl, vu, il, iu, abstol,
                            d.as_ptr(), e.as_ptr(), m, nsplit.as_mut_ptr(), w.as_mut_ptr(),
                            iblock.as_mut_ptr(), isplit.as_mut_ptr())
    }
}

#[inline]
pub fn dstebz(range: u8, order: u8, n: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64,
              d: &[f64], e: &[f64], m: &mut i32, nsplit: &mut [i32], w: &mut [f64],
              iblock: &mut [i32], isplit: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dstebz(range as c_char, order as c_char, n, vl, vu, il, iu, abstol,
                            d.as_ptr(), e.as_ptr(), m, nsplit.as_mut_ptr(), w.as_mut_ptr(),
                            iblock.as_mut_ptr(), isplit.as_mut_ptr())
    }
}

#[inline]
pub fn sstedc(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
              z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstedc(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dstedc(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
              z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstedc(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn cstedc(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
              z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstedc(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zstedc(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
              z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstedc(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn sstegr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32], e: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
              z: &mut [f32], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sstegr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn dstegr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64], e: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
              z: &mut [f64], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dstegr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn cstegr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32], e: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
              z: &mut [c32], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cstegr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn zstegr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64], e: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
              z: &mut [c64], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zstegr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn sstein(matrix_layout: Layout, n: i32, d: &[f32], e: &[f32], m: i32, w: &[f32],
              iblock: &[i32], isplit: &[i32], z: &mut [f32], ldz: i32, ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstein(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                            iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr(), ldz, ifailv)
    }
}

#[inline]
pub fn dstein(matrix_layout: Layout, n: i32, d: &[f64], e: &[f64], m: i32, w: &[f64],
              iblock: &[i32], isplit: &[i32], z: &mut [f64], ldz: i32, ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstein(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                            iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr(), ldz, ifailv)
    }
}

#[inline]
pub fn cstein(matrix_layout: Layout, n: i32, d: &[f32], e: &[f32], m: i32, w: &[f32],
              iblock: &[i32], isplit: &[i32], z: &mut [c32], ldz: i32, ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstein(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                            iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr() as *mut _, ldz,
                            ifailv)
    }
}

#[inline]
pub fn zstein(matrix_layout: Layout, n: i32, d: &[f64], e: &[f64], m: i32, w: &[f64],
              iblock: &[i32], isplit: &[i32], z: &mut [c64], ldz: i32, ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstein(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                            iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr() as *mut _, ldz,
                            ifailv)
    }
}

#[inline]
pub fn sstemr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32], e: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, m: &mut i32, w: &mut [f32], z: &mut [f32],
              ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstemr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, nzc, isuppz.as_mut_ptr(), tryrac)
    }
}

#[inline]
pub fn dstemr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64], e: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, m: &mut i32, w: &mut [f64], z: &mut [f64],
              ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstemr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, nzc, isuppz.as_mut_ptr(), tryrac)
    }
}

#[inline]
pub fn cstemr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32], e: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, m: &mut i32, w: &mut [f32], z: &mut [c32],
              ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstemr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz, nzc, isuppz.as_mut_ptr(), tryrac)
    }
}

#[inline]
pub fn zstemr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64], e: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, m: &mut i32, w: &mut [f64], z: &mut [c64],
              ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstemr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                            z.as_mut_ptr() as *mut _, ldz, nzc, isuppz.as_mut_ptr(), tryrac)
    }
}

#[inline]
pub fn ssteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
              z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dsteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
              z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn csteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
              z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zsteqr(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
              z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsteqr(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn ssterf(n: i32, d: &mut [f32], e: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_ssterf(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn dsterf(n: i32, d: &mut [f64], e: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dsterf(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn sstev(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f32], e: &mut [f32], z: &mut [f32],
             ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstev(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(), e.as_mut_ptr(),
                           z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dstev(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f64], e: &mut [f64], z: &mut [f64],
             ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstev(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(), e.as_mut_ptr(),
                           z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn sstevd(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f32], e: &mut [f32], z: &mut [f32],
              ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstevd(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dstevd(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f64], e: &mut [f64], z: &mut [f64],
              ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstevd(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(),
                            e.as_mut_ptr(), z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn sstevr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32], e: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
              z: &mut [f32], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sstevr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn dstevr(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64], e: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
              z: &mut [f64], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dstevr(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn sstevx(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32], e: &mut [f32],
              vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
              z: &mut [f32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstevx(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dstevx(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64], e: &mut [f64],
              vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
              z: &mut [f64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstevx(matrix_layout.into(), jobz as c_char, range as c_char, n,
                            d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                            w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn ssycon(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32, ipiv: &[i32],
              anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssycon(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn dsycon(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32, ipiv: &[i32],
              anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dsycon(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn csycon(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, ipiv: &[i32],
              anorm: f32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_csycon(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn zsycon(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, ipiv: &[i32],
              anorm: f64, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_zsycon(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            ipiv.as_ptr(), anorm, rcond)
    }
}

#[inline]
pub fn ssyequb(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32, s: &mut [f32],
               scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyequb(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                             s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dsyequb(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32, s: &mut [f64],
               scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyequb(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                             s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn csyequb(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, s: &mut [f32],
               scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyequb(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                             s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zsyequb(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, s: &mut [f64],
               scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyequb(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                             s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn ssyev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f32], lda: i32,
             w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyev(matrix_layout.into(), jobz as c_char, uplo as c_char, n, a.as_mut_ptr(),
                           lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn dsyev(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f64], lda: i32,
             w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyev(matrix_layout.into(), jobz as c_char, uplo as c_char, n, a.as_mut_ptr(),
                           lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn ssyevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f32], lda: i32,
              w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr(), lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn dsyevd(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f64], lda: i32,
              w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyevd(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr(), lda, w.as_mut_ptr())
    }
}

#[inline]
pub fn ssyevr(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f32],
              lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
              w: &mut [f32], z: &mut [f32], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyevr(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn dsyevr(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f64],
              lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
              w: &mut [f64], z: &mut [f64], ldz: i32, isuppz: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyevr(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, isuppz.as_mut_ptr())
    }
}

#[inline]
pub fn ssyevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f32],
              lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
              w: &mut [f32], z: &mut [f32], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dsyevx(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f64],
              lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
              w: &mut [f64], z: &mut [f64], ldz: i32, ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyevx(matrix_layout.into(), jobz as c_char, range as c_char, uplo as c_char,
                            n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                            z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn ssygst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [f32], lda: i32,
              b: &[f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygst(matrix_layout.into(), itype, uplo as c_char, n, a.as_mut_ptr(), lda,
                            b.as_ptr(), ldb)
    }
}

#[inline]
pub fn dsygst(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [f64], lda: i32,
              b: &[f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygst(matrix_layout.into(), itype, uplo as c_char, n, a.as_mut_ptr(), lda,
                            b.as_ptr(), ldb)
    }
}

#[inline]
pub fn ssygv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f32],
             lda: i32, b: &mut [f32], ldb: i32, w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr())
    }
}

#[inline]
pub fn dsygv(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f64],
             lda: i32, b: &mut [f64], ldb: i32, w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygv(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                           a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr())
    }
}

#[inline]
pub fn ssygvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f32],
              lda: i32, b: &mut [f32], ldb: i32, w: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr())
    }
}

#[inline]
pub fn dsygvd(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f64],
              lda: i32, b: &mut [f64], ldb: i32, w: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygvd(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr())
    }
}

#[inline]
pub fn ssygvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, vl: f32, vu: f32, il: i32, iu: i32,
              abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [f32], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, vl, vu,
                            il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn dsygvx(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, vl: f64, vu: f64, il: i32, iu: i32,
              abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [f64], ldz: i32,
              ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygvx(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                            uplo as c_char, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, vl, vu,
                            il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz, ifail)
    }
}

#[inline]
pub fn ssyrfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32, af: &[f32],
              ldaf: i32, ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyrfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dsyrfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32, af: &[f64],
              ldaf: i32, ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyrfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn csyrfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32, af: &[c32],
              ldaf: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
              ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyrfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, ipiv.as_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn zsyrfs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32, af: &[c64],
              ldaf: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
              ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyrfs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, af.as_ptr() as *const _, ldaf, ipiv.as_ptr(),
                            b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ssyrfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
               af: &[f32], ldaf: i32, ipiv: &[i32], s: &[f32], b: &[f32], ldb: i32, x: &mut [f32],
               ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyrfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), s.as_ptr(),
                             b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(),
                             n_err_bnds, err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(),
                             nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn dsyrfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
               af: &[f64], ldaf: i32, ipiv: &[i32], s: &[f64], b: &[f64], ldb: i32, x: &mut [f64],
               ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyrfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), s.as_ptr(),
                             b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(),
                             n_err_bnds, err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(),
                             nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn csyrfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
               af: &[c32], ldaf: i32, ipiv: &[i32], s: &[f32], b: &[c32], ldb: i32, x: &mut [c32],
               ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
               err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
               params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyrfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn zsyrfsx(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
               af: &[c64], ldaf: i32, ipiv: &[i32], s: &[f64], b: &[c64], ldb: i32, x: &mut [c64],
               ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
               err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
               params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyrfsx(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                             a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                             ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                             x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn ssysv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
             ipiv: &mut [i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                           ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsysv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
             ipiv: &mut [i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                           ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csysv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
             ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csysv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr() as *mut _,
                           lda, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsysv(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
             ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysv(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr() as *mut _,
                           lda, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ssysvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
              af: &mut [f32], ldaf: i32, ipiv: &mut [i32], b: &[f32], ldb: i32, x: &mut [f32],
              ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(), b.as_ptr(),
                            ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dsysvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
              af: &mut [f64], ldaf: i32, ipiv: &mut [i32], b: &[f64], ldb: i32, x: &mut [f64],
              ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(), b.as_ptr(),
                            ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn csysvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
              af: &mut [c32], ldaf: i32, ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32],
              ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csysvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn zsysvx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
              af: &mut [c64], ldaf: i32, ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64],
              ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysvx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                            a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                            ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                            x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                            berr.as_mut_ptr())
    }
}

#[inline]
pub fn ssysvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f32],
               lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               s: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32,
               rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                             equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                             x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(),
                             n_err_bnds, err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(),
                             nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn dsysvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f64],
               lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               s: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64,
               rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                             equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                             x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(),
                             n_err_bnds, err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(),
                             nparams, params.as_mut_ptr())
    }
}

#[inline]
pub fn csysvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
               lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               s: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
               rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
               err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csysvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                             b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn zsysvxx(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
               lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
               s: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
               rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
               err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysvxx(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                             a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                             ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                             b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                             rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                             err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                             params.as_mut_ptr())
    }
}

#[inline]
pub fn ssytrd(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, d: &mut [f32],
              e: &mut [f32], tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrd(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr())
    }
}

#[inline]
pub fn dsytrd(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, d: &mut [f64],
              e: &mut [f64], tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrd(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr())
    }
}

#[inline]
pub fn ssytrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dsytrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn csytrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zsytrf(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrf(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn ssytri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
              ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn dsytri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
              ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn csytri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csytri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn zsytri(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytri(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            ipiv.as_ptr())
    }
}

#[inline]
pub fn ssytrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
              ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsytrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
              ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                            ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csytrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
              ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsytrs(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
              ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrs(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                            lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stbcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32, ab: &[f32],
              ldab: i32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_stbcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, kd, ab.as_ptr(), ldab, rcond)
    }
}

#[inline]
pub fn dtbcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32, ab: &[f64],
              ldab: i32, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dtbcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, kd, ab.as_ptr(), ldab, rcond)
    }
}

#[inline]
pub fn ctbcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32, ab: &[c32],
              ldab: i32, rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctbcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, kd, ab.as_ptr() as *const _, ldab, rcond)
    }
}

#[inline]
pub fn ztbcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32, ab: &[c64],
              ldab: i32, rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_ztbcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, kd, ab.as_ptr() as *const _, ldab, rcond)
    }
}

#[inline]
pub fn stbrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[f32], ldab: i32, b: &[f32], ldb: i32, x: &[f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stbrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr(), ldab, b.as_ptr(), ldb, x.as_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dtbrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[f64], ldab: i32, b: &[f64], ldb: i32, x: &[f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtbrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr(), ldab, b.as_ptr(), ldb, x.as_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ctbrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[c32], ldab: i32, b: &[c32], ldb: i32, x: &[c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctbrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr() as *const _, ldab, b.as_ptr() as *const _,
                            ldb, x.as_ptr() as *const _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ztbrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[c64], ldab: i32, b: &[c64], ldb: i32, x: &[c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztbrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr() as *const _, ldab, b.as_ptr() as *const _,
                            ldb, x.as_ptr() as *const _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn stbtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[f32], ldab: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stbtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr(), ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtbtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[f64], ldab: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtbtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr(), ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctbtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[c32], ldab: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctbtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr() as *const _, ldab, b.as_mut_ptr() as *mut _,
                            ldb)
    }
}

#[inline]
pub fn ztbtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32, nrhs: i32,
              ab: &[c64], ldab: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztbtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, kd, nrhs, ab.as_ptr() as *const _, ldab, b.as_mut_ptr() as *mut _,
                            ldb)
    }
}

#[inline]
pub fn stfsm(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: i32,
             n: i32, alpha: f32, a: &[f32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stfsm(matrix_layout.into(), transr as c_char, side as c_char, uplo as c_char,
                           trans as c_char, diag as c_char, m, n, alpha, a.as_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtfsm(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: i32,
             n: i32, alpha: f64, a: &[f64], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtfsm(matrix_layout.into(), transr as c_char, side as c_char, uplo as c_char,
                           trans as c_char, diag as c_char, m, n, alpha, a.as_ptr(),
                           b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctfsm(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: i32,
             n: i32, alpha: c32, a: &[c32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctfsm(matrix_layout.into(), transr as c_char, side as c_char, uplo as c_char,
                           trans as c_char, diag as c_char, m, n, transmute(alpha),
                           a.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztfsm(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: i32,
             n: i32, alpha: c64, a: &[c64], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztfsm(matrix_layout.into(), transr as c_char, side as c_char, uplo as c_char,
                           trans as c_char, diag as c_char, m, n, transmute(alpha),
                           a.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stftri(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
              a: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stftri(matrix_layout.into(), transr as c_char, uplo as c_char, diag as c_char,
                            n, a.as_mut_ptr())
    }
}

#[inline]
pub fn dtftri(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
              a: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtftri(matrix_layout.into(), transr as c_char, uplo as c_char, diag as c_char,
                            n, a.as_mut_ptr())
    }
}

#[inline]
pub fn ctftri(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
              a: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctftri(matrix_layout.into(), transr as c_char, uplo as c_char, diag as c_char,
                            n, a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztftri(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
              a: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztftri(matrix_layout.into(), transr as c_char, uplo as c_char, diag as c_char,
                            n, a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stfttp(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f32],
              ap: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stfttp(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr(), ap.as_mut_ptr())
    }
}

#[inline]
pub fn dtfttp(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f64],
              ap: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtfttp(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr(), ap.as_mut_ptr())
    }
}

#[inline]
pub fn ctfttp(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c32],
              ap: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctfttp(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr() as *const _, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztfttp(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c64],
              ap: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztfttp(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr() as *const _, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stfttr(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f32], a: &mut [f32],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stfttr(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr(), a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dtfttr(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f64], a: &mut [f64],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtfttr(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr(), a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn ctfttr(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c32], a: &mut [c32],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctfttr(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr() as *const _, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ztfttr(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c64], a: &mut [c64],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztfttr(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            arf.as_ptr() as *const _, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn stgevc(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[f32],
              lds: i32, p: &[f32], ldp: i32, vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32,
              mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stgevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_ptr(), n, s.as_ptr(), lds, p.as_ptr(), ldp, vl, ldvl, vr,
                            ldvr, mm, m)
    }
}

#[inline]
pub fn dtgevc(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[f64],
              lds: i32, p: &[f64], ldp: i32, vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32,
              mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_ptr(), n, s.as_ptr(), lds, p.as_ptr(), ldp, vl, ldvl, vr,
                            ldvr, mm, m)
    }
}

#[inline]
pub fn ctgevc(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[c32],
              lds: i32, p: &[c32], ldp: i32, vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32,
              mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_ptr(), n, s.as_ptr() as *const _, lds,
                            p.as_ptr() as *const _, ldp, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, mm, m)
    }
}

#[inline]
pub fn ztgevc(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[c64],
              lds: i32, p: &[c64], ldp: i32, vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32,
              mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_ptr(), n, s.as_ptr() as *const _, lds,
                            p.as_ptr() as *const _, ldp, vl as *mut _ as *mut _, ldvl,
                            vr as *mut _ as *mut _, ldvr, mm, m)
    }
}

#[inline]
pub fn stgexc(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, q: &mut f32, ldq: i32, z: &mut [f32], ldz: i32,
              ifst: &mut [i32], ilst: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgexc(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz, ifst.as_mut_ptr(),
                            ilst.as_mut_ptr())
    }
}

#[inline]
pub fn dtgexc(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, q: &mut f64, ldq: i32, z: &mut [f64], ldz: i32,
              ifst: &mut [i32], ilst: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgexc(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr(), lda,
                            b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz, ifst.as_mut_ptr(),
                            ilst.as_mut_ptr())
    }
}

#[inline]
pub fn ctgexc(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, q: &mut c32, ldq: i32, z: &mut [c32], ldz: i32, ifst: i32,
              ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgexc(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, q as *mut _ as *mut _, ldq,
                            z.as_mut_ptr() as *mut _, ldz, ifst, ilst)
    }
}

#[inline]
pub fn ztgexc(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, q: &mut c64, ldq: i32, z: &mut [c64], ldz: i32, ifst: i32,
              ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgexc(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, q as *mut _ as *mut _, ldq,
                            z.as_mut_ptr() as *mut _, ldz, ifst, ilst)
    }
}

#[inline]
pub fn stgsen(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32], n: i32,
              a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, alphar: &mut f32, alphai: &mut f32,
              beta: &mut f32, q: &mut f32, ldq: i32, z: &mut [f32], ldz: i32, m: &mut i32,
              pl: &mut [f32], pr: &mut [f32], dif: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsen(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, q, ldq,
                            z.as_mut_ptr(), ldz, m, pl.as_mut_ptr(), pr.as_mut_ptr(),
                            dif.as_mut_ptr())
    }
}

#[inline]
pub fn dtgsen(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32], n: i32,
              a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, alphar: &mut f64, alphai: &mut f64,
              beta: &mut f64, q: &mut f64, ldq: i32, z: &mut [f64], ldz: i32, m: &mut i32,
              pl: &mut [f64], pr: &mut [f64], dif: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsen(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                            a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, q, ldq,
                            z.as_mut_ptr(), ldz, m, pl.as_mut_ptr(), pr.as_mut_ptr(),
                            dif.as_mut_ptr())
    }
}

#[inline]
pub fn ctgsen(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32], n: i32,
              a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, alpha: &mut c32, beta: &mut c32,
              q: &mut c32, ldq: i32, z: &mut [c32], ldz: i32, m: &mut i32, pl: &mut [f32],
              pr: &mut [f32], dif: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsen(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz, m,
                            pl.as_mut_ptr(), pr.as_mut_ptr(), dif.as_mut_ptr())
    }
}

#[inline]
pub fn ztgsen(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32], n: i32,
              a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, alpha: &mut c64, beta: &mut c64,
              q: &mut c64, ldq: i32, z: &mut [c64], ldz: i32, m: &mut i32, pl: &mut [f64],
              pr: &mut [f64], dif: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsen(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                            a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                            alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                            q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz, m,
                            pl.as_mut_ptr(), pr.as_mut_ptr(), dif.as_mut_ptr())
    }
}

#[inline]
pub fn stgsja(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32, k: i32,
              l: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, tola: f32, tolb: f32,
              alpha: &mut f32, beta: &mut f32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32,
              q: &mut f32, ldq: i32, ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsja(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, k, l, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, tola, tolb,
                            alpha, beta, u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq,
                            ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn dtgsja(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32, k: i32,
              l: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, tola: f64, tolb: f64,
              alpha: &mut f64, beta: &mut f64, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32,
              q: &mut f64, ldq: i32, ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsja(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, k, l, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, tola, tolb,
                            alpha, beta, u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q, ldq,
                            ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn ctgsja(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32, k: i32,
              l: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, tola: f32, tolb: f32,
              alpha: &mut f32, beta: &mut f32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32,
              q: &mut c32, ldq: i32, ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsja(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, k, l, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _,
                            ldb, tola, tolb, alpha, beta, u.as_mut_ptr() as *mut _, ldu,
                            v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq,
                            ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn ztgsja(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32, k: i32,
              l: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, tola: f64, tolb: f64,
              alpha: &mut f64, beta: &mut f64, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32,
              q: &mut c64, ldq: i32, ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsja(matrix_layout.into(), jobu as c_char, jobv as c_char, jobq as c_char,
                            m, p, n, k, l, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _,
                            ldb, tola, tolb, alpha, beta, u.as_mut_ptr() as *mut _, ldu,
                            v.as_mut_ptr() as *mut _, ldv, q as *mut _ as *mut _, ldq,
                            ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn stgsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[f32],
              lda: i32, b: &[f32], ldb: i32, vl: &[f32], ldvl: i32, vr: &[f32], ldvr: i32,
              s: &mut [f32], dif: &mut [f32], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, a.as_ptr(), lda, b.as_ptr(), ldb, vl.as_ptr(), ldvl, vr.as_ptr(),
                            ldvr, s.as_mut_ptr(), dif.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn dtgsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[f64],
              lda: i32, b: &[f64], ldb: i32, vl: &[f64], ldvl: i32, vr: &[f64], ldvr: i32,
              s: &mut [f64], dif: &mut [f64], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, a.as_ptr(), lda, b.as_ptr(), ldb, vl.as_ptr(), ldvl, vr.as_ptr(),
                            ldvr, s.as_mut_ptr(), dif.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn ctgsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[c32],
              lda: i32, b: &[c32], ldb: i32, vl: &[c32], ldvl: i32, vr: &[c32], ldvr: i32,
              s: &mut [f32], dif: &mut [f32], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            vl.as_ptr() as *const _, ldvl, vr.as_ptr() as *const _, ldvr,
                            s.as_mut_ptr(), dif.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn ztgsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[c64],
              lda: i32, b: &[c64], ldb: i32, vl: &[c64], ldvl: i32, vr: &[c64], ldvr: i32,
              s: &mut [f64], dif: &mut [f64], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            vl.as_ptr() as *const _, ldvl, vr.as_ptr() as *const _, ldvr,
                            s.as_mut_ptr(), dif.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn stgsyl(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[f32], lda: i32,
              b: &[f32], ldb: i32, c: &mut [f32], ldc: i32, d: &[f32], ldd: i32, e: &[f32],
              lde: i32, f: &mut [f32], ldf: i32, scale: &mut [f32], dif: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsyl(matrix_layout.into(), trans as c_char, ijob, m, n, a.as_ptr(), lda,
                            b.as_ptr(), ldb, c.as_mut_ptr(), ldc, d.as_ptr(), ldd, e.as_ptr(), lde,
                            f.as_mut_ptr(), ldf, scale.as_mut_ptr(), dif.as_mut_ptr())
    }
}

#[inline]
pub fn dtgsyl(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[f64], lda: i32,
              b: &[f64], ldb: i32, c: &mut [f64], ldc: i32, d: &[f64], ldd: i32, e: &[f64],
              lde: i32, f: &mut [f64], ldf: i32, scale: &mut [f64], dif: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsyl(matrix_layout.into(), trans as c_char, ijob, m, n, a.as_ptr(), lda,
                            b.as_ptr(), ldb, c.as_mut_ptr(), ldc, d.as_ptr(), ldd, e.as_ptr(), lde,
                            f.as_mut_ptr(), ldf, scale.as_mut_ptr(), dif.as_mut_ptr())
    }
}

#[inline]
pub fn ctgsyl(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[c32], lda: i32,
              b: &[c32], ldb: i32, c: &mut [c32], ldc: i32, d: &[c32], ldd: i32, e: &[c32],
              lde: i32, f: &mut [c32], ldf: i32, scale: &mut [f32], dif: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsyl(matrix_layout.into(), trans as c_char, ijob, m, n,
                            a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            c.as_mut_ptr() as *mut _, ldc, d.as_ptr() as *const _, ldd,
                            e.as_ptr() as *const _, lde, f.as_mut_ptr() as *mut _, ldf,
                            scale.as_mut_ptr(), dif.as_mut_ptr())
    }
}

#[inline]
pub fn ztgsyl(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[c64], lda: i32,
              b: &[c64], ldb: i32, c: &mut [c64], ldc: i32, d: &[c64], ldd: i32, e: &[c64],
              lde: i32, f: &mut [c64], ldf: i32, scale: &mut [f64], dif: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsyl(matrix_layout.into(), trans as c_char, ijob, m, n,
                            a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            c.as_mut_ptr() as *mut _, ldc, d.as_ptr() as *const _, ldd,
                            e.as_ptr() as *const _, lde, f.as_mut_ptr() as *mut _, ldf,
                            scale.as_mut_ptr(), dif.as_mut_ptr())
    }
}

#[inline]
pub fn stpcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[f32],
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, ap.as_ptr(), rcond)
    }
}

#[inline]
pub fn dtpcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[f64],
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, ap.as_ptr(), rcond)
    }
}

#[inline]
pub fn ctpcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[c32],
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, ap.as_ptr() as *const _, rcond)
    }
}

#[inline]
pub fn ztpcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[c64],
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, ap.as_ptr() as *const _, rcond)
    }
}

#[inline]
pub fn stprfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[f32],
              b: &[f32], ldb: i32, x: &[f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stprfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr(), b.as_ptr(), ldb, x.as_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dtprfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[f64],
              b: &[f64], ldb: i32, x: &[f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtprfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr(), b.as_ptr(), ldb, x.as_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ctprfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[c32],
              b: &[c32], ldb: i32, x: &[c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctprfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr() as *const _, b.as_ptr() as *const _, ldb,
                            x.as_ptr() as *const _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ztprfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[c64],
              b: &[c64], ldb: i32, x: &[c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztprfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr() as *const _, b.as_ptr() as *const _, ldb,
                            x.as_ptr() as *const _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn stptri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_stptri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            ap.as_mut_ptr())
    }
}

#[inline]
pub fn dtptri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dtptri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            ap.as_mut_ptr())
    }
}

#[inline]
pub fn ctptri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_ctptri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztptri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_ztptri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stptrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[f32],
              b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stptrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtptrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[f64],
              b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtptrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctptrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[c32],
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctptrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztptrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, ap: &[c64],
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztptrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, ap.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stpttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[f32],
              arf: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stpttf(matrix_layout.into(), transr as c_char, uplo as c_char, n, ap.as_ptr(),
                            arf.as_mut_ptr())
    }
}

#[inline]
pub fn dtpttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[f64],
              arf: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpttf(matrix_layout.into(), transr as c_char, uplo as c_char, n, ap.as_ptr(),
                            arf.as_mut_ptr())
    }
}

#[inline]
pub fn ctpttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[c32],
              arf: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpttf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            ap.as_ptr() as *const _, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztpttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[c64],
              arf: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpttf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            ap.as_ptr() as *const _, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stpttr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], a: &mut [f32],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpttr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), a.as_mut_ptr(),
                            lda)
    }
}

#[inline]
pub fn dtpttr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], a: &mut [f64],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpttr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), a.as_mut_ptr(),
                            lda)
    }
}

#[inline]
pub fn ctpttr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], a: &mut [c32],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpttr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ztpttr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], a: &mut [c64],
              lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpttr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn strcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[f32], lda: i32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_strcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, a.as_ptr(), lda, rcond)
    }
}

#[inline]
pub fn dtrcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[f64], lda: i32,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, a.as_ptr(), lda, rcond)
    }
}

#[inline]
pub fn ctrcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[c32], lda: i32,
              rcond: &mut f32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, a.as_ptr() as *const _, lda, rcond)
    }
}

#[inline]
pub fn ztrcon(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[c64], lda: i32,
              rcond: &mut f64) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrcon(matrix_layout.into(), norm as c_char, uplo as c_char, diag as c_char,
                            n, a.as_ptr() as *const _, lda, rcond)
    }
}

#[inline]
pub fn strevc(matrix_layout: Layout, side: u8, howmny: u8, select: &mut [i32], n: i32, t: &[f32],
              ldt: i32, vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32, mm: i32,
              m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_strevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_mut_ptr(), n, t.as_ptr(), ldt, vl, ldvl, vr, ldvr, mm, m)
    }
}

#[inline]
pub fn dtrevc(matrix_layout: Layout, side: u8, howmny: u8, select: &mut [i32], n: i32, t: &[f64],
              ldt: i32, vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32, mm: i32,
              m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_mut_ptr(), n, t.as_ptr(), ldt, vl, ldvl, vr, ldvr, mm, m)
    }
}

#[inline]
pub fn ctrevc(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, t: &mut [c32],
              ldt: i32, vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32, mm: i32,
              m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_ptr(), n, t.as_mut_ptr() as *mut _, ldt,
                            vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr, mm, m)
    }
}

#[inline]
pub fn ztrevc(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, t: &mut [c64],
              ldt: i32, vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32, mm: i32,
              m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrevc(matrix_layout.into(), side as c_char, howmny as c_char,
                            select.as_ptr(), n, t.as_mut_ptr() as *mut _, ldt,
                            vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr, mm, m)
    }
}

#[inline]
pub fn strexc(matrix_layout: Layout, compq: u8, n: i32, t: &mut [f32], ldt: i32, q: &mut f32,
              ldq: i32, ifst: &mut [i32], ilst: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strexc(matrix_layout.into(), compq as c_char, n, t.as_mut_ptr(), ldt, q, ldq,
                            ifst.as_mut_ptr(), ilst.as_mut_ptr())
    }
}

#[inline]
pub fn dtrexc(matrix_layout: Layout, compq: u8, n: i32, t: &mut [f64], ldt: i32, q: &mut f64,
              ldq: i32, ifst: &mut [i32], ilst: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrexc(matrix_layout.into(), compq as c_char, n, t.as_mut_ptr(), ldt, q, ldq,
                            ifst.as_mut_ptr(), ilst.as_mut_ptr())
    }
}

#[inline]
pub fn ctrexc(matrix_layout: Layout, compq: u8, n: i32, t: &mut [c32], ldt: i32, q: &mut c32,
              ldq: i32, ifst: i32, ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrexc(matrix_layout.into(), compq as c_char, n, t.as_mut_ptr() as *mut _,
                            ldt, q as *mut _ as *mut _, ldq, ifst, ilst)
    }
}

#[inline]
pub fn ztrexc(matrix_layout: Layout, compq: u8, n: i32, t: &mut [c64], ldt: i32, q: &mut c64,
              ldq: i32, ifst: i32, ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrexc(matrix_layout.into(), compq as c_char, n, t.as_mut_ptr() as *mut _,
                            ldt, q as *mut _ as *mut _, ldq, ifst, ilst)
    }
}

#[inline]
pub fn strrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[f32],
              lda: i32, b: &[f32], ldb: i32, x: &[f32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr(), lda, b.as_ptr(), ldb, x.as_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn dtrrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[f64],
              lda: i32, b: &[f64], ldb: i32, x: &[f64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr(), lda, b.as_ptr(), ldb, x.as_ptr(), ldx,
                            ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ctrrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[c32],
              lda: i32, b: &[c32], ldb: i32, x: &[c32], ldx: i32, ferr: &mut [f32],
              berr: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            x.as_ptr() as *const _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn ztrrfs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[c64],
              lda: i32, b: &[c64], ldb: i32, x: &[c64], ldx: i32, ferr: &mut [f64],
              berr: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrrfs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            x.as_ptr() as *const _, ldx, ferr.as_mut_ptr(), berr.as_mut_ptr())
    }
}

#[inline]
pub fn strsen(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32, t: &mut [f32],
              ldt: i32, q: &mut f32, ldq: i32, wr: &mut [f32], wi: &mut [f32], m: &mut i32,
              s: &mut [f32], sep: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strsen(matrix_layout.into(), job as c_char, compq as c_char, select.as_ptr(),
                            n, t.as_mut_ptr(), ldt, q, ldq, wr.as_mut_ptr(), wi.as_mut_ptr(), m,
                            s.as_mut_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn dtrsen(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32, t: &mut [f64],
              ldt: i32, q: &mut f64, ldq: i32, wr: &mut [f64], wi: &mut [f64], m: &mut i32,
              s: &mut [f64], sep: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrsen(matrix_layout.into(), job as c_char, compq as c_char, select.as_ptr(),
                            n, t.as_mut_ptr(), ldt, q, ldq, wr.as_mut_ptr(), wi.as_mut_ptr(), m,
                            s.as_mut_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn ctrsen(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32, t: &mut [c32],
              ldt: i32, q: &mut c32, ldq: i32, w: &mut [c32], m: &mut i32, s: &mut [f32],
              sep: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrsen(matrix_layout.into(), job as c_char, compq as c_char, select.as_ptr(),
                            n, t.as_mut_ptr() as *mut _, ldt, q as *mut _ as *mut _, ldq,
                            w.as_mut_ptr() as *mut _, m, s.as_mut_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn ztrsen(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32, t: &mut [c64],
              ldt: i32, q: &mut c64, ldq: i32, w: &mut [c64], m: &mut i32, s: &mut [f64],
              sep: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrsen(matrix_layout.into(), job as c_char, compq as c_char, select.as_ptr(),
                            n, t.as_mut_ptr() as *mut _, ldt, q as *mut _ as *mut _, ldq,
                            w.as_mut_ptr() as *mut _, m, s.as_mut_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn strsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[f32],
              ldt: i32, vl: &[f32], ldvl: i32, vr: &[f32], ldvr: i32, s: &mut [f32],
              sep: &mut [f32], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_strsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, t.as_ptr(), ldt, vl.as_ptr(), ldvl, vr.as_ptr(), ldvr,
                            s.as_mut_ptr(), sep.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn dtrsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[f64],
              ldt: i32, vl: &[f64], ldvl: i32, vr: &[f64], ldvr: i32, s: &mut [f64],
              sep: &mut [f64], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, t.as_ptr(), ldt, vl.as_ptr(), ldvl, vr.as_ptr(), ldvr,
                            s.as_mut_ptr(), sep.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn ctrsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[c32],
              ldt: i32, vl: &[c32], ldvl: i32, vr: &[c32], ldvr: i32, s: &mut [f32],
              sep: &mut [f32], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, t.as_ptr() as *const _, ldt, vl.as_ptr() as *const _, ldvl,
                            vr.as_ptr() as *const _, ldvr, s.as_mut_ptr(), sep.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn ztrsna(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[c64],
              ldt: i32, vl: &[c64], ldvl: i32, vr: &[c64], ldvr: i32, s: &mut [f64],
              sep: &mut [f64], mm: i32, m: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrsna(matrix_layout.into(), job as c_char, howmny as c_char, select.as_ptr(),
                            n, t.as_ptr() as *const _, ldt, vl.as_ptr() as *const _, ldvl,
                            vr.as_ptr() as *const _, ldvr, s.as_mut_ptr(), sep.as_mut_ptr(), mm, m)
    }
}

#[inline]
pub fn strsyl(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32, a: &[f32],
              lda: i32, b: &[f32], ldb: i32, c: &mut [f32], ldc: i32, scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strsyl(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m, n,
                            a.as_ptr(), lda, b.as_ptr(), ldb, c.as_mut_ptr(), ldc,
                            scale.as_mut_ptr())
    }
}

#[inline]
pub fn dtrsyl(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32, a: &[f64],
              lda: i32, b: &[f64], ldb: i32, c: &mut [f64], ldc: i32, scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrsyl(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m, n,
                            a.as_ptr(), lda, b.as_ptr(), ldb, c.as_mut_ptr(), ldc,
                            scale.as_mut_ptr())
    }
}

#[inline]
pub fn ctrsyl(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32, a: &[c32],
              lda: i32, b: &[c32], ldb: i32, c: &mut [c32], ldc: i32, scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrsyl(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m, n,
                            a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            c.as_mut_ptr() as *mut _, ldc, scale.as_mut_ptr())
    }
}

#[inline]
pub fn ztrsyl(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32, a: &[c64],
              lda: i32, b: &[c64], ldb: i32, c: &mut [c64], ldc: i32, scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrsyl(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m, n,
                            a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                            c.as_mut_ptr() as *mut _, ldc, scale.as_mut_ptr())
    }
}

#[inline]
pub fn strtri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_strtri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dtrtri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dtrtri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn ctrtri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_ctrtri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ztrtri(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_ztrtri(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                            a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn strtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[f32],
              lda: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_strtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr(), lda, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtrtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[f64],
              lda: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr(), lda, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctrtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[c32],
              lda: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr() as *const _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztrtrs(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32, a: &[c64],
              lda: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrtrs(matrix_layout.into(), uplo as c_char, trans as c_char, diag as c_char,
                            n, nrhs, a.as_ptr() as *const _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn strttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[f32], lda: i32,
              arf: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strttf(matrix_layout.into(), transr as c_char, uplo as c_char, n, a.as_ptr(),
                            lda, arf.as_mut_ptr())
    }
}

#[inline]
pub fn dtrttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[f64], lda: i32,
              arf: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrttf(matrix_layout.into(), transr as c_char, uplo as c_char, n, a.as_ptr(),
                            lda, arf.as_mut_ptr())
    }
}

#[inline]
pub fn ctrttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[c32], lda: i32,
              arf: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrttf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_ptr() as *const _, lda, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztrttf(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[c64], lda: i32,
              arf: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrttf(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                            a.as_ptr() as *const _, lda, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn strttp(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32,
              ap: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strttp(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                            ap.as_mut_ptr())
    }
}

#[inline]
pub fn dtrttp(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32,
              ap: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrttp(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                            ap.as_mut_ptr())
    }
}

#[inline]
pub fn ctrttp(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32,
              ap: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrttp(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztrttp(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32,
              ap: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrttp(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _, lda,
                            ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stzrzf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
              tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stzrzf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dtzrzf(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
              tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtzrzf(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr())
    }
}

#[inline]
pub fn ctzrzf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
              tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctzrzf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztzrzf(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
              tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztzrzf(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn cungbr(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cungbr(matrix_layout.into(), vect as c_char, m, n, k,
                            a.as_mut_ptr() as *mut _, lda, tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zungbr(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zungbr(matrix_layout.into(), vect as c_char, m, n, k,
                            a.as_mut_ptr() as *mut _, lda, tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cunghr(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cunghr(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zunghr(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zunghr(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cunglq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cunglq(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zunglq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zunglq(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cungql(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cungql(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zungql(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zungql(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cungqr(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cungqr(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zungqr(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zungqr(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cungrq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cungrq(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zungrq(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zungrq(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cungtr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
              tau: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cungtr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn zungtr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
              tau: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zungtr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                            tau.as_ptr() as *const _)
    }
}

#[inline]
pub fn cunmbr(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
              a: &[c32], lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmbr(matrix_layout.into(), vect as c_char, side as c_char, trans as c_char,
                            m, n, k, a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmbr(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
              a: &[c64], lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmbr(matrix_layout.into(), vect as c_char, side as c_char, trans as c_char,
                            m, n, k, a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmhr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
              a: &[c32], lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmhr(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo, ihi,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmhr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
              a: &[c64], lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmhr(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo, ihi,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmlq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
              lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmlq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmlq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
              lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmlq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmql(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
              lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmql(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmql(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
              lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmql(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmqr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
              lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmqr(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmqr(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
              lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmqr(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmrq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
              lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmrq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmrq(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
              lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmrq(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmrz(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
              a: &[c32], lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmrz(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmrz(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
              a: &[c64], lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmrz(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                            a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cunmtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[c32],
              lda: i32, tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zunmtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[c64],
              lda: i32, tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn cupgtr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], tau: &[c32], q: &mut c32,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cupgtr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            tau.as_ptr() as *const _, q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn zupgtr(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], tau: &[c64], q: &mut c64,
              ldq: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zupgtr(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                            tau.as_ptr() as *const _, q as *mut _ as *mut _, ldq)
    }
}

#[inline]
pub fn cupmtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, ap: &[c32],
              tau: &[c32], c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cupmtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, ap.as_ptr() as *const _, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zupmtr(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, ap: &[c64],
              tau: &[c64], c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zupmtr(matrix_layout.into(), side as c_char, uplo as c_char, trans as c_char,
                            m, n, ap.as_ptr() as *const _, tau.as_ptr() as *const _,
                            c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn sbdsdc_work(matrix_layout: Layout, uplo: u8, compq: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32, q: &mut f32,
                   iq: &mut [i32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sbdsdc_work(matrix_layout.into(), uplo as c_char, compq as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), u.as_mut_ptr(), ldu,
                                 vt.as_mut_ptr(), ldvt, q, iq.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dbdsdc_work(matrix_layout: Layout, uplo: u8, compq: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32, q: &mut f64,
                   iq: &mut [i32], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dbdsdc_work(matrix_layout.into(), uplo as c_char, compq as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), u.as_mut_ptr(), ldu,
                                 vt.as_mut_ptr(), ldvt, q, iq.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sbdsvdx_work(matrix_layout: Layout, uplo: u8, jobz: u8, range: u8, n: i32, d: &mut [f32],
                    e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, ns: i32, s: &mut [f32],
                    z: &mut [f32], ldz: i32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sbdsvdx_work(matrix_layout.into(), uplo as c_char, jobz as c_char,
                                  range as c_char, n, d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il,
                                  iu, ns, s.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(),
                                  iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dbdsvdx_work(matrix_layout: Layout, uplo: u8, jobz: u8, range: u8, n: i32, d: &mut [f64],
                    e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, ns: i32, s: &mut [f64],
                    z: &mut [f64], ldz: i32, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dbdsvdx_work(matrix_layout.into(), uplo as c_char, jobz as c_char,
                                  range as c_char, n, d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il,
                                  iu, ns, s.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(),
                                  iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sbdsqr_work(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
                   d: &mut [f32], e: &mut [f32], vt: &mut [f32], ldvt: i32, u: &mut [f32],
                   ldu: i32, c: &mut [f32], ldc: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sbdsqr_work(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr(), ldvt,
                                 u.as_mut_ptr(), ldu, c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn dbdsqr_work(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
                   d: &mut [f64], e: &mut [f64], vt: &mut [f64], ldvt: i32, u: &mut [f64],
                   ldu: i32, c: &mut [f64], ldc: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dbdsqr_work(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr(), ldvt,
                                 u.as_mut_ptr(), ldu, c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn cbdsqr_work(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
                   d: &mut [f32], e: &mut [f32], vt: &mut [c32], ldvt: i32, u: &mut [c32],
                   ldu: i32, c: &mut [c32], ldc: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cbdsqr_work(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr() as *mut _, ldvt,
                                 u.as_mut_ptr() as *mut _, ldu, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn zbdsqr_work(matrix_layout: Layout, uplo: u8, n: i32, ncvt: i32, nru: i32, ncc: i32,
                   d: &mut [f64], e: &mut [f64], vt: &mut [c64], ldvt: i32, u: &mut [c64],
                   ldu: i32, c: &mut [c64], ldc: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zbdsqr_work(matrix_layout.into(), uplo as c_char, n, ncvt, nru, ncc,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vt.as_mut_ptr() as *mut _, ldvt,
                                 u.as_mut_ptr() as *mut _, ldu, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn sdisna_work(job: u8, m: i32, n: i32, d: &[f32], sep: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_sdisna_work(job as c_char, m, n, d.as_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn ddisna_work(job: u8, m: i32, n: i32, d: &[f64], sep: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_ddisna_work(job as c_char, m, n, d.as_ptr(), sep.as_mut_ptr())
    }
}

#[inline]
pub fn sgbbrd_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
                   ab: &mut [f32], ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut f32, ldq: i32,
                   pt: &mut [f32], ldpt: i32, c: &mut [f32], ldc: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbbrd_work(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                                 ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq,
                                 pt.as_mut_ptr(), ldpt, c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn dgbbrd_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
                   ab: &mut [f64], ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut f64, ldq: i32,
                   pt: &mut [f64], ldpt: i32, c: &mut [f64], ldc: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbbrd_work(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                                 ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq,
                                 pt.as_mut_ptr(), ldpt, c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn cgbbrd_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
                   ab: &mut [c32], ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut c32, ldq: i32,
                   pt: &mut [c32], ldpt: i32, c: &mut [c32], ldc: i32, work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbbrd_work(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                                 ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                                 q as *mut _ as *mut _, ldq, pt.as_mut_ptr() as *mut _, ldpt,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgbbrd_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, ncc: i32, kl: i32, ku: i32,
                   ab: &mut [c64], ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut c64, ldq: i32,
                   pt: &mut [c64], ldpt: i32, c: &mut [c64], ldc: i32, work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbbrd_work(matrix_layout.into(), vect as c_char, m, n, ncc, kl, ku,
                                 ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                                 q as *mut _ as *mut _, ldq, pt.as_mut_ptr() as *mut _, ldpt,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgbcon_work(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[f32],
                   ldab: i32, ipiv: &[i32], anorm: f32, rcond: &mut f32, work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbcon_work(matrix_layout.into(), norm as c_char, n, kl, ku, ab.as_ptr(),
                                 ldab, ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgbcon_work(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[f64],
                   ldab: i32, ipiv: &[i32], anorm: f64, rcond: &mut f64, work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbcon_work(matrix_layout.into(), norm as c_char, n, kl, ku, ab.as_ptr(),
                                 ldab, ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgbcon_work(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[c32],
                   ldab: i32, ipiv: &[i32], anorm: f32, rcond: &mut f32, work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbcon_work(matrix_layout.into(), norm as c_char, n, kl, ku,
                                 ab.as_ptr() as *const _, ldab, ipiv.as_ptr(), anorm, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgbcon_work(matrix_layout: Layout, norm: u8, n: i32, kl: i32, ku: i32, ab: &[c64],
                   ldab: i32, ipiv: &[i32], anorm: f64, rcond: &mut f64, work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbcon_work(matrix_layout.into(), norm as c_char, n, kl, ku,
                                 ab.as_ptr() as *const _, ldab, ipiv.as_ptr(), anorm, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgbequ_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f32], ldab: i32,
                   r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                   amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbequ_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab,
                                 r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                 colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgbequ_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f64], ldab: i32,
                   r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                   amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbequ_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab,
                                 r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                 colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgbequ_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c32], ldab: i32,
                   r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                   amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbequ_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _, ldab,
                                 r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                 colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgbequ_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c64], ldab: i32,
                   r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                   amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbequ_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _, ldab,
                                 r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                 colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgbequb_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f32], ldab: i32,
                    r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                    amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbequb_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab,
                                  r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                  colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgbequb_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[f64], ldab: i32,
                    r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                    amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbequb_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr(), ldab,
                                  r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                  colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgbequb_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c32], ldab: i32,
                    r: &mut [f32], c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                    amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbequb_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _,
                                  ldab, r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                  colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgbequb_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &[c64], ldab: i32,
                    r: &mut [f64], c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                    amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbequb_work(matrix_layout.into(), m, n, kl, ku, ab.as_ptr() as *const _,
                                  ldab, r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                  colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgbrfs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[f32], ldab: i32, afb: &[f32], ldafb: i32, ipiv: &[i32], b: &[f32],
                   ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbrfs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr(), ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(), b.as_ptr(),
                                 ldb, x.as_mut_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgbrfs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[f64], ldab: i32, afb: &[f64], ldafb: i32, ipiv: &[i32], b: &[f64],
                   ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbrfs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr(), ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(), b.as_ptr(),
                                 ldb, x.as_mut_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgbrfs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[c32], ldab: i32, afb: &[c32], ldafb: i32, ipiv: &[i32], b: &[c32],
                   ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbrfs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgbrfs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[c64], ldab: i32, afb: &[c64], ldafb: i32, ipiv: &[i32], b: &[c64],
                   ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbrfs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgbrfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &[f32], ldab: i32, afb: &[f32], ldafb: i32, ipiv: &[i32],
                    r: &[f32], c: &[f32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
                    rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
                    err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32], work: &mut [f32],
                    iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbrfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, kl,
                                  ku, nrhs, ab.as_ptr(), ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(),
                                  r.as_ptr(), c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                  rcond, berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgbrfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &[f64], ldab: i32, afb: &[f64], ldafb: i32, ipiv: &[i32],
                    r: &[f64], c: &[f64], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
                    rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
                    err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64], work: &mut [f64],
                    iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbrfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, kl,
                                  ku, nrhs, ab.as_ptr(), ldab, afb.as_ptr(), ldafb, ipiv.as_ptr(),
                                  r.as_ptr(), c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                  rcond, berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgbrfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &[c32], ldab: i32, afb: &[c32], ldafb: i32, ipiv: &[i32],
                    r: &[f32], c: &[f32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                    rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
                    err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32], work: &mut [c32],
                    rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbrfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, kl,
                                  ku, nrhs, ab.as_ptr() as *const _, ldab,
                                  afb.as_ptr() as *const _, ldafb, ipiv.as_ptr(), r.as_ptr(),
                                  c.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgbrfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &[c64], ldab: i32, afb: &[c64], ldafb: i32, ipiv: &[i32],
                    r: &[f64], c: &[f64], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                    rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
                    err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64], work: &mut [c64],
                    rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbrfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, kl,
                                  ku, nrhs, ab.as_ptr() as *const _, ldab,
                                  afb.as_ptr() as *const _, ldafb, ipiv.as_ptr(), r.as_ptr(),
                                  c.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgbsv_work(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [f32],
                  ldab: i32, ipiv: &mut [i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbsv_work(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr(), ldab,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgbsv_work(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [f64],
                  ldab: i32, ipiv: &mut [i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbsv_work(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr(), ldab,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgbsv_work(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [c32],
                  ldab: i32, ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbsv_work(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr() as *mut _,
                                ldab, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgbsv_work(matrix_layout: Layout, n: i32, kl: i32, ku: i32, nrhs: i32, ab: &mut [c64],
                  ldab: i32, ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbsv_work(matrix_layout.into(), n, kl, ku, nrhs, ab.as_mut_ptr() as *mut _,
                                ldab, ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgbsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &mut [f32], ldab: i32, afb: &mut [f32], ldafb: i32, ipiv: &mut [i32],
                   equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [f32], ldb: i32,
                   x: &mut [f32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                 nrhs, ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                                 ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                 c.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgbsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &mut [f64], ldab: i32, afb: &mut [f64], ldafb: i32, ipiv: &mut [i32],
                   equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [f64], ldb: i32,
                   x: &mut [f64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                 nrhs, ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                                 ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                 c.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgbsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &mut [c32], ldab: i32, afb: &mut [c32], ldafb: i32, ipiv: &mut [i32],
                   equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [c32], ldb: i32,
                   x: &mut [c32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                 nrhs, ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _,
                                 ldafb, ipiv.as_mut_ptr(), equed as *mut _ as *mut _,
                                 r.as_mut_ptr(), c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgbsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &mut [c64], ldab: i32, afb: &mut [c64], ldafb: i32, ipiv: &mut [i32],
                   equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [c64], ldb: i32,
                   x: &mut [c64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                 nrhs, ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _,
                                 ldafb, ipiv.as_mut_ptr(), equed as *mut _ as *mut _,
                                 r.as_mut_ptr(), c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgbsvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &mut [f32], ldab: i32, afb: &mut [f32], ldafb: i32,
                    ipiv: &mut [i32], equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [f32],
                    ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32, rpvgrw: &mut [f32],
                    berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
                    err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32], work: &mut [f32],
                    iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbsvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                  nrhs, ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                  c.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                  rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgbsvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &mut [f64], ldab: i32, afb: &mut [f64], ldafb: i32,
                    ipiv: &mut [i32], equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [f64],
                    ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64, rpvgrw: &mut [f64],
                    berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
                    err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64], work: &mut [f64],
                    iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbsvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                  nrhs, ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                  c.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                  rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgbsvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &mut [c32], ldab: i32, afb: &mut [c32], ldafb: i32,
                    ipiv: &mut [i32], equed: &mut u8, r: &mut [f32], c: &mut [f32], b: &mut [c32],
                    ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32, rpvgrw: &mut [f32],
                    berr: &mut [f32], n_err_bnds: i32, err_bnds_norm: &mut [f32],
                    err_bnds_comp: &mut [f32], nparams: i32, params: &mut [f32], work: &mut [c32],
                    rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbsvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                  nrhs, ab.as_mut_ptr() as *mut _, ldab,
                                  afb.as_mut_ptr() as *mut _, ldafb, ipiv.as_mut_ptr(),
                                  equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgbsvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, kl: i32, ku: i32,
                    nrhs: i32, ab: &mut [c64], ldab: i32, afb: &mut [c64], ldafb: i32,
                    ipiv: &mut [i32], equed: &mut u8, r: &mut [f64], c: &mut [f64], b: &mut [c64],
                    ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64, rpvgrw: &mut [f64],
                    berr: &mut [f64], n_err_bnds: i32, err_bnds_norm: &mut [f64],
                    err_bnds_comp: &mut [f64], nparams: i32, params: &mut [f64], work: &mut [c64],
                    rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbsvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, kl, ku,
                                  nrhs, ab.as_mut_ptr() as *mut _, ldab,
                                  afb.as_mut_ptr() as *mut _, ldafb, ipiv.as_mut_ptr(),
                                  equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgbtrf_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [f32],
                   ldab: i32, ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbtrf_work(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr(), ldab,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgbtrf_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [f64],
                   ldab: i32, ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbtrf_work(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr(), ldab,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgbtrf_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [c32],
                   ldab: i32, ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbtrf_work(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr() as *mut _,
                                 ldab, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgbtrf_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, ab: &mut [c64],
                   ldab: i32, ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbtrf_work(matrix_layout.into(), m, n, kl, ku, ab.as_mut_ptr() as *mut _,
                                 ldab, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgbtrs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[f32], ldab: i32, ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgbtrs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr(), ldab, ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgbtrs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[f64], ldab: i32, ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgbtrs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr(), ldab, ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgbtrs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[c32], ldab: i32, ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgbtrs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr() as *const _, ldab, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgbtrs_work(matrix_layout: Layout, trans: u8, n: i32, kl: i32, ku: i32, nrhs: i32,
                   ab: &[c64], ldab: i32, ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgbtrs_work(matrix_layout.into(), trans as c_char, n, kl, ku, nrhs,
                                 ab.as_ptr() as *const _, ldab, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgebak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   scale: &[f32], m: i32, v: &mut [f32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgebak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 scale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn dgebak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   scale: &[f64], m: i32, v: &mut [f64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgebak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 scale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn cgebak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   scale: &[f32], m: i32, v: &mut [c32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgebak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 scale.as_ptr(), m, v.as_mut_ptr() as *mut _, ldv)
    }
}

#[inline]
pub fn zgebak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   scale: &[f64], m: i32, v: &mut [c64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgebak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 scale.as_ptr(), m, v.as_mut_ptr() as *mut _, ldv)
    }
}

#[inline]
pub fn sgebal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [f32], lda: i32, ilo: &mut i32,
                   ihi: &mut i32, scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgebal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda, ilo,
                                 ihi, scale.as_mut_ptr())
    }
}

#[inline]
pub fn dgebal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [f64], lda: i32, ilo: &mut i32,
                   ihi: &mut i32, scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgebal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda, ilo,
                                 ihi, scale.as_mut_ptr())
    }
}

#[inline]
pub fn cgebal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [c32], lda: i32, ilo: &mut i32,
                   ihi: &mut i32, scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgebal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ilo, ihi, scale.as_mut_ptr())
    }
}

#[inline]
pub fn zgebal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [c64], lda: i32, ilo: &mut i32,
                   ihi: &mut i32, scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgebal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ilo, ihi, scale.as_mut_ptr())
    }
}

#[inline]
pub fn sgebrd_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, d: &mut [f32],
                   e: &mut [f32], tauq: &mut [f32], taup: &mut [f32], work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgebrd_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, d.as_mut_ptr(),
                                 e.as_mut_ptr(), tauq.as_mut_ptr(), taup.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgebrd_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, d: &mut [f64],
                   e: &mut [f64], tauq: &mut [f64], taup: &mut [f64], work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgebrd_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, d.as_mut_ptr(),
                                 e.as_mut_ptr(), tauq.as_mut_ptr(), taup.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgebrd_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, d: &mut [f32],
                   e: &mut [f32], tauq: &mut [c32], taup: &mut [c32], work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgebrd_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 d.as_mut_ptr(), e.as_mut_ptr(), tauq.as_mut_ptr() as *mut _,
                                 taup.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgebrd_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, d: &mut [f64],
                   e: &mut [f64], tauq: &mut [c64], taup: &mut [c64], work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgebrd_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 d.as_mut_ptr(), e.as_mut_ptr(), tauq.as_mut_ptr() as *mut _,
                                 taup.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgecon_work(matrix_layout: Layout, norm: u8, n: i32, a: &[f32], lda: i32, anorm: f32,
                   rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgecon_work(matrix_layout.into(), norm as c_char, n, a.as_ptr(), lda, anorm,
                                 rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgecon_work(matrix_layout: Layout, norm: u8, n: i32, a: &[f64], lda: i32, anorm: f64,
                   rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgecon_work(matrix_layout.into(), norm as c_char, n, a.as_ptr(), lda, anorm,
                                 rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgecon_work(matrix_layout: Layout, norm: u8, n: i32, a: &[c32], lda: i32, anorm: f32,
                   rcond: &mut f32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgecon_work(matrix_layout.into(), norm as c_char, n, a.as_ptr() as *const _,
                                 lda, anorm, rcond, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgecon_work(matrix_layout: Layout, norm: u8, n: i32, a: &[c64], lda: i32, anorm: f64,
                   rcond: &mut f64, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgecon_work(matrix_layout.into(), norm as c_char, n, a.as_ptr() as *const _,
                                 lda, anorm, rcond, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeequ_work(matrix_layout: Layout, m: i32, n: i32, a: &[f32], lda: i32, r: &mut [f32],
                   c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                   amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeequ_work(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                                 c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                                 amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgeequ_work(matrix_layout: Layout, m: i32, n: i32, a: &[f64], lda: i32, r: &mut [f64],
                   c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                   amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeequ_work(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                                 c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                                 amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgeequ_work(matrix_layout: Layout, m: i32, n: i32, a: &[c32], lda: i32, r: &mut [f32],
                   c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                   amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeequ_work(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                                 r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                 colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgeequ_work(matrix_layout: Layout, m: i32, n: i32, a: &[c64], lda: i32, r: &mut [f64],
                   c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                   amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeequ_work(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                                 r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                 colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgeequb_work(matrix_layout: Layout, m: i32, n: i32, a: &[f32], lda: i32, r: &mut [f32],
                    c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                    amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeequb_work(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                                  c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                                  amax.as_mut_ptr())
    }
}

#[inline]
pub fn dgeequb_work(matrix_layout: Layout, m: i32, n: i32, a: &[f64], lda: i32, r: &mut [f64],
                    c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                    amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeequb_work(matrix_layout.into(), m, n, a.as_ptr(), lda, r.as_mut_ptr(),
                                  c.as_mut_ptr(), rowcnd.as_mut_ptr(), colcnd.as_mut_ptr(),
                                  amax.as_mut_ptr())
    }
}

#[inline]
pub fn cgeequb_work(matrix_layout: Layout, m: i32, n: i32, a: &[c32], lda: i32, r: &mut [f32],
                    c: &mut [f32], rowcnd: &mut [f32], colcnd: &mut [f32],
                    amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeequb_work(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                                  r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                  colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zgeequb_work(matrix_layout: Layout, m: i32, n: i32, a: &[c64], lda: i32, r: &mut [f64],
                    c: &mut [f64], rowcnd: &mut [f64], colcnd: &mut [f64],
                    amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeequb_work(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                                  r.as_mut_ptr(), c.as_mut_ptr(), rowcnd.as_mut_ptr(),
                                  colcnd.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sgees_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F32, n: i32,
                  a: &mut [f32], lda: i32, sdim: &mut [i32], wr: &mut [f32], wi: &mut [f32],
                  vs: &mut [f32], ldvs: i32, work: &mut [f32], lwork: i32,
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgees_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                transmute(select), n, a.as_mut_ptr(), lda, sdim.as_mut_ptr(),
                                wr.as_mut_ptr(), wi.as_mut_ptr(), vs.as_mut_ptr(), ldvs,
                                work.as_mut_ptr(), lwork, bwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgees_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F64, n: i32,
                  a: &mut [f64], lda: i32, sdim: &mut [i32], wr: &mut [f64], wi: &mut [f64],
                  vs: &mut [f64], ldvs: i32, work: &mut [f64], lwork: i32,
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgees_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                transmute(select), n, a.as_mut_ptr(), lda, sdim.as_mut_ptr(),
                                wr.as_mut_ptr(), wi.as_mut_ptr(), vs.as_mut_ptr(), ldvs,
                                work.as_mut_ptr(), lwork, bwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgees_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C32, n: i32,
                  a: &mut [c32], lda: i32, sdim: &mut [i32], w: &mut [c32], vs: &mut [c32],
                  ldvs: i32, work: &mut [c32], lwork: i32, rwork: &mut [f32],
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgees_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                transmute(select), n, a.as_mut_ptr() as *mut _, lda,
                                sdim.as_mut_ptr(), w.as_mut_ptr() as *mut _,
                                vs.as_mut_ptr() as *mut _, ldvs, work.as_mut_ptr() as *mut _,
                                lwork, rwork.as_mut_ptr(), bwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgees_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C64, n: i32,
                  a: &mut [c64], lda: i32, sdim: &mut [i32], w: &mut [c64], vs: &mut [c64],
                  ldvs: i32, work: &mut [c64], lwork: i32, rwork: &mut [f64],
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgees_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                transmute(select), n, a.as_mut_ptr() as *mut _, lda,
                                sdim.as_mut_ptr(), w.as_mut_ptr() as *mut _,
                                vs.as_mut_ptr() as *mut _, ldvs, work.as_mut_ptr() as *mut _,
                                lwork, rwork.as_mut_ptr(), bwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeesx_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F32, sense: u8,
                   n: i32, a: &mut [f32], lda: i32, sdim: &mut [i32], wr: &mut [f32],
                   wi: &mut [f32], vs: &mut [f32], ldvs: i32, rconde: &mut [f32],
                   rcondv: &mut [f32], work: &mut [f32], lwork: i32, iwork: &mut [i32],
                   liwork: i32, bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeesx_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                 transmute(select), sense as c_char, n, a.as_mut_ptr(), lda,
                                 sdim.as_mut_ptr(), wr.as_mut_ptr(), wi.as_mut_ptr(),
                                 vs.as_mut_ptr(), ldvs, rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork,
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgeesx_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select2F64, sense: u8,
                   n: i32, a: &mut [f64], lda: i32, sdim: &mut [i32], wr: &mut [f64],
                   wi: &mut [f64], vs: &mut [f64], ldvs: i32, rconde: &mut [f64],
                   rcondv: &mut [f64], work: &mut [f64], lwork: i32, iwork: &mut [i32],
                   liwork: i32, bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeesx_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                 transmute(select), sense as c_char, n, a.as_mut_ptr(), lda,
                                 sdim.as_mut_ptr(), wr.as_mut_ptr(), wi.as_mut_ptr(),
                                 vs.as_mut_ptr(), ldvs, rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork,
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgeesx_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C32, sense: u8,
                   n: i32, a: &mut [c32], lda: i32, sdim: &mut [i32], w: &mut [c32],
                   vs: &mut [c32], ldvs: i32, rconde: &mut [f32], rcondv: &mut [f32],
                   work: &mut [c32], lwork: i32, rwork: &mut [f32], bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeesx_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                 transmute(select), sense as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, sdim.as_mut_ptr(), w.as_mut_ptr() as *mut _,
                                 vs.as_mut_ptr() as *mut _, ldvs, rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), bwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgeesx_work(matrix_layout: Layout, jobvs: u8, sort: u8, select: Select1C64, sense: u8,
                   n: i32, a: &mut [c64], lda: i32, sdim: &mut [i32], w: &mut [c64],
                   vs: &mut [c64], ldvs: i32, rconde: &mut [f64], rcondv: &mut [f64],
                   work: &mut [c64], lwork: i32, rwork: &mut [f64], bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeesx_work(matrix_layout.into(), jobvs as c_char, sort as c_char,
                                 transmute(select), sense as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, sdim.as_mut_ptr(), w.as_mut_ptr() as *mut _,
                                 vs.as_mut_ptr() as *mut _, ldvs, rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), bwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f32], lda: i32,
                  wr: &mut [f32], wi: &mut [f32], vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32,
                  work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr(), lda, wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl,
                                vr, ldvr, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgeev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f64], lda: i32,
                  wr: &mut [f64], wi: &mut [f64], vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32,
                  work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr(), lda, wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl,
                                vr, ldvr, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgeev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c32], lda: i32,
                  w: &mut [c32], vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32,
                  work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr() as *mut _,
                                vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr,
                                work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgeev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c64], lda: i32,
                  w: &mut [c64], vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32,
                  work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr() as *mut _,
                                vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr,
                                work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [f32], lda: i32, wr: &mut [f32], wi: &mut [f32], vl: &mut f32,
                   ldvl: i32, vr: &mut f32, ldvr: i32, ilo: &mut i32, ihi: &mut i32,
                   scale: &mut [f32], abnrm: &mut [f32], rconde: &mut [f32], rcondv: &mut [f32],
                   work: &mut [f32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                                 wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl, vr, ldvr, ilo, ihi,
                                 scale.as_mut_ptr(), abnrm.as_mut_ptr(), rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgeevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [f64], lda: i32, wr: &mut [f64], wi: &mut [f64], vl: &mut f64,
                   ldvl: i32, vr: &mut f64, ldvr: i32, ilo: &mut i32, ihi: &mut i32,
                   scale: &mut [f64], abnrm: &mut [f64], rconde: &mut [f64], rcondv: &mut [f64],
                   work: &mut [f64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                                 wr.as_mut_ptr(), wi.as_mut_ptr(), vl, ldvl, vr, ldvr, ilo, ihi,
                                 scale.as_mut_ptr(), abnrm.as_mut_ptr(), rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgeevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [c32], lda: i32, w: &mut [c32], vl: &mut c32, ldvl: i32, vr: &mut c32,
                   ldvr: i32, ilo: &mut i32, ihi: &mut i32, scale: &mut [f32], abnrm: &mut [f32],
                   rconde: &mut [f32], rcondv: &mut [f32], work: &mut [c32], lwork: i32,
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, ilo, ihi, scale.as_mut_ptr(),
                                 abnrm.as_mut_ptr(), rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgeevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [c64], lda: i32, w: &mut [c64], vl: &mut c64, ldvl: i32, vr: &mut c64,
                   ldvr: i32, ilo: &mut i32, ihi: &mut i32, scale: &mut [f64], abnrm: &mut [f64],
                   rconde: &mut [f64], rcondv: &mut [f64], work: &mut [c64], lwork: i32,
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, ilo, ihi, scale.as_mut_ptr(),
                                 abnrm.as_mut_ptr(), rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgehrd_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f32], lda: i32,
                   tau: &mut [f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgehrd_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda,
                                 tau.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgehrd_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f64], lda: i32,
                   tau: &mut [f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgehrd_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda,
                                 tau.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgehrd_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c32], lda: i32,
                   tau: &mut [c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgehrd_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgehrd_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c64], lda: i32,
                   tau: &mut [c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgehrd_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgejsv_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8,
                   jobp: u8, m: i32, n: i32, a: &mut [f32], lda: i32, sva: &mut [f32],
                   u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32, work: &mut [f32], lwork: i32,
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgejsv_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, jobr as c_char, jobt as c_char, jobp as c_char, m,
                                 n, a.as_mut_ptr(), lda, sva.as_mut_ptr(), u.as_mut_ptr(), ldu,
                                 v.as_mut_ptr(), ldv, work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgejsv_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8,
                   jobp: u8, m: i32, n: i32, a: &mut [f64], lda: i32, sva: &mut [f64],
                   u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32, work: &mut [f64], lwork: i32,
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgejsv_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, jobr as c_char, jobt as c_char, jobp as c_char, m,
                                 n, a.as_mut_ptr(), lda, sva.as_mut_ptr(), u.as_mut_ptr(), ldu,
                                 v.as_mut_ptr(), ldv, work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgejsv_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8,
                   jobp: u8, m: i32, n: i32, a: &mut [c32], lda: i32, sva: &mut [f32],
                   u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32, cwork: &mut [c32], lwork: i32,
                   work: &mut [f32], lrwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgejsv_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, jobr as c_char, jobt as c_char, jobp as c_char, m,
                                 n, a.as_mut_ptr() as *mut _, lda, sva.as_mut_ptr(),
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 cwork.as_mut_ptr() as *mut _, lwork, work.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgejsv_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8,
                   jobp: u8, m: i32, n: i32, a: &mut [c64], lda: i32, sva: &mut [f64],
                   u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32, cwork: &mut [c64], lwork: i32,
                   work: &mut [f64], lrwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgejsv_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, jobr as c_char, jobt as c_char, jobp as c_char, m,
                                 n, a.as_mut_ptr() as *mut _, lda, sva.as_mut_ptr(),
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 cwork.as_mut_ptr() as *mut _, lwork, work.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgelq2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelq2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn dgelq2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelq2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn cgelq2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelq2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgelq2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelq2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgelqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelqf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgelqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelqf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgelqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelqf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgelqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelqf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgels_work(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [f32],
                  lda: i32, b: &mut [f32], ldb: i32, work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgels_work(matrix_layout.into(), trans as c_char, m, n, nrhs, a.as_mut_ptr(),
                                lda, b.as_mut_ptr(), ldb, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgels_work(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [f64],
                  lda: i32, b: &mut [f64], ldb: i32, work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgels_work(matrix_layout.into(), trans as c_char, m, n, nrhs, a.as_mut_ptr(),
                                lda, b.as_mut_ptr(), ldb, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgels_work(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [c32],
                  lda: i32, b: &mut [c32], ldb: i32, work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgels_work(matrix_layout.into(), trans as c_char, m, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgels_work(matrix_layout: Layout, trans: u8, m: i32, n: i32, nrhs: i32, a: &mut [c64],
                  lda: i32, b: &mut [c64], ldb: i32, work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgels_work(matrix_layout.into(), trans as c_char, m, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgelsd_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32,
                   work: &mut [f32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelsd_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgelsd_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32,
                   work: &mut [f64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelsd_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgelsd_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelsd_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgelsd_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelsd_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgelss_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32,
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelss_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgelss_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32,
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelss_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgelss_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, s: &mut [f32], rcond: f32, rank: &mut i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelss_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgelss_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, s: &mut [f64], rcond: f64, rank: &mut i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelss_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, s.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgelsy_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, jpvt: &mut [i32], rcond: f32, rank: &mut i32,
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgelsy_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, jpvt.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgelsy_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, jpvt: &mut [i32], rcond: f64, rank: &mut i32,
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgelsy_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, jpvt.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgelsy_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, jpvt: &mut [i32], rcond: f32, rank: &mut i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgelsy_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, jpvt.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgelsy_work(matrix_layout: Layout, m: i32, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, jpvt: &mut [i32], rcond: f64, rank: &mut i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgelsy_work(matrix_layout.into(), m, n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, jpvt.as_mut_ptr(), rcond, rank,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeqlf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqlf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgeqlf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqlf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgeqlf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqlf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgeqlf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqlf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgeqp3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
                   jpvt: &mut [i32], tau: &mut [f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqp3_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgeqp3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
                   jpvt: &mut [i32], tau: &mut [f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqp3_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgeqp3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
                   jpvt: &mut [i32], tau: &mut [c32], work: &mut [c32], lwork: i32,
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqp3_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgeqp3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
                   jpvt: &mut [i32], tau: &mut [c64], work: &mut [c64], lwork: i32,
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqp3_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeqpf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
                   jpvt: &mut [i32], tau: &mut [f32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqpf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqpf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
                   jpvt: &mut [i32], tau: &mut [f64], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqpf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqpf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
                   jpvt: &mut [i32], tau: &mut [c32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqpf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgeqpf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
                   jpvt: &mut [i32], tau: &mut [c64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqpf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 jpvt.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgeqr2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqr2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqr2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqr2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqr2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqr2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqr2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqr2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgeqrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgeqrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgeqrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgeqrfp_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
                    tau: &mut [f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrfp_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                  tau.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgeqrfp_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
                    tau: &mut [f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrfp_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                  tau.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgeqrfp_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
                    tau: &mut [c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrfp_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgeqrfp_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
                    tau: &mut [c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrfp_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgerfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   af: &[f32], ldaf: i32, ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgerfs_work(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                                 af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(),
                                 ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgerfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   af: &[f64], ldaf: i32, ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgerfs_work(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                                 af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(),
                                 ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgerfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   af: &[c32], ldaf: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgerfs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgerfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   af: &[c64], ldaf: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgerfs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgerfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[f32],
                    lda: i32, af: &[f32], ldaf: i32, ipiv: &[i32], r: &[f32], c: &[f32], b: &[f32],
                    ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32, berr: &mut [f32],
                    n_err_bnds: i32, err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32],
                    nparams: i32, params: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgerfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), r.as_ptr(),
                                  c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgerfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[f64],
                    lda: i32, af: &[f64], ldaf: i32, ipiv: &[i32], r: &[f64], c: &[f64], b: &[f64],
                    ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64, berr: &mut [f64],
                    n_err_bnds: i32, err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64],
                    nparams: i32, params: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgerfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), r.as_ptr(),
                                  c.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgerfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[c32],
                    lda: i32, af: &[c32], ldaf: i32, ipiv: &[i32], r: &[f32], c: &[f32], b: &[c32],
                    ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32, berr: &mut [f32],
                    n_err_bnds: i32, err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32],
                    nparams: i32, params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgerfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  ipiv.as_ptr(), r.as_ptr(), c.as_ptr(), b.as_ptr() as *const _,
                                  ldb, x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgerfsx_work(matrix_layout: Layout, trans: u8, equed: u8, n: i32, nrhs: i32, a: &[c64],
                    lda: i32, af: &[c64], ldaf: i32, ipiv: &[i32], r: &[f64], c: &[f64], b: &[c64],
                    ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64, berr: &mut [f64],
                    n_err_bnds: i32, err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64],
                    nparams: i32, params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgerfsx_work(matrix_layout.into(), trans as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  ipiv.as_ptr(), r.as_ptr(), c.as_ptr(), b.as_ptr() as *const _,
                                  ldb, x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgerqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgerqf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgerqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgerqf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgerqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgerqf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgerqf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgerqf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgesdd_work(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [f32], lda: i32,
                   s: &mut [f32], u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32,
                   work: &mut [f32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesdd_work(matrix_layout.into(), jobz as c_char, m, n, a.as_mut_ptr(), lda,
                                 s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgesdd_work(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [f64], lda: i32,
                   s: &mut [f64], u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32,
                   work: &mut [f64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesdd_work(matrix_layout.into(), jobz as c_char, m, n, a.as_mut_ptr(), lda,
                                 s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgesdd_work(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [c32], lda: i32,
                   s: &mut [f32], u: &mut [c32], ldu: i32, vt: &mut [c32], ldvt: i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesdd_work(matrix_layout.into(), jobz as c_char, m, n,
                                 a.as_mut_ptr() as *mut _, lda, s.as_mut_ptr(),
                                 u.as_mut_ptr() as *mut _, ldu, vt.as_mut_ptr() as *mut _, ldvt,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgesdd_work(matrix_layout: Layout, jobz: u8, m: i32, n: i32, a: &mut [c64], lda: i32,
                   s: &mut [f64], u: &mut [c64], ldu: i32, vt: &mut [c64], ldvt: i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesdd_work(matrix_layout.into(), jobz as c_char, m, n,
                                 a.as_mut_ptr() as *mut _, lda, s.as_mut_ptr(),
                                 u.as_mut_ptr() as *mut _, ldu, vt.as_mut_ptr() as *mut _, ldvt,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgesv_work(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                  ipiv: &mut [i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesv_work(matrix_layout.into(), n, nrhs, a.as_mut_ptr(), lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgesv_work(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                  ipiv: &mut [i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesv_work(matrix_layout.into(), n, nrhs, a.as_mut_ptr(), lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgesv_work(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                  ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesv_work(matrix_layout.into(), n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgesv_work(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                  ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesv_work(matrix_layout.into(), n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn dsgesv_work(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                   ipiv: &mut [i32], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32,
                   work: &mut [f64], swork: &mut [f32], iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsgesv_work(matrix_layout.into(), n, nrhs, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 work.as_mut_ptr(), swork.as_mut_ptr(), iter.as_mut_ptr())
    }
}

#[inline]
pub fn zcgesv_work(matrix_layout: Layout, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
                   work: &mut [c64], swork: &mut [c32], rwork: &mut [f64],
                   iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zcgesv_work(matrix_layout.into(), n, nrhs, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, work.as_mut_ptr() as *mut _,
                                 swork.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iter.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvd_work(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [f32],
                   lda: i32, s: &mut [f32], u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32,
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvd_work(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                                 a.as_mut_ptr(), lda, s.as_mut_ptr(), u.as_mut_ptr(), ldu,
                                 vt.as_mut_ptr(), ldvt, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgesvd_work(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [f64],
                   lda: i32, s: &mut [f64], u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32,
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvd_work(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                                 a.as_mut_ptr(), lda, s.as_mut_ptr(), u.as_mut_ptr(), ldu,
                                 vt.as_mut_ptr(), ldvt, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgesvd_work(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [c32],
                   lda: i32, s: &mut [f32], u: &mut [c32], ldu: i32, vt: &mut [c32], ldvt: i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvd_work(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                                 a.as_mut_ptr() as *mut _, lda, s.as_mut_ptr(),
                                 u.as_mut_ptr() as *mut _, ldu, vt.as_mut_ptr() as *mut _, ldvt,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvd_work(matrix_layout: Layout, jobu: u8, jobvt: u8, m: i32, n: i32, a: &mut [c64],
                   lda: i32, s: &mut [f64], u: &mut [c64], ldu: i32, vt: &mut [c64], ldvt: i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvd_work(matrix_layout.into(), jobu as c_char, jobvt as c_char, m, n,
                                 a.as_mut_ptr() as *mut _, lda, s.as_mut_ptr(),
                                 u.as_mut_ptr() as *mut _, ldu, vt.as_mut_ptr() as *mut _, ldvt,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvdx_work(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
                    a: &mut [f32], lda: i32, vl: f32, vu: f32, il: i32, iu: i32, ns: i32,
                    s: &mut [f32], u: &mut [f32], ldu: i32, vt: &mut [f32], ldvt: i32,
                    work: &mut [f32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvdx_work(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                                  range as c_char, m, n, a.as_mut_ptr(), lda, vl, vu, il, iu, ns,
                                  s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt,
                                  work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvdx_work(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
                    a: &mut [f64], lda: i32, vl: f64, vu: f64, il: i32, iu: i32, ns: i32,
                    s: &mut [f64], u: &mut [f64], ldu: i32, vt: &mut [f64], ldvt: i32,
                    work: &mut [f64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvdx_work(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                                  range as c_char, m, n, a.as_mut_ptr(), lda, vl, vu, il, iu, ns,
                                  s.as_mut_ptr(), u.as_mut_ptr(), ldu, vt.as_mut_ptr(), ldvt,
                                  work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvdx_work(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
                    a: &mut [c32], lda: i32, vl: f32, vu: f32, il: i32, iu: i32, ns: i32,
                    s: &mut [f32], u: &mut [c32], ldu: i32, vt: &mut [c32], ldvt: i32,
                    work: &mut [c32], lwork: i32, rwork: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvdx_work(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                                  range as c_char, m, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il,
                                  iu, ns, s.as_mut_ptr(), u.as_mut_ptr() as *mut _, ldu,
                                  vt.as_mut_ptr() as *mut _, ldvt, work.as_mut_ptr() as *mut _,
                                  lwork, rwork.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvdx_work(matrix_layout: Layout, jobu: u8, jobvt: u8, range: u8, m: i32, n: i32,
                    a: &mut [c64], lda: i32, vl: f64, vu: f64, il: i32, iu: i32, ns: i32,
                    s: &mut [f64], u: &mut [c64], ldu: i32, vt: &mut [c64], ldvt: i32,
                    work: &mut [c64], lwork: i32, rwork: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvdx_work(matrix_layout.into(), jobu as c_char, jobvt as c_char,
                                  range as c_char, m, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il,
                                  iu, ns, s.as_mut_ptr(), u.as_mut_ptr() as *mut _, ldu,
                                  vt.as_mut_ptr() as *mut _, ldvt, work.as_mut_ptr() as *mut _,
                                  lwork, rwork.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvj_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32,
                   a: &mut [f32], lda: i32, sva: &mut [f32], mv: i32, v: &mut [f32], ldv: i32,
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvj_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, m, n, a.as_mut_ptr(), lda, sva.as_mut_ptr(), mv,
                                 v.as_mut_ptr(), ldv, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgesvj_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32,
                   a: &mut [f64], lda: i32, sva: &mut [f64], mv: i32, v: &mut [f64], ldv: i32,
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvj_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, m, n, a.as_mut_ptr(), lda, sva.as_mut_ptr(), mv,
                                 v.as_mut_ptr(), ldv, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgesvj_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32,
                   a: &mut [c32], lda: i32, sva: &mut [f32], mv: i32, v: &mut [c32], ldv: i32,
                   cwork: &mut [c32], lwork: i32, rwork: &mut [f32], lrwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvj_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, m, n, a.as_mut_ptr() as *mut _, lda,
                                 sva.as_mut_ptr(), mv, v.as_mut_ptr() as *mut _, ldv,
                                 cwork.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork)
    }
}

#[inline]
pub fn zgesvj_work(matrix_layout: Layout, joba: u8, jobu: u8, jobv: u8, m: i32, n: i32,
                   a: &mut [c64], lda: i32, sva: &mut [f64], mv: i32, v: &mut [c64], ldv: i32,
                   cwork: &mut [c64], lwork: i32, rwork: &mut [f64], lrwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvj_work(matrix_layout.into(), joba as c_char, jobu as c_char,
                                 jobv as c_char, m, n, a.as_mut_ptr() as *mut _, lda,
                                 sva.as_mut_ptr(), mv, v.as_mut_ptr() as *mut _, ldv,
                                 cwork.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork)
    }
}

#[inline]
pub fn sgesvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f32],
                   lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                   r: &mut [f32], c: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                 equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                                 b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f64],
                   lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                   r: &mut [f64], c: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                 equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                                 b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c32],
                   lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                   r: &mut [f32], c: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                 c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c64],
                   lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                   r: &mut [f64], c: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                 c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgesvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f32],
                    lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    r: &mut [f32], c: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32,
                    rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgesvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                  a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                  equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                                  b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                  rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgesvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [f64],
                    lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    r: &mut [f64], c: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32,
                    rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgesvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                  a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                  equed as *mut _ as *mut _, r.as_mut_ptr(), c.as_mut_ptr(),
                                  b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                  rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgesvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c32],
                    lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    r: &mut [f32], c: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32,
                    rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgesvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                  c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgesvxx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, a: &mut [c64],
                    lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    r: &mut [f64], c: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
                    rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgesvxx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, r.as_mut_ptr(),
                                  c.as_mut_ptr(), b.as_mut_ptr() as *mut _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, rpvgrw.as_mut_ptr(),
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgetf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetf2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgetf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetf2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgetf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetf2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgetf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetf2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgetrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetrf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgetrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetrf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgetrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetrf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgetrf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetrf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgetrf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32,
                    ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetrf2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                  ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgetrf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32,
                    ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetrf2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda,
                                  ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgetrf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32,
                    ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetrf2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgetrf2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32,
                    ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetrf2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgetri_work(matrix_layout: Layout, n: i32, a: &mut [f32], lda: i32, ipiv: &[i32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetri_work(matrix_layout.into(), n, a.as_mut_ptr(), lda, ipiv.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgetri_work(matrix_layout: Layout, n: i32, a: &mut [f64], lda: i32, ipiv: &[i32],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetri_work(matrix_layout.into(), n, a.as_mut_ptr(), lda, ipiv.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgetri_work(matrix_layout: Layout, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetri_work(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgetri_work(matrix_layout: Layout, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetri_work(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda,
                                 ipiv.as_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgetrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgetrs_work(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgetrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgetrs_work(matrix_layout.into(), trans as c_char, n, nrhs, a.as_ptr(), lda,
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgetrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgetrs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgetrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgetrs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sggbak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   lscale: &[f32], rscale: &[f32], m: i32, v: &mut [f32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggbak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn dggbak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   lscale: &[f64], rscale: &[f64], m: i32, v: &mut [f64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggbak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr(), ldv)
    }
}

#[inline]
pub fn cggbak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   lscale: &[f32], rscale: &[f32], m: i32, v: &mut [c32], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggbak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr() as *mut _,
                                 ldv)
    }
}

#[inline]
pub fn zggbak_work(matrix_layout: Layout, job: u8, side: u8, n: i32, ilo: i32, ihi: i32,
                   lscale: &[f64], rscale: &[f64], m: i32, v: &mut [c64], ldv: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggbak_work(matrix_layout.into(), job as c_char, side as c_char, n, ilo, ihi,
                                 lscale.as_ptr(), rscale.as_ptr(), m, v.as_mut_ptr() as *mut _,
                                 ldv)
    }
}

#[inline]
pub fn sggbal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [f32], lda: i32, b: &mut [f32],
                   ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f32], rscale: &mut [f32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggbal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, ilo, ihi, lscale.as_mut_ptr(),
                                 rscale.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dggbal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [f64], lda: i32, b: &mut [f64],
                   ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f64], rscale: &mut [f64],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggbal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, ilo, ihi, lscale.as_mut_ptr(),
                                 rscale.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn cggbal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [c32], lda: i32, b: &mut [c32],
                   ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f32], rscale: &mut [f32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggbal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, ilo, ihi, lscale.as_mut_ptr(),
                                 rscale.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn zggbal_work(matrix_layout: Layout, job: u8, n: i32, a: &mut [c64], lda: i32, b: &mut [c64],
                   ldb: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f64], rscale: &mut [f64],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggbal_work(matrix_layout.into(), job as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, ilo, ihi, lscale.as_mut_ptr(),
                                 rscale.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn sgges_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F32,
                  n: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, sdim: &mut [i32],
                  alphar: &mut f32, alphai: &mut f32, beta: &mut f32, vsl: &mut [f32], ldvsl: i32,
                  vsr: &mut [f32], ldvsr: i32, work: &mut [f32], lwork: i32,
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgges_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                                b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                                vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr,
                                work.as_mut_ptr(), lwork, bwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgges_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F64,
                  n: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, sdim: &mut [i32],
                  alphar: &mut f64, alphai: &mut f64, beta: &mut f64, vsl: &mut [f64], ldvsl: i32,
                  vsr: &mut [f64], ldvsr: i32, work: &mut [f64], lwork: i32,
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgges_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                                b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                                vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr,
                                work.as_mut_ptr(), lwork, bwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgges_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C32,
                  n: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, sdim: &mut [i32],
                  alpha: &mut c32, beta: &mut c32, vsl: &mut [c32], ldvsl: i32, vsr: &mut [c32],
                  ldvsr: i32, work: &mut [c32], lwork: i32, rwork: &mut [f32],
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgges_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _,
                                lda, b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                                alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _,
                                ldvsr, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                bwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgges_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C64,
                  n: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, sdim: &mut [i32],
                  alpha: &mut c64, beta: &mut c64, vsl: &mut [c64], ldvsl: i32, vsr: &mut [c64],
                  ldvsr: i32, work: &mut [c64], lwork: i32, rwork: &mut [f64],
                  bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgges_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _,
                                lda, b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                                alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _,
                                ldvsr, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                bwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgges3_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F32,
                   n: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, sdim: &mut [i32],
                   alphar: &mut f32, alphai: &mut f32, beta: &mut f32, vsl: &mut [f32], ldvsl: i32,
                   vsr: &mut [f32], ldvsr: i32, work: &mut [f32], lwork: i32,
                   bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgges3_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                                 vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr,
                                 work.as_mut_ptr(), lwork, bwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgges3_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F64,
                   n: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, sdim: &mut [i32],
                   alphar: &mut f64, alphai: &mut f64, beta: &mut f64, vsl: &mut [f64], ldvsl: i32,
                   vsr: &mut [f64], ldvsr: i32, work: &mut [f64], lwork: i32,
                   bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgges3_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, sdim.as_mut_ptr(), alphar, alphai, beta,
                                 vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(), ldvsr,
                                 work.as_mut_ptr(), lwork, bwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgges3_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C32,
                   n: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, sdim: &mut [i32],
                   alpha: &mut c32, beta: &mut c32, vsl: &mut [c32], ldvsl: i32, vsr: &mut [c32],
                   ldvsr: i32, work: &mut [c32], lwork: i32, rwork: &mut [f32],
                   bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgges3_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                                 alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                 vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _,
                                 ldvsr, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgges3_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C64,
                   n: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, sdim: &mut [i32],
                   alpha: &mut c64, beta: &mut c64, vsl: &mut [c64], ldvsl: i32, vsr: &mut [c64],
                   ldvsr: i32, work: &mut [c64], lwork: i32, rwork: &mut [f64],
                   bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgges3_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, sdim.as_mut_ptr(),
                                 alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                 vsl.as_mut_ptr() as *mut _, ldvsl, vsr.as_mut_ptr() as *mut _,
                                 ldvsr, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggesx_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F32,
                   sense: u8, n: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32,
                   sdim: &mut [i32], alphar: &mut f32, alphai: &mut f32, beta: &mut f32,
                   vsl: &mut [f32], ldvsl: i32, vsr: &mut [f32], ldvsr: i32, rconde: &mut [f32],
                   rcondv: &mut [f32], work: &mut [f32], lwork: i32, iwork: &mut [i32],
                   liwork: i32, bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggesx_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), sense as c_char, n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, sdim.as_mut_ptr(),
                                 alphar, alphai, beta, vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(),
                                 ldvsr, rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork,
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn dggesx_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select3F64,
                   sense: u8, n: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32,
                   sdim: &mut [i32], alphar: &mut f64, alphai: &mut f64, beta: &mut f64,
                   vsl: &mut [f64], ldvsl: i32, vsr: &mut [f64], ldvsr: i32, rconde: &mut [f64],
                   rcondv: &mut [f64], work: &mut [f64], lwork: i32, iwork: &mut [i32],
                   liwork: i32, bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggesx_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), sense as c_char, n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, sdim.as_mut_ptr(),
                                 alphar, alphai, beta, vsl.as_mut_ptr(), ldvsl, vsr.as_mut_ptr(),
                                 ldvsr, rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork,
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn cggesx_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C32,
                   sense: u8, n: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32,
                   sdim: &mut [i32], alpha: &mut c32, beta: &mut c32, vsl: &mut [c32], ldvsl: i32,
                   vsr: &mut [c32], ldvsr: i32, rconde: &mut [f32], rcondv: &mut [f32],
                   work: &mut [c32], lwork: i32, rwork: &mut [f32], iwork: &mut [i32], liwork: i32,
                   bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggesx_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), sense as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 sdim.as_mut_ptr(), alpha as *mut _ as *mut _,
                                 beta as *mut _ as *mut _, vsl.as_mut_ptr() as *mut _, ldvsl,
                                 vsr.as_mut_ptr() as *mut _, ldvsr, rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), iwork.as_mut_ptr(), liwork,
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggesx_work(matrix_layout: Layout, jobvsl: u8, jobvsr: u8, sort: u8, selctg: Select2C64,
                   sense: u8, n: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32,
                   sdim: &mut [i32], alpha: &mut c64, beta: &mut c64, vsl: &mut [c64], ldvsl: i32,
                   vsr: &mut [c64], ldvsr: i32, rconde: &mut [f64], rcondv: &mut [f64],
                   work: &mut [c64], lwork: i32, rwork: &mut [f64], iwork: &mut [i32], liwork: i32,
                   bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggesx_work(matrix_layout.into(), jobvsl as c_char, jobvsr as c_char,
                                 sort as c_char, transmute(selctg), sense as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 sdim.as_mut_ptr(), alpha as *mut _ as *mut _,
                                 beta as *mut _ as *mut _, vsl.as_mut_ptr() as *mut _, ldvsl,
                                 vsr.as_mut_ptr() as *mut _, ldvsr, rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), iwork.as_mut_ptr(), liwork,
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f32], lda: i32,
                  b: &mut [f32], ldb: i32, alphar: &mut f32, alphai: &mut f32, beta: &mut f32,
                  vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32, work: &mut [f32],
                  lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, vl,
                                ldvl, vr, ldvr, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dggev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f64], lda: i32,
                  b: &mut [f64], ldb: i32, alphar: &mut f64, alphai: &mut f64, beta: &mut f64,
                  vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32, work: &mut [f64],
                  lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, vl,
                                ldvl, vr, ldvr, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cggev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c32], lda: i32,
                  b: &mut [c32], ldb: i32, alpha: &mut c32, beta: &mut c32, vl: &mut c32,
                  ldvl: i32, vr: &mut c32, ldvr: i32, work: &mut [c32], lwork: i32,
                  rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr,
                                work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggev_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c64], lda: i32,
                  b: &mut [c64], ldb: i32, alpha: &mut c64, beta: &mut c64, vl: &mut c64,
                  ldvl: i32, vr: &mut c64, ldvr: i32, work: &mut [c64], lwork: i32,
                  rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggev_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr,
                                work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggev3_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, alphar: &mut f32, alphai: &mut f32, beta: &mut f32,
                   vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggev3_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta,
                                 vl, ldvl, vr, ldvr, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dggev3_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, alphar: &mut f64, alphai: &mut f64, beta: &mut f64,
                   vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggev3_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta,
                                 vl, ldvl, vr, ldvr, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cggev3_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, alpha: &mut c32, beta: &mut c32, vl: &mut c32,
                   ldvl: i32, vr: &mut c32, ldvr: i32, work: &mut [c32], lwork: i32,
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggev3_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                 vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggev3_work(matrix_layout: Layout, jobvl: u8, jobvr: u8, n: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, alpha: &mut c64, beta: &mut c64, vl: &mut c64,
                   ldvl: i32, vr: &mut c64, ldvr: i32, work: &mut [c64], lwork: i32,
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggev3_work(matrix_layout.into(), jobvl as c_char, jobvr as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                 vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, alphar: &mut f32,
                   alphai: &mut f32, beta: &mut f32, vl: &mut f32, ldvl: i32, vr: &mut f32,
                   ldvr: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f32], rscale: &mut [f32],
                   abnrm: &mut [f32], bbnrm: &mut [f32], rconde: &mut [f32], rcondv: &mut [f32],
                   work: &mut [f32], lwork: i32, iwork: &mut [i32], bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr,
                                 ilo, ihi, lscale.as_mut_ptr(), rscale.as_mut_ptr(),
                                 abnrm.as_mut_ptr(), bbnrm.as_mut_ptr(), rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn dggevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, alphar: &mut f64,
                   alphai: &mut f64, beta: &mut f64, vl: &mut f64, ldvl: i32, vr: &mut f64,
                   ldvr: i32, ilo: &mut i32, ihi: &mut i32, lscale: &mut [f64], rscale: &mut [f64],
                   abnrm: &mut [f64], bbnrm: &mut [f64], rconde: &mut [f64], rcondv: &mut [f64],
                   work: &mut [f64], lwork: i32, iwork: &mut [i32], bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr,
                                 ilo, ihi, lscale.as_mut_ptr(), rscale.as_mut_ptr(),
                                 abnrm.as_mut_ptr(), bbnrm.as_mut_ptr(), rconde.as_mut_ptr(),
                                 rcondv.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 bwork.as_mut_ptr())
    }
}

#[inline]
pub fn cggevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, alpha: &mut c32,
                   beta: &mut c32, vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32, ilo: &mut i32,
                   ihi: &mut i32, lscale: &mut [f32], rscale: &mut [f32], abnrm: &mut [f32],
                   bbnrm: &mut [f32], rconde: &mut [f32], rcondv: &mut [f32], work: &mut [c32],
                   lwork: i32, rwork: &mut [f32], iwork: &mut [i32], bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, alpha as *mut _ as *mut _,
                                 beta as *mut _ as *mut _, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, ilo, ihi, lscale.as_mut_ptr(),
                                 rscale.as_mut_ptr(), abnrm.as_mut_ptr(), bbnrm.as_mut_ptr(),
                                 rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), bwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggevx_work(matrix_layout: Layout, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: i32,
                   a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, alpha: &mut c64,
                   beta: &mut c64, vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32, ilo: &mut i32,
                   ihi: &mut i32, lscale: &mut [f64], rscale: &mut [f64], abnrm: &mut [f64],
                   bbnrm: &mut [f64], rconde: &mut [f64], rcondv: &mut [f64], work: &mut [c64],
                   lwork: i32, rwork: &mut [f64], iwork: &mut [i32], bwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggevx_work(matrix_layout.into(), balanc as c_char, jobvl as c_char,
                                 jobvr as c_char, sense as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, alpha as *mut _ as *mut _,
                                 beta as *mut _ as *mut _, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, ilo, ihi, lscale.as_mut_ptr(),
                                 rscale.as_mut_ptr(), abnrm.as_mut_ptr(), bbnrm.as_mut_ptr(),
                                 rconde.as_mut_ptr(), rcondv.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), bwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggglm_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, d: &mut [f32], x: &mut [f32], y: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggglm_work(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, d.as_mut_ptr(), x.as_mut_ptr(),
                                 y.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dggglm_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, d: &mut [f64], x: &mut [f64], y: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggglm_work(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, d.as_mut_ptr(), x.as_mut_ptr(),
                                 y.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cggglm_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, d: &mut [c32], x: &mut [c32], y: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggglm_work(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, d.as_mut_ptr() as *mut _,
                                 x.as_mut_ptr() as *mut _, y.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zggglm_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, d: &mut [c64], x: &mut [c64], y: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggglm_work(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, d.as_mut_ptr() as *mut _,
                                 x.as_mut_ptr() as *mut _, y.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgghrd_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, q: &mut f32, ldq: i32,
                   z: &mut [f32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgghrd_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq,
                                 z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn dgghrd_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, q: &mut f64, ldq: i32,
                   z: &mut [f64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgghrd_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq,
                                 z.as_mut_ptr(), ldz)
    }
}

#[inline]
pub fn cgghrd_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, q: &mut c32, ldq: i32,
                   z: &mut [c32], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgghrd_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn zgghrd_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, q: &mut c64, ldq: i32,
                   z: &mut [c64], ldz: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgghrd_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz)
    }
}

#[inline]
pub fn sgghd3_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, q: &mut f32, ldq: i32,
                   z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgghd3_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq,
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgghd3_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, q: &mut f64, ldq: i32,
                   z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgghd3_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, q, ldq,
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgghd3_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, q: &mut c32, ldq: i32,
                   z: &mut [c32], ldz: i32, work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgghd3_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgghd3_work(matrix_layout: Layout, compq: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, q: &mut c64, ldq: i32,
                   z: &mut [c64], ldz: i32, work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgghd3_work(matrix_layout.into(), compq as c_char, compz as c_char, n, ilo,
                                 ihi, a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgglse_work(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, c: &mut [f32], d: &mut [f32], x: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgglse_work(matrix_layout.into(), m, n, p, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, c.as_mut_ptr(), d.as_mut_ptr(),
                                 x.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dgglse_work(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, c: &mut [f64], d: &mut [f64], x: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgglse_work(matrix_layout.into(), m, n, p, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, c.as_mut_ptr(), d.as_mut_ptr(),
                                 x.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cgglse_work(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, c: &mut [c32], d: &mut [c32], x: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgglse_work(matrix_layout.into(), m, n, p, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, c.as_mut_ptr() as *mut _,
                                 d.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zgglse_work(matrix_layout: Layout, m: i32, n: i32, p: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, c: &mut [c64], d: &mut [c64], x: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgglse_work(matrix_layout.into(), m, n, p, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, c.as_mut_ptr() as *mut _,
                                 d.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sggqrf_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f32], lda: i32,
                   taua: &mut [f32], b: &mut [f32], ldb: i32, taub: &mut [f32], work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggqrf_work(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda,
                                 taua.as_mut_ptr(), b.as_mut_ptr(), ldb, taub.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dggqrf_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [f64], lda: i32,
                   taua: &mut [f64], b: &mut [f64], ldb: i32, taub: &mut [f64], work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggqrf_work(matrix_layout.into(), n, m, p, a.as_mut_ptr(), lda,
                                 taua.as_mut_ptr(), b.as_mut_ptr(), ldb, taub.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cggqrf_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c32], lda: i32,
                   taua: &mut [c32], b: &mut [c32], ldb: i32, taub: &mut [c32], work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggqrf_work(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                                 taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                                 taub.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zggqrf_work(matrix_layout: Layout, n: i32, m: i32, p: i32, a: &mut [c64], lda: i32,
                   taua: &mut [c64], b: &mut [c64], ldb: i32, taub: &mut [c64], work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggqrf_work(matrix_layout.into(), n, m, p, a.as_mut_ptr() as *mut _, lda,
                                 taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                                 taub.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sggrqf_work(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [f32], lda: i32,
                   taua: &mut [f32], b: &mut [f32], ldb: i32, taub: &mut [f32], work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggrqf_work(matrix_layout.into(), m, p, n, a.as_mut_ptr(), lda,
                                 taua.as_mut_ptr(), b.as_mut_ptr(), ldb, taub.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dggrqf_work(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [f64], lda: i32,
                   taua: &mut [f64], b: &mut [f64], ldb: i32, taub: &mut [f64], work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggrqf_work(matrix_layout.into(), m, p, n, a.as_mut_ptr(), lda,
                                 taua.as_mut_ptr(), b.as_mut_ptr(), ldb, taub.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn cggrqf_work(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [c32], lda: i32,
                   taua: &mut [c32], b: &mut [c32], ldb: i32, taub: &mut [c32], work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggrqf_work(matrix_layout.into(), m, p, n, a.as_mut_ptr() as *mut _, lda,
                                 taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                                 taub.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zggrqf_work(matrix_layout: Layout, m: i32, p: i32, n: i32, a: &mut [c64], lda: i32,
                   taua: &mut [c64], b: &mut [c64], ldb: i32, taub: &mut [c64], work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggrqf_work(matrix_layout.into(), m, p, n, a.as_mut_ptr() as *mut _, lda,
                                 taua.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb,
                                 taub.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sggsvd_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                   k: &mut i32, l: &mut i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32,
                   alpha: &mut f32, beta: &mut f32, u: &mut [f32], ldu: i32, v: &mut [f32],
                   ldv: i32, q: &mut f32, ldq: i32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvd_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, n, p, k, l, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, alpha, beta, u.as_mut_ptr(), ldu,
                                 v.as_mut_ptr(), ldv, q, ldq, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dggsvd_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                   k: &mut i32, l: &mut i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32,
                   alpha: &mut f64, beta: &mut f64, u: &mut [f64], ldu: i32, v: &mut [f64],
                   ldv: i32, q: &mut f64, ldq: i32, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvd_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, n, p, k, l, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, alpha, beta, u.as_mut_ptr(), ldu,
                                 v.as_mut_ptr(), ldv, q, ldq, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cggsvd_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                   k: &mut i32, l: &mut i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32,
                   alpha: &mut f32, beta: &mut f32, u: &mut [c32], ldu: i32, v: &mut [c32],
                   ldv: i32, q: &mut c32, ldq: i32, work: &mut [c32], rwork: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvd_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, n, p, k, l, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, alpha, beta,
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggsvd_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                   k: &mut i32, l: &mut i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32,
                   alpha: &mut f64, beta: &mut f64, u: &mut [c64], ldu: i32, v: &mut [c64],
                   ldv: i32, q: &mut c64, ldq: i32, work: &mut [c64], rwork: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvd_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, n, p, k, l, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, alpha, beta,
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggsvd3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                    k: &mut i32, l: &mut i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32,
                    alpha: &mut f32, beta: &mut f32, u: &mut [f32], ldu: i32, v: &mut [f32],
                    ldv: i32, q: &mut f32, ldq: i32, work: &mut [f32], lwork: i32,
                    iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvd3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, n, p, k, l, a.as_mut_ptr(), lda,
                                  b.as_mut_ptr(), ldb, alpha, beta, u.as_mut_ptr(), ldu,
                                  v.as_mut_ptr(), ldv, q, ldq, work.as_mut_ptr(), lwork,
                                  iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dggsvd3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                    k: &mut i32, l: &mut i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32,
                    alpha: &mut f64, beta: &mut f64, u: &mut [f64], ldu: i32, v: &mut [f64],
                    ldv: i32, q: &mut f64, ldq: i32, work: &mut [f64], lwork: i32,
                    iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvd3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, n, p, k, l, a.as_mut_ptr(), lda,
                                  b.as_mut_ptr(), ldb, alpha, beta, u.as_mut_ptr(), ldu,
                                  v.as_mut_ptr(), ldv, q, ldq, work.as_mut_ptr(), lwork,
                                  iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cggsvd3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                    k: &mut i32, l: &mut i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32,
                    alpha: &mut f32, beta: &mut f32, u: &mut [c32], ldu: i32, v: &mut [c32],
                    ldv: i32, q: &mut c32, ldq: i32, work: &mut [c32], lwork: i32,
                    rwork: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvd3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, n, p, k, l, a.as_mut_ptr() as *mut _, lda,
                                  b.as_mut_ptr() as *mut _, ldb, alpha, beta,
                                  u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                  q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _, lwork,
                                  rwork.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zggsvd3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, n: i32, p: i32,
                    k: &mut i32, l: &mut i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32,
                    alpha: &mut f64, beta: &mut f64, u: &mut [c64], ldu: i32, v: &mut [c64],
                    ldv: i32, q: &mut c64, ldq: i32, work: &mut [c64], lwork: i32,
                    rwork: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvd3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, n, p, k, l, a.as_mut_ptr() as *mut _, lda,
                                  b.as_mut_ptr() as *mut _, ldb, alpha, beta,
                                  u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                  q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _, lwork,
                                  rwork.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sggsvp_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, tola: f32, tolb: f32,
                   k: &mut i32, l: &mut i32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32,
                   q: &mut f32, ldq: i32, iwork: &mut [i32], tau: &mut [f32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvp_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb,
                                 tola, tolb, k, l, u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q,
                                 ldq, iwork.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dggsvp_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, tola: f64, tolb: f64,
                   k: &mut i32, l: &mut i32, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32,
                   q: &mut f64, ldq: i32, iwork: &mut [i32], tau: &mut [f64],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvp_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb,
                                 tola, tolb, k, l, u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv, q,
                                 ldq, iwork.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn cggsvp_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, tola: f32, tolb: f32,
                   k: &mut i32, l: &mut i32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32,
                   q: &mut c32, ldq: i32, iwork: &mut [i32], rwork: &mut [f32], tau: &mut [c32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvp_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, tola, tolb, k, l,
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 q as *mut _ as *mut _, ldq, iwork.as_mut_ptr(),
                                 rwork.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zggsvp_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, tola: f64, tolb: f64,
                   k: &mut i32, l: &mut i32, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32,
                   q: &mut c64, ldq: i32, iwork: &mut [i32], rwork: &mut [f64], tau: &mut [c64],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvp_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, tola, tolb, k, l,
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 q as *mut _ as *mut _, ldq, iwork.as_mut_ptr(),
                                 rwork.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sggsvp3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                    a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, tola: f32, tolb: f32,
                    k: &mut i32, l: &mut i32, u: &mut [f32], ldu: i32, v: &mut [f32], ldv: i32,
                    q: &mut f32, ldq: i32, iwork: &mut [i32], tau: &mut [f32], work: &mut [f32],
                    lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sggsvp3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                                  ldb, tola, tolb, k, l, u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv,
                                  q, ldq, iwork.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr(),
                                  lwork)
    }
}

#[inline]
pub fn dggsvp3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                    a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, tola: f64, tolb: f64,
                    k: &mut i32, l: &mut i32, u: &mut [f64], ldu: i32, v: &mut [f64], ldv: i32,
                    q: &mut f64, ldq: i32, iwork: &mut [i32], tau: &mut [f64], work: &mut [f64],
                    lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dggsvp3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, p, n, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                                  ldb, tola, tolb, k, l, u.as_mut_ptr(), ldu, v.as_mut_ptr(), ldv,
                                  q, ldq, iwork.as_mut_ptr(), tau.as_mut_ptr(), work.as_mut_ptr(),
                                  lwork)
    }
}

#[inline]
pub fn cggsvp3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                    a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, tola: f32, tolb: f32,
                    k: &mut i32, l: &mut i32, u: &mut [c32], ldu: i32, v: &mut [c32], ldv: i32,
                    q: &mut c32, ldq: i32, iwork: &mut [i32], rwork: &mut [f32], tau: &mut [c32],
                    work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cggsvp3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, p, n, a.as_mut_ptr() as *mut _, lda,
                                  b.as_mut_ptr() as *mut _, ldb, tola, tolb, k, l,
                                  u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                  q as *mut _ as *mut _, ldq, iwork.as_mut_ptr(),
                                  rwork.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                  work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zggsvp3_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                    a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, tola: f64, tolb: f64,
                    k: &mut i32, l: &mut i32, u: &mut [c64], ldu: i32, v: &mut [c64], ldv: i32,
                    q: &mut c64, ldq: i32, iwork: &mut [i32], rwork: &mut [f64], tau: &mut [c64],
                    work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zggsvp3_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                  jobq as c_char, m, p, n, a.as_mut_ptr() as *mut _, lda,
                                  b.as_mut_ptr() as *mut _, ldb, tola, tolb, k, l,
                                  u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                  q as *mut _ as *mut _, ldq, iwork.as_mut_ptr(),
                                  rwork.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                  work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn sgtcon_work(norm: u8, n: i32, dl: &[f32], d: &[f32], du: &[f32], du2: &[f32], ipiv: &[i32],
                   anorm: f32, rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtcon_work(norm as c_char, n, dl.as_ptr(), d.as_ptr(), du.as_ptr(),
                                 du2.as_ptr(), ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgtcon_work(norm: u8, n: i32, dl: &[f64], d: &[f64], du: &[f64], du2: &[f64], ipiv: &[i32],
                   anorm: f64, rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtcon_work(norm as c_char, n, dl.as_ptr(), d.as_ptr(), du.as_ptr(),
                                 du2.as_ptr(), ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgtcon_work(norm: u8, n: i32, dl: &[c32], d: &[c32], du: &[c32], du2: &[c32], ipiv: &[i32],
                   anorm: f32, rcond: &mut f32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtcon_work(norm as c_char, n, dl.as_ptr() as *const _,
                                 d.as_ptr() as *const _, du.as_ptr() as *const _,
                                 du2.as_ptr() as *const _, ipiv.as_ptr(), anorm, rcond,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgtcon_work(norm: u8, n: i32, dl: &[c64], d: &[c64], du: &[c64], du2: &[c64], ipiv: &[i32],
                   anorm: f64, rcond: &mut f64, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtcon_work(norm as c_char, n, dl.as_ptr() as *const _,
                                 d.as_ptr() as *const _, du.as_ptr() as *const _,
                                 du2.as_ptr() as *const _, ipiv.as_ptr(), anorm, rcond,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgtrfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f32], d: &[f32],
                   du: &[f32], dlf: &[f32], df: &[f32], duf: &[f32], du2: &[f32], ipiv: &[i32],
                   b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtrfs_work(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                                 d.as_ptr(), du.as_ptr(), dlf.as_ptr(), df.as_ptr(), duf.as_ptr(),
                                 du2.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgtrfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f64], d: &[f64],
                   du: &[f64], dlf: &[f64], df: &[f64], duf: &[f64], du2: &[f64], ipiv: &[i32],
                   b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtrfs_work(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                                 d.as_ptr(), du.as_ptr(), dlf.as_ptr(), df.as_ptr(), duf.as_ptr(),
                                 du2.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgtrfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c32], d: &[c32],
                   du: &[c32], dlf: &[c32], df: &[c32], duf: &[c32], du2: &[c32], ipiv: &[i32],
                   b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtrfs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 dl.as_ptr() as *const _, d.as_ptr() as *const _,
                                 du.as_ptr() as *const _, dlf.as_ptr() as *const _,
                                 df.as_ptr() as *const _, duf.as_ptr() as *const _,
                                 du2.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _,
                                 ldb, x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgtrfs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c64], d: &[c64],
                   du: &[c64], dlf: &[c64], df: &[c64], duf: &[c64], du2: &[c64], ipiv: &[i32],
                   b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtrfs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 dl.as_ptr() as *const _, d.as_ptr() as *const _,
                                 du.as_ptr() as *const _, dlf.as_ptr() as *const _,
                                 df.as_ptr() as *const _, duf.as_ptr() as *const _,
                                 du2.as_ptr() as *const _, ipiv.as_ptr(), b.as_ptr() as *const _,
                                 ldb, x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgtsv_work(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [f32], d: &mut [f32],
                  du: &mut [f32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtsv_work(matrix_layout.into(), n, nrhs, dl.as_mut_ptr(), d.as_mut_ptr(),
                                du.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgtsv_work(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [f64], d: &mut [f64],
                  du: &mut [f64], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtsv_work(matrix_layout.into(), n, nrhs, dl.as_mut_ptr(), d.as_mut_ptr(),
                                du.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgtsv_work(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [c32], d: &mut [c32],
                  du: &mut [c32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtsv_work(matrix_layout.into(), n, nrhs, dl.as_mut_ptr() as *mut _,
                                d.as_mut_ptr() as *mut _, du.as_mut_ptr() as *mut _,
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgtsv_work(matrix_layout: Layout, n: i32, nrhs: i32, dl: &mut [c64], d: &mut [c64],
                  du: &mut [c64], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtsv_work(matrix_layout.into(), n, nrhs, dl.as_mut_ptr() as *mut _,
                                d.as_mut_ptr() as *mut _, du.as_mut_ptr() as *mut _,
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgtsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[f32],
                   d: &[f32], du: &[f32], dlf: &mut [f32], df: &mut [f32], duf: &mut [f32],
                   du2: &mut [f32], ipiv: &mut [i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgtsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 dl.as_ptr(), d.as_ptr(), du.as_ptr(), dlf.as_mut_ptr(),
                                 df.as_mut_ptr(), duf.as_mut_ptr(), du2.as_mut_ptr(),
                                 ipiv.as_mut_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dgtsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[f64],
                   d: &[f64], du: &[f64], dlf: &mut [f64], df: &mut [f64], duf: &mut [f64],
                   du2: &mut [f64], ipiv: &mut [i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgtsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 dl.as_ptr(), d.as_ptr(), du.as_ptr(), dlf.as_mut_ptr(),
                                 df.as_mut_ptr(), duf.as_mut_ptr(), du2.as_mut_ptr(),
                                 ipiv.as_mut_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cgtsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[c32],
                   d: &[c32], du: &[c32], dlf: &mut [c32], df: &mut [c32], duf: &mut [c32],
                   du2: &mut [c32], ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgtsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 dl.as_ptr() as *const _, d.as_ptr() as *const _,
                                 du.as_ptr() as *const _, dlf.as_mut_ptr() as *mut _,
                                 df.as_mut_ptr() as *mut _, duf.as_mut_ptr() as *mut _,
                                 du2.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zgtsvx_work(matrix_layout: Layout, fact: u8, trans: u8, n: i32, nrhs: i32, dl: &[c64],
                   d: &[c64], du: &[c64], dlf: &mut [c64], df: &mut [c64], duf: &mut [c64],
                   du2: &mut [c64], ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgtsvx_work(matrix_layout.into(), fact as c_char, trans as c_char, n, nrhs,
                                 dl.as_ptr() as *const _, d.as_ptr() as *const _,
                                 du.as_ptr() as *const _, dlf.as_mut_ptr() as *mut _,
                                 df.as_mut_ptr() as *mut _, duf.as_mut_ptr() as *mut _,
                                 du2.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgttrf_work(n: i32, dl: &mut [f32], d: &mut [f32], du: &mut [f32], du2: &mut [f32],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgttrf_work(n, dl.as_mut_ptr(), d.as_mut_ptr(), du.as_mut_ptr(),
                                 du2.as_mut_ptr(), ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dgttrf_work(n: i32, dl: &mut [f64], d: &mut [f64], du: &mut [f64], du2: &mut [f64],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgttrf_work(n, dl.as_mut_ptr(), d.as_mut_ptr(), du.as_mut_ptr(),
                                 du2.as_mut_ptr(), ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn cgttrf_work(n: i32, dl: &mut [c32], d: &mut [c32], du: &mut [c32], du2: &mut [c32],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgttrf_work(n, dl.as_mut_ptr() as *mut _, d.as_mut_ptr() as *mut _,
                                 du.as_mut_ptr() as *mut _, du2.as_mut_ptr() as *mut _,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zgttrf_work(n: i32, dl: &mut [c64], d: &mut [c64], du: &mut [c64], du2: &mut [c64],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgttrf_work(n, dl.as_mut_ptr() as *mut _, d.as_mut_ptr() as *mut _,
                                 du.as_mut_ptr() as *mut _, du2.as_mut_ptr() as *mut _,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn sgttrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f32], d: &[f32],
                   du: &[f32], du2: &[f32], ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgttrs_work(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                                 d.as_ptr(), du.as_ptr(), du2.as_ptr(), ipiv.as_ptr(),
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dgttrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[f64], d: &[f64],
                   du: &[f64], du2: &[f64], ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgttrs_work(matrix_layout.into(), trans as c_char, n, nrhs, dl.as_ptr(),
                                 d.as_ptr(), du.as_ptr(), du2.as_ptr(), ipiv.as_ptr(),
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cgttrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c32], d: &[c32],
                   du: &[c32], du2: &[c32], ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgttrs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 dl.as_ptr() as *const _, d.as_ptr() as *const _,
                                 du.as_ptr() as *const _, du2.as_ptr() as *const _, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zgttrs_work(matrix_layout: Layout, trans: u8, n: i32, nrhs: i32, dl: &[c64], d: &[c64],
                   du: &[c64], du2: &[c64], ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgttrs_work(matrix_layout.into(), trans as c_char, n, nrhs,
                                 dl.as_ptr() as *const _, d.as_ptr() as *const _,
                                 du.as_ptr() as *const _, du2.as_ptr() as *const _, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chbev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c32],
                  ldab: i32, w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32],
                  rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chbev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                                z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _,
                                rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhbev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c64],
                  ldab: i32, w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64],
                  rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                                z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _,
                                rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chbevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c32],
                   ldab: i32, w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32], lwork: i32,
                   rwork: &mut [f32], lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zhbevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c64],
                   ldab: i32, w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64], lwork: i32,
                   rwork: &mut [f64], lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr() as *mut _, ldab, w.as_mut_ptr(),
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn chbevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
                   ab: &mut [c32], ldab: i32, q: &mut c32, ldq: i32, vl: f32, vu: f32, il: i32,
                   iu: i32, abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [c32], ldz: i32,
                   work: &mut [c32], rwork: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, kd, ab.as_mut_ptr() as *mut _, ldab,
                                 q as *mut _ as *mut _, ldq, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn zhbevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
                   ab: &mut [c64], ldab: i32, q: &mut c64, ldq: i32, vl: f64, vu: f64, il: i32,
                   iu: i32, abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [c64], ldz: i32,
                   work: &mut [c64], rwork: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, kd, ab.as_mut_ptr() as *mut _, ldab,
                                 q as *mut _ as *mut _, ldq, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn chbgst_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [c32], ldab: i32, bb: &[c32], ldbb: i32, x: &mut [c32], ldx: i32,
                   work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgst_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr() as *mut _, ldab, bb.as_ptr() as *const _, ldbb,
                                 x.as_mut_ptr() as *mut _, ldx, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhbgst_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [c64], ldab: i32, bb: &[c64], ldbb: i32, x: &mut [c64], ldx: i32,
                   work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgst_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr() as *mut _, ldab, bb.as_ptr() as *const _, ldbb,
                                 x.as_mut_ptr() as *mut _, ldx, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chbgv_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                  ab: &mut [c32], ldab: i32, bb: &mut [c32], ldbb: i32, w: &mut [f32],
                  z: &mut [c32], ldz: i32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgv_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                                w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhbgv_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                  ab: &mut [c64], ldab: i32, bb: &mut [c64], ldbb: i32, w: &mut [f64],
                  z: &mut [c64], ldz: i32, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgv_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                                w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chbgvd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [c32], ldab: i32, bb: &mut [c32], ldbb: i32, w: &mut [f32],
                   z: &mut [c32], ldz: i32, work: &mut [c32], lwork: i32, rwork: &mut [f32],
                   lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgvd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zhbgvd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [c64], ldab: i32, bb: &mut [c64], ldbb: i32, w: &mut [f64],
                   z: &mut [c64], ldz: i32, work: &mut [c64], lwork: i32, rwork: &mut [f64],
                   lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgvd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr() as *mut _, ldab, bb.as_mut_ptr() as *mut _, ldbb,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn chbgvx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [c32], ldab: i32, bb: &mut [c32], ldbb: i32, q: &mut c32, ldq: i32,
                   vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
                   z: &mut [c32], ldz: i32, work: &mut [c32], rwork: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chbgvx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ka, kb, ab.as_mut_ptr() as *mut _, ldab,
                                 bb.as_mut_ptr() as *mut _, ldbb, q as *mut _ as *mut _, ldq, vl,
                                 vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _,
                                 ldz, work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn zhbgvx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [c64], ldab: i32, bb: &mut [c64], ldbb: i32, q: &mut c64, ldq: i32,
                   vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
                   z: &mut [c64], ldz: i32, work: &mut [c64], rwork: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbgvx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ka, kb, ab.as_mut_ptr() as *mut _, ldab,
                                 bb.as_mut_ptr() as *mut _, ldbb, q as *mut _ as *mut _, ldq, vl,
                                 vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _,
                                 ldz, work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn chbtrd_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c32],
                   ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut c32, ldq: i32,
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chbtrd_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                                 q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhbtrd_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [c64],
                   ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut c64, ldq: i32,
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhbtrd_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr() as *mut _, ldab, d.as_mut_ptr(), e.as_mut_ptr(),
                                 q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn checon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, ipiv: &[i32],
                   anorm: f32, rcond: &mut f32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_checon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhecon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, ipiv: &[i32],
                   anorm: f64, rcond: &mut f64, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhecon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn cheequb_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, s: &mut [f32],
                    scond: &mut [f32], amax: &mut [f32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cheequb_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                  lda, s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zheequb_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, s: &mut [f64],
                    scond: &mut [f64], amax: &mut [f64], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zheequb_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                  lda, s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn cheev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                  w: &mut [f32], work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cheev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr(),
                                work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zheev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                  w: &mut [f64], work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zheev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr(),
                                work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn cheevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   w: &mut [f32], work: &mut [c32], lwork: i32, rwork: &mut [f32], lrwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cheevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zheevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   w: &mut [f64], work: &mut [c64], lwork: i32, rwork: &mut [f64], lrwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zheevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, w.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn cheevr_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c32],
                   lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [c32], ldz: i32, isuppz: &mut [i32], work: &mut [c32],
                   lwork: i32, rwork: &mut [f32], lrwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cheevr_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu,
                                 abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 isuppz.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zheevr_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c64],
                   lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [c64], ldz: i32, isuppz: &mut [i32], work: &mut [c64],
                   lwork: i32, rwork: &mut [f64], lrwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zheevr_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu,
                                 abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 isuppz.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn cheevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c32],
                   lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32], lwork: i32,
                   rwork: &mut [f32], iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cheevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu,
                                 abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn zheevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [c64],
                   lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64], lwork: i32,
                   rwork: &mut [f64], iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zheevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr() as *mut _, lda, vl, vu, il, iu,
                                 abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn chegst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   b: &[c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chegst_work(matrix_layout.into(), itype, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_ptr() as *const _, ldb)
    }
}

#[inline]
pub fn zhegst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   b: &[c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegst_work(matrix_layout.into(), itype, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_ptr() as *const _, ldb)
    }
}

#[inline]
pub fn chegv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c32],
                  lda: i32, b: &mut [c32], ldb: i32, w: &mut [f32], work: &mut [c32], lwork: i32,
                  rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chegv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                w.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhegv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c64],
                  lda: i32, b: &mut [c64], ldb: i32, w: &mut [f64], work: &mut [c64], lwork: i32,
                  rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                w.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chegvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c32],
                   lda: i32, b: &mut [c32], ldb: i32, w: &mut [f32], work: &mut [c32], lwork: i32,
                   rwork: &mut [f32], lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chegvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 w.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zhegvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [c64],
                   lda: i32, b: &mut [c64], ldb: i32, w: &mut [f64], work: &mut [c64], lwork: i32,
                   rwork: &mut [f64], lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 w.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn chegvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, vl: f32, vu: f32, il: i32,
                   iu: i32, abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [c32], ldz: i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chegvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn zhegvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, vl: f64, vu: f64, il: i32,
                   iu: i32, abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [c64], ldz: i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhegvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn cherfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   af: &[c32], ldaf: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cherfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zherfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   af: &[c64], ldaf: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zherfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn cherfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c32],
                    lda: i32, af: &[c32], ldaf: i32, ipiv: &[i32], s: &[f32], b: &[c32], ldb: i32,
                    x: &mut [c32], ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cherfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zherfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c64],
                    lda: i32, af: &[c64], ldaf: i32, ipiv: &[i32], s: &[f64], b: &[c64], ldb: i32,
                    x: &mut [c64], ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zherfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chesv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                  ipiv: &mut [i32], b: &mut [c32], ldb: i32, work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chesv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zhesv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                  ipiv: &mut [i32], b: &mut [c64], ldb: i32, work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhesv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn chesvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c32],
                   lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], b: &[c32], ldb: i32,
                   x: &mut [c32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chesvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhesvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c64],
                   lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], b: &[c64], ldb: i32,
                   x: &mut [c64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhesvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chesvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
                    lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    s: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32,
                    rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chesvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhesvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
                    lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    s: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
                    rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhesvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chetrd_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, d: &mut [f32],
                   e: &mut [f32], tau: &mut [c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrd_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zhetrd_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, d: &mut [f64],
                   e: &mut [f64], tau: &mut [c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrd_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr() as *mut _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn chetrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   ipiv: &mut [i32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zhetrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn chetri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhetri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn chetrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhetrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chfrk_work(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32,
                  alpha: f32, a: &[c32], lda: i32, beta: f32, c: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chfrk_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                trans as c_char, n, k, alpha, a.as_ptr() as *const _, lda, beta,
                                c.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhfrk_work(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32,
                  alpha: f64, a: &[c64], lda: i32, beta: f64, c: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhfrk_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                trans as c_char, n, k, alpha, a.as_ptr() as *const _, lda, beta,
                                c.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn shgeqz_work(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32,
                   ihi: i32, h: &mut [f32], ldh: i32, t: &mut [f32], ldt: i32, alphar: &mut f32,
                   alphai: &mut f32, beta: &mut f32, q: &mut f32, ldq: i32, z: &mut [f32],
                   ldz: i32, work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_shgeqz_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 compz as c_char, n, ilo, ihi, h.as_mut_ptr(), ldh, t.as_mut_ptr(),
                                 ldt, alphar, alphai, beta, q, ldq, z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dhgeqz_work(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32,
                   ihi: i32, h: &mut [f64], ldh: i32, t: &mut [f64], ldt: i32, alphar: &mut f64,
                   alphai: &mut f64, beta: &mut f64, q: &mut f64, ldq: i32, z: &mut [f64],
                   ldz: i32, work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dhgeqz_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 compz as c_char, n, ilo, ihi, h.as_mut_ptr(), ldh, t.as_mut_ptr(),
                                 ldt, alphar, alphai, beta, q, ldq, z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn chgeqz_work(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32,
                   ihi: i32, h: &mut [c32], ldh: i32, t: &mut [c32], ldt: i32, alpha: &mut c32,
                   beta: &mut c32, q: &mut c32, ldq: i32, z: &mut [c32], ldz: i32,
                   work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chgeqz_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 compz as c_char, n, ilo, ihi, h.as_mut_ptr() as *mut _, ldh,
                                 t.as_mut_ptr() as *mut _, ldt, alpha as *mut _ as *mut _,
                                 beta as *mut _ as *mut _, q as *mut _ as *mut _, ldq,
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhgeqz_work(matrix_layout: Layout, job: u8, compq: u8, compz: u8, n: i32, ilo: i32,
                   ihi: i32, h: &mut [c64], ldh: i32, t: &mut [c64], ldt: i32, alpha: &mut c64,
                   beta: &mut c64, q: &mut c64, ldq: i32, z: &mut [c64], ldz: i32,
                   work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhgeqz_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 compz as c_char, n, ilo, ihi, h.as_mut_ptr() as *mut _, ldh,
                                 t.as_mut_ptr() as *mut _, ldt, alpha as *mut _ as *mut _,
                                 beta as *mut _ as *mut _, q as *mut _ as *mut _, ldq,
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chpcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], ipiv: &[i32], anorm: f32,
                   rcond: &mut f32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhpcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], ipiv: &[i32], anorm: f64,
                   rcond: &mut f64, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn chpev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c32], w: &mut [f32],
                  z: &mut [c32], ldz: i32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                                z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _,
                                rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhpev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c64], w: &mut [f64],
                  z: &mut [c64], ldz: i32, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                                z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _,
                                rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chpevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c32],
                   w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32], lwork: i32,
                   rwork: &mut [f32], lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zhpevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [c64],
                   w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64], lwork: i32,
                   rwork: &mut [f64], lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, w.as_mut_ptr(),
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr(), lrwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn chpevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [c32],
                   vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
                   z: &mut [c32], ldz: i32, work: &mut [c32], rwork: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr() as *mut _, vl, vu, il, iu,
                                 abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn zhpevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [c64],
                   vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
                   z: &mut [c64], ldz: i32, work: &mut [c64], rwork: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr() as *mut _, vl, vu, il, iu,
                                 abstol, m, w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn chpgst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [c32],
                   bp: &[c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgst_work(matrix_layout.into(), itype, uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, bp.as_ptr() as *const _)
    }
}

#[inline]
pub fn zhpgst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [c64],
                   bp: &[c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgst_work(matrix_layout.into(), itype, uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, bp.as_ptr() as *const _)
    }
}

#[inline]
pub fn chpgv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c32],
                  bp: &mut [c32], w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32],
                  rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _,
                                w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhpgv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c64],
                  bp: &mut [c64], w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64],
                  rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _,
                                w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chpgvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c32],
                   bp: &mut [c32], w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32],
                   lwork: i32, rwork: &mut [f32], lrwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zhpgvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [c64],
                   bp: &mut [c64], w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64],
                   lwork: i32, rwork: &mut [f64], lrwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, bp.as_mut_ptr() as *mut _,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn chpgvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   ap: &mut [c32], bp: &mut [c32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32,
                   m: &mut i32, w: &mut [f32], z: &mut [c32], ldz: i32, work: &mut [c32],
                   rwork: &mut [f32], iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpgvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                                 bp.as_mut_ptr() as *mut _, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn zhpgvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   ap: &mut [c64], bp: &mut [c64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64,
                   m: &mut i32, w: &mut [f64], z: &mut [c64], ldz: i32, work: &mut [c64],
                   rwork: &mut [f64], iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpgvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr() as *mut _,
                                 bp.as_mut_ptr() as *mut _, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn chprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], afp: &[c32],
                   ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_ptr() as *const _, ipiv.as_ptr(),
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], afp: &[c64],
                   ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_ptr() as *const _, ipiv.as_ptr(),
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chpsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32],
                  ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chpsv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhpsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64],
                  ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpsv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chpsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c32],
                   afp: &mut [c32], ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chpsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zhpsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c64],
                   afp: &mut [c64], ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhpsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn chptrd_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], d: &mut [f32],
                   e: &mut [f32], tau: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chptrd_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, d.as_mut_ptr(), e.as_mut_ptr(),
                                 tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhptrd_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], d: &mut [f64],
                   e: &mut [f64], tau: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhptrd_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, d.as_mut_ptr(), e.as_mut_ptr(),
                                 tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn chptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chptrf_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zhptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhptrf_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn chptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], ipiv: &[i32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chptri_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_ptr(),
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zhptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], ipiv: &[i32],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhptri_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_ptr(),
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn chptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], ipiv: &[i32],
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, ipiv.as_ptr(), b.as_mut_ptr() as *mut _,
                                 ldb)
    }
}

#[inline]
pub fn zhptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], ipiv: &[i32],
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, ipiv.as_ptr(), b.as_mut_ptr() as *mut _,
                                 ldb)
    }
}

#[inline]
pub fn shsein_work(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &mut [i32],
                   n: i32, h: &[f32], ldh: i32, wr: &mut [f32], wi: &[f32], vl: &mut f32,
                   ldvl: i32, vr: &mut f32, ldvr: i32, mm: i32, m: &mut i32, work: &mut [f32],
                   ifaill: &mut i32, ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_shsein_work(matrix_layout.into(), job as c_char, eigsrc as c_char,
                                 initv as c_char, select.as_mut_ptr(), n, h.as_ptr(), ldh,
                                 wr.as_mut_ptr(), wi.as_ptr(), vl, ldvl, vr, ldvr, mm, m,
                                 work.as_mut_ptr(), ifaill, ifailr)
    }
}

#[inline]
pub fn dhsein_work(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &mut [i32],
                   n: i32, h: &[f64], ldh: i32, wr: &mut [f64], wi: &[f64], vl: &mut f64,
                   ldvl: i32, vr: &mut f64, ldvr: i32, mm: i32, m: &mut i32, work: &mut [f64],
                   ifaill: &mut i32, ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dhsein_work(matrix_layout.into(), job as c_char, eigsrc as c_char,
                                 initv as c_char, select.as_mut_ptr(), n, h.as_ptr(), ldh,
                                 wr.as_mut_ptr(), wi.as_ptr(), vl, ldvl, vr, ldvr, mm, m,
                                 work.as_mut_ptr(), ifaill, ifailr)
    }
}

#[inline]
pub fn chsein_work(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &[i32], n: i32,
                   h: &[c32], ldh: i32, w: &mut [c32], vl: &mut c32, ldvl: i32, vr: &mut c32,
                   ldvr: i32, mm: i32, m: &mut i32, work: &mut [c32], rwork: &mut [f32],
                   ifaill: &mut i32, ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chsein_work(matrix_layout.into(), job as c_char, eigsrc as c_char,
                                 initv as c_char, select.as_ptr(), n, h.as_ptr() as *const _, ldh,
                                 w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, mm, m, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr(), ifaill, ifailr)
    }
}

#[inline]
pub fn zhsein_work(matrix_layout: Layout, job: u8, eigsrc: u8, initv: u8, select: &[i32], n: i32,
                   h: &[c64], ldh: i32, w: &mut [c64], vl: &mut c64, ldvl: i32, vr: &mut c64,
                   ldvr: i32, mm: i32, m: &mut i32, work: &mut [c64], rwork: &mut [f64],
                   ifaill: &mut i32, ifailr: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhsein_work(matrix_layout.into(), job as c_char, eigsrc as c_char,
                                 initv as c_char, select.as_ptr(), n, h.as_ptr() as *const _, ldh,
                                 w.as_mut_ptr() as *mut _, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, mm, m, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr(), ifaill, ifailr)
    }
}

#[inline]
pub fn shseqr_work(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   h: &mut [f32], ldh: i32, wr: &mut [f32], wi: &mut [f32], z: &mut [f32],
                   ldz: i32, work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_shseqr_work(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                                 h.as_mut_ptr(), ldh, wr.as_mut_ptr(), wi.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dhseqr_work(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   h: &mut [f64], ldh: i32, wr: &mut [f64], wi: &mut [f64], z: &mut [f64],
                   ldz: i32, work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dhseqr_work(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                                 h.as_mut_ptr(), ldh, wr.as_mut_ptr(), wi.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn chseqr_work(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   h: &mut [c32], ldh: i32, w: &mut [c32], z: &mut [c32], ldz: i32,
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chseqr_work(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                                 h.as_mut_ptr() as *mut _, ldh, w.as_mut_ptr() as *mut _,
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zhseqr_work(matrix_layout: Layout, job: u8, compz: u8, n: i32, ilo: i32, ihi: i32,
                   h: &mut [c64], ldh: i32, w: &mut [c64], z: &mut [c64], ldz: i32,
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhseqr_work(matrix_layout.into(), job as c_char, compz as c_char, n, ilo, ihi,
                                 h.as_mut_ptr() as *mut _, ldh, w.as_mut_ptr() as *mut _,
                                 z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn clacgv_work(n: i32, x: &mut [c32], incx: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_clacgv_work(n, x.as_mut_ptr() as *mut _, incx)
    }
}

#[inline]
pub fn zlacgv_work(n: i32, x: &mut [c64], incx: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zlacgv_work(n, x.as_mut_ptr() as *mut _, incx)
    }
}

#[inline]
pub fn slacn2_work(n: i32, v: &mut [f32], x: &mut [f32], isgn: &mut [i32], est: &mut [f32],
                   kase: &mut i32, isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slacn2_work(n, v.as_mut_ptr(), x.as_mut_ptr(), isgn.as_mut_ptr(),
                                 est.as_mut_ptr(), kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn dlacn2_work(n: i32, v: &mut [f64], x: &mut [f64], isgn: &mut [i32], est: &mut [f64],
                   kase: &mut i32, isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlacn2_work(n, v.as_mut_ptr(), x.as_mut_ptr(), isgn.as_mut_ptr(),
                                 est.as_mut_ptr(), kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn clacn2_work(n: i32, v: &mut [c32], x: &mut [c32], est: &mut [f32], kase: &mut i32,
                   isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clacn2_work(n, v.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _,
                                 est.as_mut_ptr(), kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn zlacn2_work(n: i32, v: &mut [c64], x: &mut [c64], est: &mut [f64], kase: &mut i32,
                   isave: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlacn2_work(n, v.as_mut_ptr() as *mut _, x.as_mut_ptr() as *mut _,
                                 est.as_mut_ptr(), kase, isave.as_mut_ptr())
    }
}

#[inline]
pub fn slacpy_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f32], lda: i32,
                   b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slacpy_work(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dlacpy_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f64], lda: i32,
                   b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlacpy_work(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn clacpy_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[c32], lda: i32,
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clacpy_work(matrix_layout.into(), uplo as c_char, m, n,
                                 a.as_ptr() as *const _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zlacpy_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[c64], lda: i32,
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlacpy_work(matrix_layout.into(), uplo as c_char, m, n,
                                 a.as_ptr() as *const _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn clacp2_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f32], lda: i32,
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clacp2_work(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zlacp2_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, a: &[f64], lda: i32,
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlacp2_work(matrix_layout.into(), uplo as c_char, m, n, a.as_ptr(), lda,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zlag2c_work(matrix_layout: Layout, m: i32, n: i32, a: &[c64], lda: i32, sa: &mut [c32],
                   ldsa: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlag2c_work(matrix_layout.into(), m, n, a.as_ptr() as *const _, lda,
                                 sa.as_mut_ptr() as *mut _, ldsa)
    }
}

#[inline]
pub fn slag2d_work(matrix_layout: Layout, m: i32, n: i32, sa: &[f32], ldsa: i32, a: &mut [f64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slag2d_work(matrix_layout.into(), m, n, sa.as_ptr(), ldsa, a.as_mut_ptr(),
                                 lda)
    }
}

#[inline]
pub fn dlag2s_work(matrix_layout: Layout, m: i32, n: i32, a: &[f64], lda: i32, sa: &mut [f32],
                   ldsa: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlag2s_work(matrix_layout.into(), m, n, a.as_ptr(), lda, sa.as_mut_ptr(),
                                 ldsa)
    }
}

#[inline]
pub fn clag2z_work(matrix_layout: Layout, m: i32, n: i32, sa: &[c32], ldsa: i32, a: &mut [c64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clag2z_work(matrix_layout.into(), m, n, sa.as_ptr() as *const _, ldsa,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slagge_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f32],
                   a: &mut [f32], lda: i32, iseed: &mut [i32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slagge_work(matrix_layout.into(), m, n, kl, ku, d.as_ptr(), a.as_mut_ptr(),
                                 lda, iseed.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dlagge_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f64],
                   a: &mut [f64], lda: i32, iseed: &mut [i32], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlagge_work(matrix_layout.into(), m, n, kl, ku, d.as_ptr(), a.as_mut_ptr(),
                                 lda, iseed.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn clagge_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f32],
                   a: &mut [c32], lda: i32, iseed: &mut [i32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clagge_work(matrix_layout.into(), m, n, kl, ku, d.as_ptr(),
                                 a.as_mut_ptr() as *mut _, lda, iseed.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlagge_work(matrix_layout: Layout, m: i32, n: i32, kl: i32, ku: i32, d: &[f64],
                   a: &mut [c64], lda: i32, iseed: &mut [i32], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlagge_work(matrix_layout.into(), m, n, kl, ku, d.as_ptr(),
                                 a.as_mut_ptr() as *mut _, lda, iseed.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn claghe_work(matrix_layout: Layout, n: i32, k: i32, d: &[f32], a: &mut [c32], lda: i32,
                   iseed: &mut [i32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_claghe_work(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _,
                                 lda, iseed.as_mut_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlaghe_work(matrix_layout: Layout, n: i32, k: i32, d: &[f64], a: &mut [c64], lda: i32,
                   iseed: &mut [i32], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlaghe_work(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _,
                                 lda, iseed.as_mut_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slagsy_work(matrix_layout: Layout, n: i32, k: i32, d: &[f32], a: &mut [f32], lda: i32,
                   iseed: &mut [i32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slagsy_work(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr(), lda,
                                 iseed.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dlagsy_work(matrix_layout: Layout, n: i32, k: i32, d: &[f64], a: &mut [f64], lda: i32,
                   iseed: &mut [i32], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlagsy_work(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr(), lda,
                                 iseed.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn clagsy_work(matrix_layout: Layout, n: i32, k: i32, d: &[f32], a: &mut [c32], lda: i32,
                   iseed: &mut [i32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clagsy_work(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _,
                                 lda, iseed.as_mut_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlagsy_work(matrix_layout: Layout, n: i32, k: i32, d: &[f64], a: &mut [c64], lda: i32,
                   iseed: &mut [i32], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlagsy_work(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _,
                                 lda, iseed.as_mut_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slapmr_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f32], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slapmr_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn dlapmr_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f64], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlapmr_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn clapmr_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c32], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clapmr_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx,
                                 k)
    }
}

#[inline]
pub fn zlapmr_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c64], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlapmr_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx,
                                 k)
    }
}

#[inline]
pub fn slapmt_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f32], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slapmt_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn dlapmt_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f64], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlapmt_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn clapmt_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c32], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clapmt_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx,
                                 k)
    }
}

#[inline]
pub fn zlapmt_work(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c64], ldx: i32,
                   k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlapmt_work(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx,
                                 k)
    }
}

#[inline]
pub fn slartgp_work(f: f32, g: f32, cs: &mut [f32], sn: &mut [f32], r: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slartgp_work(f, g, cs.as_mut_ptr(), sn.as_mut_ptr(), r.as_mut_ptr())
    }
}

#[inline]
pub fn dlartgp_work(f: f64, g: f64, cs: &mut [f64], sn: &mut [f64], r: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlartgp_work(f, g, cs.as_mut_ptr(), sn.as_mut_ptr(), r.as_mut_ptr())
    }
}

#[inline]
pub fn slartgs_work(x: f32, y: f32, sigma: f32, cs: &mut [f32], sn: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slartgs_work(x, y, sigma, cs.as_mut_ptr(), sn.as_mut_ptr())
    }
}

#[inline]
pub fn dlartgs_work(x: f64, y: f64, sigma: f64, cs: &mut [f64], sn: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlartgs_work(x, y, sigma, cs.as_mut_ptr(), sn.as_mut_ptr())
    }
}

#[inline]
pub fn slapy2_work(x: f32, y: f32) -> f32 {
    unsafe {
        ffi::LAPACKE_slapy2_work(x, y)
    }
}

#[inline]
pub fn dlapy2_work(x: f64, y: f64) -> f64 {
    unsafe {
        ffi::LAPACKE_dlapy2_work(x, y)
    }
}

#[inline]
pub fn slapy3_work(x: f32, y: f32, z: f32) -> f32 {
    unsafe {
        ffi::LAPACKE_slapy3_work(x, y, z)
    }
}

#[inline]
pub fn dlapy3_work(x: f64, y: f64, z: f64) -> f64 {
    unsafe {
        ffi::LAPACKE_dlapy3_work(x, y, z)
    }
}

#[inline]
pub fn slamch_work(cmach: u8) -> f32 {
    unsafe {
        ffi::LAPACKE_slamch_work(cmach as c_char)
    }
}

#[inline]
pub fn dlamch_work(cmach: u8) -> f64 {
    unsafe {
        ffi::LAPACKE_dlamch_work(cmach as c_char)
    }
}

#[inline]
pub fn slange_work(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[f32], lda: i32,
                   work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_slange_work(matrix_layout.into(), norm as c_char, m, n, a.as_ptr(), lda,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn dlange_work(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[f64], lda: i32,
                   work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_dlange_work(matrix_layout.into(), norm as c_char, m, n, a.as_ptr(), lda,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn clange_work(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[c32], lda: i32,
                   work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_clange_work(matrix_layout.into(), norm as c_char, m, n,
                                 a.as_ptr() as *const _, lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn zlange_work(matrix_layout: Layout, norm: u8, m: i32, n: i32, a: &[c64], lda: i32,
                   work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_zlange_work(matrix_layout.into(), norm as c_char, m, n,
                                 a.as_ptr() as *const _, lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn clanhe_work(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c32], lda: i32,
                   work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_clanhe_work(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                                 a.as_ptr() as *const _, lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn zlanhe_work(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c64], lda: i32,
                   work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_zlanhe_work(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                                 a.as_ptr() as *const _, lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn slansy_work(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[f32], lda: i32,
                   work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_slansy_work(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                                 a.as_ptr(), lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn dlansy_work(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[f64], lda: i32,
                   work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_dlansy_work(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                                 a.as_ptr(), lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn clansy_work(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c32], lda: i32,
                   work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_clansy_work(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                                 a.as_ptr() as *const _, lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn zlansy_work(matrix_layout: Layout, norm: u8, uplo: u8, n: i32, a: &[c64], lda: i32,
                   work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_zlansy_work(matrix_layout.into(), norm as c_char, uplo as c_char, n,
                                 a.as_ptr() as *const _, lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn slantr_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[f32],
                   lda: i32, work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_slantr_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, m, n, a.as_ptr(), lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn dlantr_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[f64],
                   lda: i32, work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_dlantr_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, m, n, a.as_ptr(), lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn clantr_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[c32],
                   lda: i32, work: &mut [f32]) -> f32 {

    unsafe {
        ffi::LAPACKE_clantr_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, m, n, a.as_ptr() as *const _, lda,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn zlantr_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, m: i32, n: i32, a: &[c64],
                   lda: i32, work: &mut [f64]) -> f64 {

    unsafe {
        ffi::LAPACKE_zlantr_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, m, n, a.as_ptr() as *const _, lda,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn slarfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, v: &[f32], ldv: i32, t: &[f32], ldt: i32, c: &mut [f32],
                   ldc: i32, work: &mut [f32], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slarfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k, v.as_ptr(), ldv,
                                 t.as_ptr(), ldt, c.as_mut_ptr(), ldc, work.as_mut_ptr(), ldwork)
    }
}

#[inline]
pub fn dlarfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, v: &[f64], ldv: i32, t: &[f64], ldt: i32, c: &mut [f64],
                   ldc: i32, work: &mut [f64], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlarfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k, v.as_ptr(), ldv,
                                 t.as_ptr(), ldt, c.as_mut_ptr(), ldc, work.as_mut_ptr(), ldwork)
    }
}

#[inline]
pub fn clarfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, v: &[c32], ldv: i32, t: &[c32], ldt: i32, c: &mut [c32],
                   ldc: i32, work: &mut [c32], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clarfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k,
                                 v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _,
                                 ldwork)
    }
}

#[inline]
pub fn zlarfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, v: &[c64], ldv: i32, t: &[c64], ldt: i32, c: &mut [c64],
                   ldc: i32, work: &mut [c64], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlarfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k,
                                 v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _,
                                 ldwork)
    }
}

#[inline]
pub fn slarfg_work(n: i32, alpha: &mut f32, x: &mut [f32], incx: i32, tau: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slarfg_work(n, alpha, x.as_mut_ptr(), incx, tau.as_mut_ptr())
    }
}

#[inline]
pub fn dlarfg_work(n: i32, alpha: &mut f64, x: &mut [f64], incx: i32, tau: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlarfg_work(n, alpha, x.as_mut_ptr(), incx, tau.as_mut_ptr())
    }
}

#[inline]
pub fn clarfg_work(n: i32, alpha: &mut c32, x: &mut [c32], incx: i32, tau: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_clarfg_work(n, alpha as *mut _ as *mut _, x.as_mut_ptr() as *mut _, incx,
                                 tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlarfg_work(n: i32, alpha: &mut c64, x: &mut [c64], incx: i32, tau: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zlarfg_work(n, alpha as *mut _ as *mut _, x.as_mut_ptr() as *mut _, incx,
                                 tau.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slarft_work(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[f32],
                   ldv: i32, tau: &[f32], t: &mut [f32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slarft_work(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                                 v.as_ptr(), ldv, tau.as_ptr(), t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dlarft_work(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[f64],
                   ldv: i32, tau: &[f64], t: &mut [f64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlarft_work(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                                 v.as_ptr(), ldv, tau.as_ptr(), t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn clarft_work(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[c32],
                   ldv: i32, tau: &[c32], t: &mut [c32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clarft_work(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                                 v.as_ptr() as *const _, ldv, tau.as_ptr() as *const _,
                                 t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zlarft_work(matrix_layout: Layout, direct: u8, storev: u8, n: i32, k: i32, v: &[c64],
                   ldv: i32, tau: &[c64], t: &mut [c64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlarft_work(matrix_layout.into(), direct as c_char, storev as c_char, n, k,
                                 v.as_ptr() as *const _, ldv, tau.as_ptr() as *const _,
                                 t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn slarfx_work(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[f32], tau: f32,
                   c: &mut [f32], ldc: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slarfx_work(matrix_layout.into(), side as c_char, m, n, v.as_ptr(), tau,
                                 c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn dlarfx_work(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[f64], tau: f64,
                   c: &mut [f64], ldc: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlarfx_work(matrix_layout.into(), side as c_char, m, n, v.as_ptr(), tau,
                                 c.as_mut_ptr(), ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn clarfx_work(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[c32], tau: c32,
                   c: &mut [c32], ldc: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clarfx_work(matrix_layout.into(), side as c_char, m, n,
                                 v.as_ptr() as *const _, transmute(tau), c.as_mut_ptr() as *mut _,
                                 ldc, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlarfx_work(matrix_layout: Layout, side: u8, m: i32, n: i32, v: &[c64], tau: c64,
                   c: &mut [c64], ldc: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlarfx_work(matrix_layout.into(), side as c_char, m, n,
                                 v.as_ptr() as *const _, transmute(tau), c.as_mut_ptr() as *mut _,
                                 ldc, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slarnv_work(idist: i32, iseed: &mut [i32], n: i32, x: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slarnv_work(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr())
    }
}

#[inline]
pub fn dlarnv_work(idist: i32, iseed: &mut [i32], n: i32, x: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlarnv_work(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr())
    }
}

#[inline]
pub fn clarnv_work(idist: i32, iseed: &mut [i32], n: i32, x: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_clarnv_work(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlarnv_work(idist: i32, iseed: &mut [i32], n: i32, x: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zlarnv_work(idist, iseed.as_mut_ptr(), n, x.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slascl_work(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f32, cto: f32,
                   m: i32, n: i32, a: &mut [f32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slascl_work(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlascl_work(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f64, cto: f64,
                   m: i32, n: i32, a: &mut [f64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlascl_work(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn clascl_work(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f32, cto: f32,
                   m: i32, n: i32, a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clascl_work(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zlascl_work(matrix_layout: Layout, _type: u8, kl: i32, ku: i32, cfrom: f64, cto: f64,
                   m: i32, n: i32, a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlascl_work(matrix_layout.into(), _type as c_char, kl, ku, cfrom, cto, m, n,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slaset_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: f32, beta: f32,
                   a: &mut [f32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slaset_work(matrix_layout.into(), uplo as c_char, m, n, alpha, beta,
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlaset_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: f64, beta: f64,
                   a: &mut [f64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlaset_work(matrix_layout.into(), uplo as c_char, m, n, alpha, beta,
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn claset_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: c32, beta: c32,
                   a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_claset_work(matrix_layout.into(), uplo as c_char, m, n, transmute(alpha),
                                 transmute(beta), a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zlaset_work(matrix_layout: Layout, uplo: u8, m: i32, n: i32, alpha: c64, beta: c64,
                   a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlaset_work(matrix_layout.into(), uplo as c_char, m, n, transmute(alpha),
                                 transmute(beta), a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn slasrt_work(id: u8, n: i32, d: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slasrt_work(id as c_char, n, d.as_mut_ptr())
    }
}

#[inline]
pub fn dlasrt_work(id: u8, n: i32, d: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlasrt_work(id as c_char, n, d.as_mut_ptr())
    }
}

#[inline]
pub fn slaswp_work(matrix_layout: Layout, n: i32, a: &mut [f32], lda: i32, k1: i32, k2: i32,
                   ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slaswp_work(matrix_layout.into(), n, a.as_mut_ptr(), lda, k1, k2,
                                 ipiv.as_ptr(), incx)
    }
}

#[inline]
pub fn dlaswp_work(matrix_layout: Layout, n: i32, a: &mut [f64], lda: i32, k1: i32, k2: i32,
                   ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlaswp_work(matrix_layout.into(), n, a.as_mut_ptr(), lda, k1, k2,
                                 ipiv.as_ptr(), incx)
    }
}

#[inline]
pub fn claswp_work(matrix_layout: Layout, n: i32, a: &mut [c32], lda: i32, k1: i32, k2: i32,
                   ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_claswp_work(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda, k1, k2,
                                 ipiv.as_ptr(), incx)
    }
}

#[inline]
pub fn zlaswp_work(matrix_layout: Layout, n: i32, a: &mut [c64], lda: i32, k1: i32, k2: i32,
                   ipiv: &[i32], incx: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlaswp_work(matrix_layout.into(), n, a.as_mut_ptr() as *mut _, lda, k1, k2,
                                 ipiv.as_ptr(), incx)
    }
}

#[inline]
pub fn slatms_work(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
                   d: &mut [f32], mode: i32, cond: f32, dmax: f32, kl: i32, ku: i32, pack: u8,
                   a: &mut [f32], lda: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slatms_work(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                                 sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                                 pack as c_char, a.as_mut_ptr(), lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn dlatms_work(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
                   d: &mut [f64], mode: i32, cond: f64, dmax: f64, kl: i32, ku: i32, pack: u8,
                   a: &mut [f64], lda: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlatms_work(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                                 sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                                 pack as c_char, a.as_mut_ptr(), lda, work.as_mut_ptr())
    }
}

#[inline]
pub fn clatms_work(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
                   d: &mut [f32], mode: i32, cond: f32, dmax: f32, kl: i32, ku: i32, pack: u8,
                   a: &mut [c32], lda: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clatms_work(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                                 sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                                 pack as c_char, a.as_mut_ptr() as *mut _, lda,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zlatms_work(matrix_layout: Layout, m: i32, n: i32, dist: u8, iseed: &mut [i32], sym: u8,
                   d: &mut [f64], mode: i32, cond: f64, dmax: f64, kl: i32, ku: i32, pack: u8,
                   a: &mut [c64], lda: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlatms_work(matrix_layout.into(), m, n, dist as c_char, iseed.as_mut_ptr(),
                                 sym as c_char, d.as_mut_ptr(), mode, cond, dmax, kl, ku,
                                 pack as c_char, a.as_mut_ptr() as *mut _, lda,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn slauum_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_slauum_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dlauum_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dlauum_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn clauum_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_clauum_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda)
    }
}

#[inline]
pub fn zlauum_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zlauum_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda)
    }
}

#[inline]
pub fn sopgtr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], tau: &[f32], q: &mut f32,
                   ldq: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sopgtr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 tau.as_ptr(), q, ldq, work.as_mut_ptr())
    }
}

#[inline]
pub fn dopgtr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], tau: &[f64], q: &mut f64,
                   ldq: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dopgtr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 tau.as_ptr(), q, ldq, work.as_mut_ptr())
    }
}

#[inline]
pub fn sopmtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32,
                   ap: &[f32], tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sopmtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, ap.as_ptr(), tau.as_ptr(), c.as_mut_ptr(),
                                 ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn dopmtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32,
                   ap: &[f64], tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dopmtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, ap.as_ptr(), tau.as_ptr(), c.as_mut_ptr(),
                                 ldc, work.as_mut_ptr())
    }
}

#[inline]
pub fn sorgbr_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [f32],
                   lda: i32, tau: &[f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgbr_work(matrix_layout.into(), vect as c_char, m, n, k, a.as_mut_ptr(),
                                 lda, tau.as_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorgbr_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [f64],
                   lda: i32, tau: &[f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgbr_work(matrix_layout.into(), vect as c_char, m, n, k, a.as_mut_ptr(),
                                 lda, tau.as_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorghr_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f32], lda: i32,
                   tau: &[f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorghr_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda,
                                 tau.as_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorghr_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [f64], lda: i32,
                   tau: &[f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorghr_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr(), lda,
                                 tau.as_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorglq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
                   tau: &[f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorglq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorglq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
                   tau: &[f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorglq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorgql_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
                   tau: &[f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgql_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorgql_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
                   tau: &[f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgql_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorgqr_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
                   tau: &[f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgqr_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorgqr_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
                   tau: &[f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgqr_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorgrq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f32], lda: i32,
                   tau: &[f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgrq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorgrq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [f64], lda: i32,
                   tau: &[f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgrq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr(), lda, tau.as_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorgtr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, tau: &[f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorgtr_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 tau.as_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorgtr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, tau: &[f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorgtr_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 tau.as_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormbr_work(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
                   a: &[f32], lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormbr_work(matrix_layout.into(), vect as c_char, side as c_char,
                                 trans as c_char, m, n, k, a.as_ptr(), lda, tau.as_ptr(),
                                 c.as_mut_ptr(), ldc, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormbr_work(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
                   a: &[f64], lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormbr_work(matrix_layout.into(), vect as c_char, side as c_char,
                                 trans as c_char, m, n, k, a.as_ptr(), lda, tau.as_ptr(),
                                 c.as_mut_ptr(), ldc, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormhr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
                   a: &[f32], lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormhr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo,
                                 ihi, a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormhr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
                   a: &[f64], lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormhr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo,
                                 ihi, a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormlq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
                   lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormlq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormlq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
                   lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormlq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormql_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
                   lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormql_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormql_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
                   lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormql_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormqr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
                   lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormqr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormqr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
                   lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormqr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormrq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f32],
                   lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormrq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormrq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[f64],
                   lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormrq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormrz_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                   a: &[f32], lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormrz_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormrz_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                   a: &[f64], lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormrz_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                                 a.as_ptr(), lda, tau.as_ptr(), c.as_mut_ptr(), ldc,
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sormtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[f32],
                   lda: i32, tau: &[f32], c: &mut [f32], ldc: i32, work: &mut [f32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sormtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, a.as_ptr(), lda, tau.as_ptr(),
                                 c.as_mut_ptr(), ldc, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dormtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[f64],
                   lda: i32, tau: &[f64], c: &mut [f64], ldc: i32, work: &mut [f64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dormtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, a.as_ptr(), lda, tau.as_ptr(),
                                 c.as_mut_ptr(), ldc, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn spbcon_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f32], ldab: i32,
                   anorm: f32, rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbcon_work(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab,
                                 anorm, rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dpbcon_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f64], ldab: i32,
                   anorm: f64, rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbcon_work(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab,
                                 anorm, rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cpbcon_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c32], ldab: i32,
                   anorm: f32, rcond: &mut f32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbcon_work(matrix_layout.into(), uplo as c_char, n, kd,
                                 ab.as_ptr() as *const _, ldab, anorm, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zpbcon_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c64], ldab: i32,
                   anorm: f64, rcond: &mut f64, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbcon_work(matrix_layout.into(), uplo as c_char, n, kd,
                                 ab.as_ptr() as *const _, ldab, anorm, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spbequ_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f32], ldab: i32,
                   s: &mut [f32], scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbequ_work(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab,
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dpbequ_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[f64], ldab: i32,
                   s: &mut [f64], scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbequ_work(matrix_layout.into(), uplo as c_char, n, kd, ab.as_ptr(), ldab,
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cpbequ_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c32], ldab: i32,
                   s: &mut [f32], scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbequ_work(matrix_layout.into(), uplo as c_char, n, kd,
                                 ab.as_ptr() as *const _, ldab, s.as_mut_ptr(), scond.as_mut_ptr(),
                                 amax.as_mut_ptr())
    }
}

#[inline]
pub fn zpbequ_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &[c64], ldab: i32,
                   s: &mut [f64], scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbequ_work(matrix_layout.into(), uplo as c_char, n, kd,
                                 ab.as_ptr() as *const _, ldab, s.as_mut_ptr(), scond.as_mut_ptr(),
                                 amax.as_mut_ptr())
    }
}

#[inline]
pub fn spbrfs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f32],
                   ldab: i32, afb: &[f32], ldafb: i32, b: &[f32], ldb: i32, x: &mut [f32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbrfs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(),
                                 ldab, afb.as_ptr(), ldafb, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dpbrfs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f64],
                   ldab: i32, afb: &[f64], ldafb: i32, b: &[f64], ldb: i32, x: &mut [f64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbrfs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(),
                                 ldab, afb.as_ptr(), ldafb, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cpbrfs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c32],
                   ldab: i32, afb: &[c32], ldafb: i32, b: &[c32], ldb: i32, x: &mut [c32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbrfs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                                 ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zpbrfs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c64],
                   ldab: i32, afb: &[c64], ldafb: i32, b: &[c64], ldb: i32, x: &mut [c64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbrfs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                                 ab.as_ptr() as *const _, ldab, afb.as_ptr() as *const _, ldafb,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spbstf_work(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [f32],
                   ldbb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbstf_work(matrix_layout.into(), uplo as c_char, n, kb, bb.as_mut_ptr(),
                                 ldbb)
    }
}

#[inline]
pub fn dpbstf_work(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [f64],
                   ldbb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbstf_work(matrix_layout.into(), uplo as c_char, n, kb, bb.as_mut_ptr(),
                                 ldbb)
    }
}

#[inline]
pub fn cpbstf_work(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [c32],
                   ldbb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbstf_work(matrix_layout.into(), uplo as c_char, n, kb,
                                 bb.as_mut_ptr() as *mut _, ldbb)
    }
}

#[inline]
pub fn zpbstf_work(matrix_layout: Layout, uplo: u8, n: i32, kb: i32, bb: &mut [c64],
                   ldbb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbstf_work(matrix_layout.into(), uplo as c_char, n, kb,
                                 bb.as_mut_ptr() as *mut _, ldbb)
    }
}

#[inline]
pub fn spbsv_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [f32],
                  ldab: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbsv_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_mut_ptr(),
                                ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpbsv_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [f64],
                  ldab: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbsv_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_mut_ptr(),
                                ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpbsv_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [c32],
                  ldab: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbsv_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                                ab.as_mut_ptr() as *mut _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpbsv_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &mut [c64],
                  ldab: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbsv_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                                ab.as_mut_ptr() as *mut _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spbsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
                   ab: &mut [f32], ldab: i32, afb: &mut [f32], ldafb: i32, equed: &mut u8,
                   s: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spbsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                                 ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dpbsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
                   ab: &mut [f64], ldab: i32, afb: &mut [f64], ldafb: i32, equed: &mut u8,
                   s: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                                 ab.as_mut_ptr(), ldab, afb.as_mut_ptr(), ldafb,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cpbsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
                   ab: &mut [c32], ldab: i32, afb: &mut [c32], ldafb: i32, equed: &mut u8,
                   s: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                                 ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _,
                                 ldafb, equed as *mut _ as *mut _, s.as_mut_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zpbsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, kd: i32, nrhs: i32,
                   ab: &mut [c64], ldab: i32, afb: &mut [c64], ldafb: i32, equed: &mut u8,
                   s: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, kd, nrhs,
                                 ab.as_mut_ptr() as *mut _, ldab, afb.as_mut_ptr() as *mut _,
                                 ldafb, equed as *mut _ as *mut _, s.as_mut_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spbtrf_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [f32],
                   ldab: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbtrf_work(matrix_layout.into(), uplo as c_char, n, kd, ab.as_mut_ptr(),
                                 ldab)
    }
}

#[inline]
pub fn dpbtrf_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [f64],
                   ldab: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbtrf_work(matrix_layout.into(), uplo as c_char, n, kd, ab.as_mut_ptr(),
                                 ldab)
    }
}

#[inline]
pub fn cpbtrf_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [c32],
                   ldab: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbtrf_work(matrix_layout.into(), uplo as c_char, n, kd,
                                 ab.as_mut_ptr() as *mut _, ldab)
    }
}

#[inline]
pub fn zpbtrf_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, ab: &mut [c64],
                   ldab: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbtrf_work(matrix_layout.into(), uplo as c_char, n, kd,
                                 ab.as_mut_ptr() as *mut _, ldab)
    }
}

#[inline]
pub fn spbtrs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f32],
                   ldab: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spbtrs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(),
                                 ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpbtrs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[f64],
                   ldab: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpbtrs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs, ab.as_ptr(),
                                 ldab, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpbtrs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c32],
                   ldab: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpbtrs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                                 ab.as_ptr() as *const _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpbtrs_work(matrix_layout: Layout, uplo: u8, n: i32, kd: i32, nrhs: i32, ab: &[c64],
                   ldab: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpbtrs_work(matrix_layout.into(), uplo as c_char, n, kd, nrhs,
                                 ab.as_ptr() as *const _, ldab, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spftrf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spftrf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr())
    }
}

#[inline]
pub fn dpftrf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpftrf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr())
    }
}

#[inline]
pub fn cpftrf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpftrf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpftrf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpftrf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spftri_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spftri_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr())
    }
}

#[inline]
pub fn dpftri_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpftri_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr())
    }
}

#[inline]
pub fn cpftri_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpftri_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpftri_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpftri_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spftrs_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[f32],
                   b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spftrs_work(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpftrs_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[f64],
                   b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpftrs_work(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpftrs_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[c32],
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpftrs_work(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpftrs_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, nrhs: i32, a: &[c64],
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpftrs_work(matrix_layout.into(), transr as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spocon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32, anorm: f32,
                   rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spocon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda, anorm,
                                 rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dpocon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32, anorm: f64,
                   rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpocon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda, anorm,
                                 rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cpocon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, anorm: f32,
                   rcond: &mut f32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpocon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, anorm, rcond, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zpocon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, anorm: f64,
                   rcond: &mut f64, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpocon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, anorm, rcond, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spoequ_work(matrix_layout: Layout, n: i32, a: &[f32], lda: i32, s: &mut [f32],
                   scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spoequ_work(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                                 scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dpoequ_work(matrix_layout: Layout, n: i32, a: &[f64], lda: i32, s: &mut [f64],
                   scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpoequ_work(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                                 scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cpoequ_work(matrix_layout: Layout, n: i32, a: &[c32], lda: i32, s: &mut [f32],
                   scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpoequ_work(matrix_layout.into(), n, a.as_ptr() as *const _, lda,
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zpoequ_work(matrix_layout: Layout, n: i32, a: &[c64], lda: i32, s: &mut [f64],
                   scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpoequ_work(matrix_layout.into(), n, a.as_ptr() as *const _, lda,
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn spoequb_work(matrix_layout: Layout, n: i32, a: &[f32], lda: i32, s: &mut [f32],
                    scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spoequb_work(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                                  scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dpoequb_work(matrix_layout: Layout, n: i32, a: &[f64], lda: i32, s: &mut [f64],
                    scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpoequb_work(matrix_layout.into(), n, a.as_ptr(), lda, s.as_mut_ptr(),
                                  scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cpoequb_work(matrix_layout: Layout, n: i32, a: &[c32], lda: i32, s: &mut [f32],
                    scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpoequb_work(matrix_layout.into(), n, a.as_ptr() as *const _, lda,
                                  s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zpoequb_work(matrix_layout: Layout, n: i32, a: &[c64], lda: i32, s: &mut [f64],
                    scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpoequb_work(matrix_layout.into(), n, a.as_ptr() as *const _, lda,
                                  s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn sporfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   af: &[f32], ldaf: i32, b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sporfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 af.as_ptr(), ldaf, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dporfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   af: &[f64], ldaf: i32, b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dporfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 af.as_ptr(), ldaf, b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cporfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   af: &[c32], ldaf: i32, b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cporfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zporfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   af: &[c64], ldaf: i32, b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zporfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sporfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f32],
                    lda: i32, af: &[f32], ldaf: i32, s: &[f32], b: &[f32], ldb: i32, x: &mut [f32],
                    ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sporfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr(), lda, af.as_ptr(), ldaf, s.as_ptr(), b.as_ptr(), ldb,
                                  x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dporfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f64],
                    lda: i32, af: &[f64], ldaf: i32, s: &[f64], b: &[f64], ldb: i32, x: &mut [f64],
                    ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dporfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr(), lda, af.as_ptr(), ldaf, s.as_ptr(), b.as_ptr(), ldb,
                                  x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cporfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c32],
                    lda: i32, af: &[c32], ldaf: i32, s: &[f32], b: &[c32], ldb: i32, x: &mut [c32],
                    ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cporfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  s.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zporfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c64],
                    lda: i32, af: &[c64], ldaf: i32, s: &[f64], b: &[c64], ldb: i32, x: &mut [c64],
                    ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zporfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  s.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sposv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                  b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sposv_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                                b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dposv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                  b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dposv_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                                b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cposv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                  b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cposv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zposv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                  b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zposv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn dsposv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, work: &mut [f64],
                   swork: &mut [f32], iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsposv_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(),
                                 lda, b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, work.as_mut_ptr(),
                                 swork.as_mut_ptr(), iter.as_mut_ptr())
    }
}

#[inline]
pub fn zcposv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, work: &mut [c64],
                   swork: &mut [c32], rwork: &mut [f64], iter: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zcposv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, work.as_mut_ptr() as *mut _,
                                 swork.as_mut_ptr() as *mut _, rwork.as_mut_ptr(),
                                 iter.as_mut_ptr())
    }
}

#[inline]
pub fn sposvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f32],
                   lda: i32, af: &mut [f32], ldaf: i32, equed: &mut u8, s: &mut [f32],
                   b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sposvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dposvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f64],
                   lda: i32, af: &mut [f64], ldaf: i32, equed: &mut u8, s: &mut [f64],
                   b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dposvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cposvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
                   lda: i32, af: &mut [c32], ldaf: i32, equed: &mut u8, s: &mut [f32],
                   b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cposvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zposvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
                   lda: i32, af: &mut [c64], ldaf: i32, equed: &mut u8, s: &mut [f64],
                   b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zposvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sposvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f32],
                    lda: i32, af: &mut [f32], ldaf: i32, equed: &mut u8, s: &mut [f32],
                    b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32, rcond: &mut f32,
                    rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sposvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf,
                                  equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                  x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(),
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dposvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f64],
                    lda: i32, af: &mut [f64], ldaf: i32, equed: &mut u8, s: &mut [f64],
                    b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32, rcond: &mut f64,
                    rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dposvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf,
                                  equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                  x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(),
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cposvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
                    lda: i32, af: &mut [c32], ldaf: i32, equed: &mut u8, s: &mut [f32],
                    b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32, rcond: &mut f32,
                    rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cposvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  equed as *mut _ as *mut _, s.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zposvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
                    lda: i32, af: &mut [c64], ldaf: i32, equed: &mut u8, s: &mut [f64],
                    b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32, rcond: &mut f64,
                    rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zposvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  equed as *mut _ as *mut _, s.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spotrf2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spotrf2_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dpotrf2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpotrf2_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn cpotrf2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpotrf2_work(matrix_layout.into(), uplo as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zpotrf2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpotrf2_work(matrix_layout.into(), uplo as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn spotrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spotrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dpotrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpotrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn cpotrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpotrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda)
    }
}

#[inline]
pub fn zpotrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpotrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda)
    }
}

#[inline]
pub fn spotri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_spotri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dpotri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dpotri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn cpotri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cpotri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda)
    }
}

#[inline]
pub fn zpotri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zpotri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda)
    }
}

#[inline]
pub fn spotrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spotrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpotrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpotrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpotrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpotrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpotrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpotrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sppcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], anorm: f32,
                   rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sppcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), anorm,
                                 rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dppcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], anorm: f64,
                   rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dppcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(), anorm,
                                 rcond, work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cppcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], anorm: f32,
                   rcond: &mut f32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cppcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 anorm, rcond, work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zppcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], anorm: f64,
                   rcond: &mut f64, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zppcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 anorm, rcond, work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sppequ_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], s: &mut [f32],
                   scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sppequ_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn dppequ_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], s: &mut [f64],
                   scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dppequ_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn cppequ_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], s: &mut [f32],
                   scond: &mut [f32], amax: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cppequ_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn zppequ_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], s: &mut [f64],
                   scond: &mut [f64], amax: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zppequ_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr())
    }
}

#[inline]
pub fn spprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], afp: &[f32],
                   b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 afp.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dpprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], afp: &[f64],
                   b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 afp.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cpprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], afp: &[c32],
                   b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_ptr() as *const _,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zpprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], afp: &[c64],
                   b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_ptr() as *const _,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sppsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f32],
                  b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sppsv_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                                b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dppsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f64],
                  b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dppsv_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                                b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cppsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32],
                  b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cppsv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                ap.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zppsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64],
                  b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zppsv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                ap.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sppsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [f32],
                   afp: &mut [f32], equed: &mut u8, s: &mut [f32], b: &mut [f32], ldb: i32,
                   x: &mut [f32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sppsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_mut_ptr(), afp.as_mut_ptr(), equed as *mut _ as *mut _,
                                 s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dppsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [f64],
                   afp: &mut [f64], equed: &mut u8, s: &mut [f64], b: &mut [f64], ldb: i32,
                   x: &mut [f64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dppsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_mut_ptr(), afp.as_mut_ptr(), equed as *mut _ as *mut _,
                                 s.as_mut_ptr(), b.as_mut_ptr(), ldb, x.as_mut_ptr(), ldx, rcond,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cppsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32],
                   afp: &mut [c32], equed: &mut u8, s: &mut [f32], b: &mut [c32], ldb: i32,
                   x: &mut [c32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cppsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_mut_ptr() as *mut _, afp.as_mut_ptr() as *mut _,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zppsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64],
                   afp: &mut [c64], equed: &mut u8, s: &mut [f64], b: &mut [c64], ldb: i32,
                   x: &mut [c64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zppsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_mut_ptr() as *mut _, afp.as_mut_ptr() as *mut _,
                                 equed as *mut _ as *mut _, s.as_mut_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spptrf_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn dpptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpptrf_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn cpptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpptrf_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpptrf_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spptri_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn dpptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpptri_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr())
    }
}

#[inline]
pub fn cpptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpptri_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpptri_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], b: &mut [f32],
                   ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], b: &mut [f64],
                   ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], b: &mut [c32],
                   ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], b: &mut [c64],
                   ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn spstrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                   piv: &mut [i32], rank: &mut i32, tol: f32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spstrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 piv.as_mut_ptr(), rank, tol, work.as_mut_ptr())
    }
}

#[inline]
pub fn dpstrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                   piv: &mut [i32], rank: &mut i32, tol: f64, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpstrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 piv.as_mut_ptr(), rank, tol, work.as_mut_ptr())
    }
}

#[inline]
pub fn cpstrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   piv: &mut [i32], rank: &mut i32, tol: f32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpstrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, piv.as_mut_ptr(), rank, tol, work.as_mut_ptr())
    }
}

#[inline]
pub fn zpstrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   piv: &mut [i32], rank: &mut i32, tol: f64, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpstrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, piv.as_mut_ptr(), rank, tol, work.as_mut_ptr())
    }
}

#[inline]
pub fn sptcon_work(n: i32, d: &[f32], e: &[f32], anorm: f32, rcond: &mut f32,
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sptcon_work(n, d.as_ptr(), e.as_ptr(), anorm, rcond, work.as_mut_ptr())
    }
}

#[inline]
pub fn dptcon_work(n: i32, d: &[f64], e: &[f64], anorm: f64, rcond: &mut f64,
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dptcon_work(n, d.as_ptr(), e.as_ptr(), anorm, rcond, work.as_mut_ptr())
    }
}

#[inline]
pub fn cptcon_work(n: i32, d: &[f32], e: &[c32], anorm: f32, rcond: &mut f32,
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cptcon_work(n, d.as_ptr(), e.as_ptr() as *const _, anorm, rcond,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn zptcon_work(n: i32, d: &[f64], e: &[c64], anorm: f64, rcond: &mut f64,
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zptcon_work(n, d.as_ptr(), e.as_ptr() as *const _, anorm, rcond,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn spteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_spteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn dpteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dpteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn cpteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [c32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cpteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn zpteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [c64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zpteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn sptrfs_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f32], e: &[f32], df: &[f32],
                   ef: &[f32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sptrfs_work(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(),
                                 df.as_ptr(), ef.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dptrfs_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f64], e: &[f64], df: &[f64],
                   ef: &[f64], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dptrfs_work(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(),
                                 df.as_ptr(), ef.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn cptrfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f32], e: &[c32],
                   df: &[f32], ef: &[c32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cptrfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr() as *const _, df.as_ptr(), ef.as_ptr() as *const _,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zptrfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f64], e: &[c64],
                   df: &[f64], ef: &[c64], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zptrfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr() as *const _, df.as_ptr(), ef.as_ptr() as *const _,
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sptsv_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f32], e: &mut [f32],
                  b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sptsv_work(matrix_layout.into(), n, nrhs, d.as_mut_ptr(), e.as_mut_ptr(),
                                b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dptsv_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f64], e: &mut [f64],
                  b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dptsv_work(matrix_layout.into(), n, nrhs, d.as_mut_ptr(), e.as_mut_ptr(),
                                b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cptsv_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f32], e: &mut [c32],
                  b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cptsv_work(matrix_layout.into(), n, nrhs, d.as_mut_ptr(),
                                e.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zptsv_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &mut [f64], e: &mut [c64],
                  b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zptsv_work(matrix_layout.into(), n, nrhs, d.as_mut_ptr(),
                                e.as_mut_ptr() as *mut _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sptsvx_work(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f32], e: &[f32],
                   df: &mut [f32], ef: &mut [f32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sptsvx_work(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr(), df.as_mut_ptr(), ef.as_mut_ptr(), b.as_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn dptsvx_work(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f64], e: &[f64],
                   df: &mut [f64], ef: &mut [f64], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dptsvx_work(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr(), df.as_mut_ptr(), ef.as_mut_ptr(), b.as_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn cptsvx_work(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f32], e: &[c32],
                   df: &mut [f32], ef: &mut [c32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cptsvx_work(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr() as *const _, df.as_mut_ptr(),
                                 ef.as_mut_ptr() as *mut _, b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zptsvx_work(matrix_layout: Layout, fact: u8, n: i32, nrhs: i32, d: &[f64], e: &[c64],
                   df: &mut [f64], ef: &mut [c64], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zptsvx_work(matrix_layout.into(), fact as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr() as *const _, df.as_mut_ptr(),
                                 ef.as_mut_ptr() as *mut _, b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn spttrf_work(n: i32, d: &mut [f32], e: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_spttrf_work(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn dpttrf_work(n: i32, d: &mut [f64], e: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dpttrf_work(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn cpttrf_work(n: i32, d: &mut [f32], e: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_cpttrf_work(n, d.as_mut_ptr(), e.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zpttrf_work(n: i32, d: &mut [f64], e: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_zpttrf_work(n, d.as_mut_ptr(), e.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn spttrs_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f32], e: &[f32], b: &mut [f32],
                   ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_spttrs_work(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(),
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dpttrs_work(matrix_layout: Layout, n: i32, nrhs: i32, d: &[f64], e: &[f64], b: &mut [f64],
                   ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dpttrs_work(matrix_layout.into(), n, nrhs, d.as_ptr(), e.as_ptr(),
                                 b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cpttrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f32], e: &[c32],
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cpttrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zpttrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, d: &[f64], e: &[c64],
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zpttrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, d.as_ptr(),
                                 e.as_ptr() as *const _, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ssbev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f32],
                  ldab: i32, w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                work.as_mut_ptr())
    }
}

#[inline]
pub fn dsbev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f64],
                  ldab: i32, w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                work.as_mut_ptr())
    }
}

#[inline]
pub fn ssbevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f32],
                   ldab: i32, w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dsbevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f64],
                   ldab: i32, w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr(), ldab, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ssbevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
                   ab: &mut [f32], ldab: i32, q: &mut f32, ldq: i32, vl: f32, vu: f32, il: i32,
                   iu: i32, abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [f32], ldz: i32,
                   work: &mut [f32], iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, kd, ab.as_mut_ptr(), ldab, q, ldq, vl, vu, il,
                                 iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dsbevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, kd: i32,
                   ab: &mut [f64], ldab: i32, q: &mut f64, ldq: i32, vl: f64, vu: f64, il: i32,
                   iu: i32, abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [f64], ldz: i32,
                   work: &mut [f64], iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, kd, ab.as_mut_ptr(), ldab, q, ldq, vl, vu, il,
                                 iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn ssbgst_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [f32], ldab: i32, bb: &[f32], ldbb: i32, x: &mut [f32], ldx: i32,
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgst_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr(), ldab, bb.as_ptr(), ldbb, x.as_mut_ptr(), ldx,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn dsbgst_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [f64], ldab: i32, bb: &[f64], ldbb: i32, x: &mut [f64], ldx: i32,
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgst_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr(), ldab, bb.as_ptr(), ldbb, x.as_mut_ptr(), ldx,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn ssbgv_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                  ab: &mut [f32], ldab: i32, bb: &mut [f32], ldbb: i32, w: &mut [f32],
                  z: &mut [f32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgv_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                                z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn dsbgv_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                  ab: &mut [f64], ldab: i32, bb: &mut [f64], ldbb: i32, w: &mut [f64],
                  z: &mut [f64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgv_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                                z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn ssbgvd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [f32], ldab: i32, bb: &mut [f32], ldbb: i32, w: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgvd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 liwork)
    }
}

#[inline]
pub fn dsbgvd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [f64], ldab: i32, bb: &mut [f64], ldbb: i32, w: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgvd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n, ka, kb,
                                 ab.as_mut_ptr(), ldab, bb.as_mut_ptr(), ldbb, w.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 liwork)
    }
}

#[inline]
pub fn ssbgvx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [f32], ldab: i32, bb: &mut [f32], ldbb: i32, q: &mut f32, ldq: i32,
                   vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbgvx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ka, kb, ab.as_mut_ptr(), ldab, bb.as_mut_ptr(),
                                 ldbb, q, ldq, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dsbgvx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ka: i32, kb: i32,
                   ab: &mut [f64], ldab: i32, bb: &mut [f64], ldbb: i32, q: &mut f64, ldq: i32,
                   vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbgvx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ka, kb, ab.as_mut_ptr(), ldab, bb.as_mut_ptr(),
                                 ldbb, q, ldq, vl, vu, il, iu, abstol, m, w.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, work.as_mut_ptr(), iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn ssbtrd_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f32],
                   ldab: i32, d: &mut [f32], e: &mut [f32], q: &mut f32, ldq: i32,
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssbtrd_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn dsbtrd_work(matrix_layout: Layout, vect: u8, uplo: u8, n: i32, kd: i32, ab: &mut [f64],
                   ldab: i32, d: &mut [f64], e: &mut [f64], q: &mut f64, ldq: i32,
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsbtrd_work(matrix_layout.into(), vect as c_char, uplo as c_char, n, kd,
                                 ab.as_mut_ptr(), ldab, d.as_mut_ptr(), e.as_mut_ptr(), q, ldq,
                                 work.as_mut_ptr())
    }
}

#[inline]
pub fn ssfrk_work(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32,
                  alpha: f32, a: &[f32], lda: i32, beta: f32, c: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssfrk_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                trans as c_char, n, k, alpha, a.as_ptr(), lda, beta,
                                c.as_mut_ptr())
    }
}

#[inline]
pub fn dsfrk_work(matrix_layout: Layout, transr: u8, uplo: u8, trans: u8, n: i32, k: i32,
                  alpha: f64, a: &[f64], lda: i32, beta: f64, c: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsfrk_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                trans as c_char, n, k, alpha, a.as_ptr(), lda, beta,
                                c.as_mut_ptr())
    }
}

#[inline]
pub fn sspcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], ipiv: &[i32], anorm: f32,
                   rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dspcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], ipiv: &[i32], anorm: f64,
                   rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cspcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], ipiv: &[i32], anorm: f32,
                   rcond: &mut f32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cspcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zspcon_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], ipiv: &[i32], anorm: f64,
                   rcond: &mut f64, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zspcon_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sspev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f32], w: &mut [f32],
                  z: &mut [f32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                work.as_mut_ptr())
    }
}

#[inline]
pub fn dspev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f64], w: &mut [f64],
                  z: &mut [f64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                work.as_mut_ptr())
    }
}

#[inline]
pub fn sspevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f32],
                   w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dspevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, ap: &mut [f64],
                   w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn sspevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [f32],
                   vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32, w: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dspevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, ap: &mut [f64],
                   vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32, w: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn sspgst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [f32],
                   bp: &[f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgst_work(matrix_layout.into(), itype, uplo as c_char, n, ap.as_mut_ptr(),
                                 bp.as_ptr())
    }
}

#[inline]
pub fn dspgst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, ap: &mut [f64],
                   bp: &[f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgst_work(matrix_layout.into(), itype, uplo as c_char, n, ap.as_mut_ptr(),
                                 bp.as_ptr())
    }
}

#[inline]
pub fn sspgv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f32],
                  bp: &mut [f32], w: &mut [f32], z: &mut [f32], ldz: i32,
                  work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(),
                                ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn dspgv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f64],
                  bp: &mut [f64], w: &mut [f64], z: &mut [f64], ldz: i32,
                  work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(),
                                ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn sspgvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f32],
                   bp: &mut [f32], w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(),
                                 ldz, work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dspgvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, ap: &mut [f64],
                   bp: &mut [f64], w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 ap.as_mut_ptr(), bp.as_mut_ptr(), w.as_mut_ptr(), z.as_mut_ptr(),
                                 ldz, work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn sspgvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   ap: &mut [f32], bp: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32,
                   m: &mut i32, w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32],
                   iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspgvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr(), bp.as_mut_ptr(), vl, vu, il,
                                 iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dspgvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   ap: &mut [f64], bp: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64,
                   m: &mut i32, w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64],
                   iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspgvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, ap.as_mut_ptr(), bp.as_mut_ptr(), vl, vu, il,
                                 iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn ssprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], afp: &[f32],
                   ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 afp.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], afp: &[f64],
                   ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 afp.as_ptr(), ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(), ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn csprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], afp: &[c32],
                   ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_ptr() as *const _, ipiv.as_ptr(),
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zsprfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], afp: &[c64],
                   ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsprfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_ptr() as *const _, ipiv.as_ptr(),
                                 b.as_ptr() as *const _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn sspsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f32],
                  ipiv: &mut [i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sspsv_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dspsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [f64],
                  ipiv: &mut [i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dspsv_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_mut_ptr(),
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn cspsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c32],
                  ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cspsv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zspsv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &mut [c64],
                  ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zspsv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sspsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[f32],
                   afp: &mut [f32], ipiv: &mut [i32], b: &[f32], ldb: i32, x: &mut [f32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sspsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_ptr(), afp.as_mut_ptr(), ipiv.as_mut_ptr(), b.as_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dspsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[f64],
                   afp: &mut [f64], ipiv: &mut [i32], b: &[f64], ldb: i32, x: &mut [f64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dspsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_ptr(), afp.as_mut_ptr(), ipiv.as_mut_ptr(), b.as_ptr(), ldb,
                                 x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cspsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c32],
                   afp: &mut [c32], ipiv: &mut [i32], b: &[c32], ldb: i32, x: &mut [c32], ldx: i32,
                   rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cspsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zspsvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, ap: &[c64],
                   afp: &mut [c64], ipiv: &mut [i32], b: &[c64], ldb: i32, x: &mut [c64], ldx: i32,
                   rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zspsvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, afp.as_mut_ptr() as *mut _,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ssptrd_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32], d: &mut [f32],
                   e: &mut [f32], tau: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssptrd_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                                 d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr())
    }
}

#[inline]
pub fn dsptrd_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64], d: &mut [f64],
                   e: &mut [f64], tau: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsptrd_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                                 d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr())
    }
}

#[inline]
pub fn ssptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssptrf_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dsptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsptrf_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn csptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csptrf_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zsptrf_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64],
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsptrf_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn ssptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f32], ipiv: &[i32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssptri_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                                 ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dsptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [f64], ipiv: &[i32],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsptri_work(matrix_layout.into(), uplo as c_char, n, ap.as_mut_ptr(),
                                 ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn csptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c32], ipiv: &[i32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csptri_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_ptr(),
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsptri_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &mut [c64], ipiv: &[i32],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsptri_work(matrix_layout.into(), uplo as c_char, n,
                                 ap.as_mut_ptr() as *mut _, ipiv.as_ptr(),
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ssptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f32], ipiv: &[i32],
                   b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[f64], ipiv: &[i32],
                   b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, ap.as_ptr(),
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c32], ipiv: &[i32],
                   b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, ipiv.as_ptr(), b.as_mut_ptr() as *mut _,
                                 ldb)
    }
}

#[inline]
pub fn zsptrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, ap: &[c64], ipiv: &[i32],
                   b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsptrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 ap.as_ptr() as *const _, ipiv.as_ptr(), b.as_mut_ptr() as *mut _,
                                 ldb)
    }
}

#[inline]
pub fn sstebz_work(range: u8, order: u8, n: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32,
                   d: &[f32], e: &[f32], m: &mut i32, nsplit: &mut [i32], w: &mut [f32],
                   iblock: &mut [i32], isplit: &mut [i32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sstebz_work(range as c_char, order as c_char, n, vl, vu, il, iu, abstol,
                                 d.as_ptr(), e.as_ptr(), m, nsplit.as_mut_ptr(), w.as_mut_ptr(),
                                 iblock.as_mut_ptr(), isplit.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dstebz_work(range: u8, order: u8, n: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64,
                   d: &[f64], e: &[f64], m: &mut i32, nsplit: &mut [i32], w: &mut [f64],
                   iblock: &mut [i32], isplit: &mut [i32], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dstebz_work(range as c_char, order as c_char, n, vl, vu, il, iu, abstol,
                                 d.as_ptr(), e.as_ptr(), m, nsplit.as_mut_ptr(), w.as_mut_ptr(),
                                 iblock.as_mut_ptr(), isplit.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sstedc_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstedc_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dstedc_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstedc_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn cstedc_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [c32], ldz: i32, work: &mut [c32], lwork: i32, rwork: &mut [f32],
                   lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstedc_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zstedc_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [c64], ldz: i32, work: &mut [c64], lwork: i32, rwork: &mut [f64],
                   lrwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstedc_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(), lrwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn sstegr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [f32], ldz: i32, isuppz: &mut [i32], work: &mut [f32],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstegr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dstegr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [f64], ldz: i32, isuppz: &mut [i32], work: &mut [f64],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstegr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn cstegr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [c32], ldz: i32, isuppz: &mut [i32], work: &mut [f32],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstegr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 isuppz.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 liwork)
    }
}

#[inline]
pub fn zstegr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [c64], ldz: i32, isuppz: &mut [i32], work: &mut [f64],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstegr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 isuppz.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 liwork)
    }
}

#[inline]
pub fn sstein_work(matrix_layout: Layout, n: i32, d: &[f32], e: &[f32], m: i32, w: &[f32],
                   iblock: &[i32], isplit: &[i32], z: &mut [f32], ldz: i32, work: &mut [f32],
                   iwork: &mut [i32], ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstein_work(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                                 iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifailv)
    }
}

#[inline]
pub fn dstein_work(matrix_layout: Layout, n: i32, d: &[f64], e: &[f64], m: i32, w: &[f64],
                   iblock: &[i32], isplit: &[i32], z: &mut [f64], ldz: i32, work: &mut [f64],
                   iwork: &mut [i32], ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstein_work(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                                 iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifailv)
    }
}

#[inline]
pub fn cstein_work(matrix_layout: Layout, n: i32, d: &[f32], e: &[f32], m: i32, w: &[f32],
                   iblock: &[i32], isplit: &[i32], z: &mut [c32], ldz: i32, work: &mut [f32],
                   iwork: &mut [i32], ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstein_work(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                                 iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifailv)
    }
}

#[inline]
pub fn zstein_work(matrix_layout: Layout, n: i32, d: &[f64], e: &[f64], m: i32, w: &[f64],
                   iblock: &[i32], isplit: &[i32], z: &mut [c64], ldz: i32, work: &mut [f64],
                   iwork: &mut [i32], ifailv: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstein_work(matrix_layout.into(), n, d.as_ptr(), e.as_ptr(), m, w.as_ptr(),
                                 iblock.as_ptr(), isplit.as_ptr(), z.as_mut_ptr() as *mut _, ldz,
                                 work.as_mut_ptr(), iwork.as_mut_ptr(), ifailv)
    }
}

#[inline]
pub fn sstemr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, m: &mut i32, w: &mut [f32],
                   z: &mut [f32], ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32,
                   work: &mut [f32], lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstemr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, nzc, isuppz.as_mut_ptr(), tryrac,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dstemr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, m: &mut i32, w: &mut [f64],
                   z: &mut [f64], ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32,
                   work: &mut [f64], lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstemr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                                 z.as_mut_ptr(), ldz, nzc, isuppz.as_mut_ptr(), tryrac,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn cstemr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, m: &mut i32, w: &mut [f32],
                   z: &mut [c32], ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32,
                   work: &mut [f32], lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cstemr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                                 z.as_mut_ptr() as *mut _, ldz, nzc, isuppz.as_mut_ptr(), tryrac,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn zstemr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, m: &mut i32, w: &mut [f64],
                   z: &mut [c64], ldz: i32, nzc: i32, isuppz: &mut [i32], tryrac: &mut i32,
                   work: &mut [f64], lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zstemr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, m, w.as_mut_ptr(),
                                 z.as_mut_ptr() as *mut _, ldz, nzc, isuppz.as_mut_ptr(), tryrac,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ssteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn dsteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn csteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [c32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn zsteqr_work(matrix_layout: Layout, compz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [c64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsteqr_work(matrix_layout.into(), compz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr() as *mut _, ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn ssterf_work(n: i32, d: &mut [f32], e: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_ssterf_work(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn dsterf_work(n: i32, d: &mut [f64], e: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dsterf_work(n, d.as_mut_ptr(), e.as_mut_ptr())
    }
}

#[inline]
pub fn sstev_work(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                  z: &mut [f32], ldz: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sstev_work(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(),
                                e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn dstev_work(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                  z: &mut [f64], ldz: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dstev_work(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(),
                                e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr())
    }
}

#[inline]
pub fn sstevd_work(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f32], e: &mut [f32],
                   z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstevd_work(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dstevd_work(matrix_layout: Layout, jobz: u8, n: i32, d: &mut [f64], e: &mut [f64],
                   z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstevd_work(matrix_layout.into(), jobz as c_char, n, d.as_mut_ptr(),
                                 e.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn sstevr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [f32], ldz: i32, isuppz: &mut [i32], work: &mut [f32],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstevr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dstevr_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [f64], ldz: i32, isuppz: &mut [i32], work: &mut [f64],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstevr_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn sstevx_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f32],
                   e: &mut [f32], vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sstevx_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dstevx_work(matrix_layout: Layout, jobz: u8, range: u8, n: i32, d: &mut [f64],
                   e: &mut [f64], vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64], iwork: &mut [i32],
                   ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dstevx_work(matrix_layout.into(), jobz as c_char, range as c_char, n,
                                 d.as_mut_ptr(), e.as_mut_ptr(), vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(),
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn ssycon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32, ipiv: &[i32],
                   anorm: f32, rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssycon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsycon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32, ipiv: &[i32],
                   anorm: f64, rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsycon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                                 ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn csycon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, ipiv: &[i32],
                   anorm: f32, rcond: &mut f32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csycon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsycon_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, ipiv: &[i32],
                   anorm: f64, rcond: &mut f64, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsycon_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, ipiv.as_ptr(), anorm, rcond, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ssyequb_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32, s: &mut [f32],
                    scond: &mut [f32], amax: &mut [f32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyequb_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                                  s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr(),
                                  work.as_mut_ptr())
    }
}

#[inline]
pub fn dsyequb_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32, s: &mut [f64],
                    scond: &mut [f64], amax: &mut [f64], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyequb_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                                  s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr(),
                                  work.as_mut_ptr())
    }
}

#[inline]
pub fn csyequb_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32, s: &mut [f32],
                    scond: &mut [f32], amax: &mut [f32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyequb_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                  lda, s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsyequb_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32, s: &mut [f64],
                    scond: &mut [f64], amax: &mut [f64], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyequb_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                  lda, s.as_mut_ptr(), scond.as_mut_ptr(), amax.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ssyev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                  w: &mut [f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr(), lda, w.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsyev_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                  w: &mut [f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyev_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr(), lda, w.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn ssyevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                   w: &mut [f32], work: &mut [f32], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr(), lda, w.as_mut_ptr(), work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dsyevd_work(matrix_layout: Layout, jobz: u8, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                   w: &mut [f64], work: &mut [f64], lwork: i32, iwork: &mut [i32],
                   liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyevd_work(matrix_layout.into(), jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr(), lda, w.as_mut_ptr(), work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ssyevr_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f32],
                   lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [f32], ldz: i32, isuppz: &mut [i32], work: &mut [f32],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyevr_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dsyevr_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f64],
                   lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [f64], ldz: i32, isuppz: &mut [i32], work: &mut [f64],
                   lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyevr_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, isuppz.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ssyevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f32],
                   lda: i32, vl: f32, vu: f32, il: i32, iu: i32, abstol: f32, m: &mut i32,
                   w: &mut [f32], z: &mut [f32], ldz: i32, work: &mut [f32], lwork: i32,
                   iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dsyevx_work(matrix_layout: Layout, jobz: u8, range: u8, uplo: u8, n: i32, a: &mut [f64],
                   lda: i32, vl: f64, vu: f64, il: i32, iu: i32, abstol: f64, m: &mut i32,
                   w: &mut [f64], z: &mut [f64], ldz: i32, work: &mut [f64], lwork: i32,
                   iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyevx_work(matrix_layout.into(), jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr(), lda, vl, vu, il, iu, abstol, m,
                                 w.as_mut_ptr(), z.as_mut_ptr(), ldz, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn ssygst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                   b: &[f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygst_work(matrix_layout.into(), itype, uplo as c_char, n, a.as_mut_ptr(),
                                 lda, b.as_ptr(), ldb)
    }
}

#[inline]
pub fn dsygst_work(matrix_layout: Layout, itype: i32, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                   b: &[f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygst_work(matrix_layout.into(), itype, uplo as c_char, n, a.as_mut_ptr(),
                                 lda, b.as_ptr(), ldb)
    }
}

#[inline]
pub fn ssygv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f32],
                  lda: i32, b: &mut [f32], ldb: i32, w: &mut [f32], work: &mut [f32],
                  lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr(),
                                work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsygv_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f64],
                  lda: i32, b: &mut [f64], ldb: i32, w: &mut [f64], work: &mut [f64],
                  lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygv_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr(),
                                work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn ssygvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f32],
                   lda: i32, b: &mut [f32], ldb: i32, w: &mut [f32], work: &mut [f32], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dsygvd_work(matrix_layout: Layout, itype: i32, jobz: u8, uplo: u8, n: i32, a: &mut [f64],
                   lda: i32, b: &mut [f64], ldb: i32, w: &mut [f64], work: &mut [f64], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygvd_work(matrix_layout.into(), itype, jobz as c_char, uplo as c_char, n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, w.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ssygvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, vl: f32, vu: f32, il: i32,
                   iu: i32, abstol: f32, m: &mut i32, w: &mut [f32], z: &mut [f32], ldz: i32,
                   work: &mut [f32], lwork: i32, iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssygvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, vl,
                                 vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn dsygvx_work(matrix_layout: Layout, itype: i32, jobz: u8, range: u8, uplo: u8, n: i32,
                   a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, vl: f64, vu: f64, il: i32,
                   iu: i32, abstol: f64, m: &mut i32, w: &mut [f64], z: &mut [f64], ldz: i32,
                   work: &mut [f64], lwork: i32, iwork: &mut [i32], ifail: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsygvx_work(matrix_layout.into(), itype, jobz as c_char, range as c_char,
                                 uplo as c_char, n, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, vl,
                                 vu, il, iu, abstol, m, w.as_mut_ptr(), z.as_mut_ptr(), ldz,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), ifail)
    }
}

#[inline]
pub fn ssyrfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   af: &[f32], ldaf: i32, ipiv: &[i32], b: &[f32], ldb: i32, x: &mut [f32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyrfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(),
                                 ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsyrfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   af: &[f64], ldaf: i32, ipiv: &[i32], b: &[f64], ldb: i32, x: &mut [f64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyrfs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 af.as_ptr(), ldaf, ipiv.as_ptr(), b.as_ptr(), ldb, x.as_mut_ptr(),
                                 ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn csyrfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   af: &[c32], ldaf: i32, ipiv: &[i32], b: &[c32], ldb: i32, x: &mut [c32],
                   ldx: i32, ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyrfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zsyrfs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   af: &[c64], ldaf: i32, ipiv: &[i32], b: &[c64], ldb: i32, x: &mut [c64],
                   ldx: i32, ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyrfs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                 ipiv.as_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ssyrfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f32],
                    lda: i32, af: &[f32], ldaf: i32, ipiv: &[i32], s: &[f32], b: &[f32], ldb: i32,
                    x: &mut [f32], ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyrfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), s.as_ptr(),
                                  b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsyrfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[f64],
                    lda: i32, af: &[f64], ldaf: i32, ipiv: &[i32], s: &[f64], b: &[f64], ldb: i32,
                    x: &mut [f64], ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyrfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr(), lda, af.as_ptr(), ldaf, ipiv.as_ptr(), s.as_ptr(),
                                  b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn csyrfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c32],
                    lda: i32, af: &[c32], ldaf: i32, ipiv: &[i32], s: &[f32], b: &[c32], ldb: i32,
                    x: &mut [c32], ldx: i32, rcond: &mut f32, berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyrfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zsyrfsx_work(matrix_layout: Layout, uplo: u8, equed: u8, n: i32, nrhs: i32, a: &[c64],
                    lda: i32, af: &[c64], ldaf: i32, ipiv: &[i32], s: &[f64], b: &[c64], ldb: i32,
                    x: &mut [c64], ldx: i32, rcond: &mut f64, berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyrfsx_work(matrix_layout.into(), uplo as c_char, equed as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, af.as_ptr() as *const _, ldaf,
                                  ipiv.as_ptr(), s.as_ptr(), b.as_ptr() as *const _, ldb,
                                  x.as_mut_ptr() as *mut _, ldx, rcond, berr.as_mut_ptr(),
                                  n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ssysv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                  ipiv: &mut [i32], b: &mut [f32], ldb: i32, work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysv_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsysv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                  ipiv: &mut [i32], b: &mut [f64], ldb: i32, work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysv_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb, work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn csysv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                  ipiv: &mut [i32], b: &mut [c32], ldb: i32, work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csysv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zsysv_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                  ipiv: &mut [i32], b: &mut [c64], ldb: i32, work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysv_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn ssysvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[f32],
                   lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], b: &[f32], ldb: i32,
                   x: &mut [f32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [f32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                 b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsysvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[f64],
                   lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], b: &[f64], ldb: i32,
                   x: &mut [f64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [f64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                 b.as_ptr(), ldb, x.as_mut_ptr(), ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn csysvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c32],
                   lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], b: &[c32], ldb: i32,
                   x: &mut [c32], ldx: i32, rcond: &mut f32, ferr: &mut [f32], berr: &mut [f32],
                   work: &mut [c32], lwork: i32, rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csysvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zsysvx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &[c64],
                   lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], b: &[c64], ldb: i32,
                   x: &mut [c64], ldx: i32, rcond: &mut f64, ferr: &mut [f64], berr: &mut [f64],
                   work: &mut [c64], lwork: i32, rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysvx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                 ipiv.as_mut_ptr(), b.as_ptr() as *const _, ldb,
                                 x.as_mut_ptr() as *mut _, ldx, rcond, ferr.as_mut_ptr(),
                                 berr.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ssysvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f32],
                    lda: i32, af: &mut [f32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    s: &mut [f32], b: &mut [f32], ldb: i32, x: &mut [f32], ldx: i32,
                    rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                  equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                  x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(),
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsysvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [f64],
                    lda: i32, af: &mut [f64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    s: &mut [f64], b: &mut [f64], ldb: i32, x: &mut [f64], ldx: i32,
                    rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr(), lda, af.as_mut_ptr(), ldaf, ipiv.as_mut_ptr(),
                                  equed as *mut _ as *mut _, s.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                  x.as_mut_ptr(), ldx, rcond, rpvgrw.as_mut_ptr(),
                                  berr.as_mut_ptr(), n_err_bnds, err_bnds_norm.as_mut_ptr(),
                                  err_bnds_comp.as_mut_ptr(), nparams, params.as_mut_ptr(),
                                  work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn csysvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c32],
                    lda: i32, af: &mut [c32], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    s: &mut [f32], b: &mut [c32], ldb: i32, x: &mut [c32], ldx: i32,
                    rcond: &mut f32, rpvgrw: &mut [f32], berr: &mut [f32], n_err_bnds: i32,
                    err_bnds_norm: &mut [f32], err_bnds_comp: &mut [f32], nparams: i32,
                    params: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csysvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn zsysvxx_work(matrix_layout: Layout, fact: u8, uplo: u8, n: i32, nrhs: i32, a: &mut [c64],
                    lda: i32, af: &mut [c64], ldaf: i32, ipiv: &mut [i32], equed: &mut u8,
                    s: &mut [f64], b: &mut [c64], ldb: i32, x: &mut [c64], ldx: i32,
                    rcond: &mut f64, rpvgrw: &mut [f64], berr: &mut [f64], n_err_bnds: i32,
                    err_bnds_norm: &mut [f64], err_bnds_comp: &mut [f64], nparams: i32,
                    params: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysvxx_work(matrix_layout.into(), fact as c_char, uplo as c_char, n, nrhs,
                                  a.as_mut_ptr() as *mut _, lda, af.as_mut_ptr() as *mut _, ldaf,
                                  ipiv.as_mut_ptr(), equed as *mut _ as *mut _, s.as_mut_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, x.as_mut_ptr() as *mut _, ldx,
                                  rcond, rpvgrw.as_mut_ptr(), berr.as_mut_ptr(), n_err_bnds,
                                  err_bnds_norm.as_mut_ptr(), err_bnds_comp.as_mut_ptr(), nparams,
                                  params.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                  rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ssytrd_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, d: &mut [f32],
                   e: &mut [f32], tau: &mut [f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrd_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsytrd_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, d: &mut [f64],
                   e: &mut [f64], tau: &mut [f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrd_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 d.as_mut_ptr(), e.as_mut_ptr(), tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn ssytrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                   ipiv: &mut [i32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsytrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                   ipiv: &mut [i32], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn csytrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   ipiv: &mut [i32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zsytrf_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrf_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn ssytri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, ipiv: &[i32],
                   work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dsytri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, ipiv: &[i32],
                   work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn csytri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                   work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csytri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsytri_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                   work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytri_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_ptr(), work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ssytrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsytrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrs_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csytrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsytrs_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrs_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stbcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32,
                   ab: &[f32], ldab: i32, rcond: &mut f32, work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stbcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, kd, ab.as_ptr(), ldab, rcond,
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtbcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32,
                   ab: &[f64], ldab: i32, rcond: &mut f64, work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtbcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, kd, ab.as_ptr(), ldab, rcond,
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctbcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32,
                   ab: &[c32], ldab: i32, rcond: &mut f32, work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctbcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, kd, ab.as_ptr() as *const _, ldab, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztbcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, kd: i32,
                   ab: &[c64], ldab: i32, rcond: &mut f64, work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztbcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, kd, ab.as_ptr() as *const _, ldab, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn stbrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[f32], ldab: i32, b: &[f32], ldb: i32, x: &[f32], ldx: i32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [f32],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stbrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr(), ldab, b.as_ptr(), ldb,
                                 x.as_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtbrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[f64], ldab: i32, b: &[f64], ldb: i32, x: &[f64], ldx: i32,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [f64],
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtbrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr(), ldab, b.as_ptr(), ldb,
                                 x.as_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctbrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[c32], ldab: i32, b: &[c32], ldb: i32, x: &[c32], ldx: i32,
                   ferr: &mut [f32], berr: &mut [f32], work: &mut [c32],
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctbrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr() as *const _, ldab,
                                 b.as_ptr() as *const _, ldb, x.as_ptr() as *const _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztbrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[c64], ldab: i32, b: &[c64], ldb: i32, x: &[c64], ldx: i32,
                   ferr: &mut [f64], berr: &mut [f64], work: &mut [c64],
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztbrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr() as *const _, ldab,
                                 b.as_ptr() as *const _, ldb, x.as_ptr() as *const _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn stbtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[f32], ldab: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stbtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr(), ldab, b.as_mut_ptr(),
                                 ldb)
    }
}

#[inline]
pub fn dtbtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[f64], ldab: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtbtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr(), ldab, b.as_mut_ptr(),
                                 ldb)
    }
}

#[inline]
pub fn ctbtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[c32], ldab: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctbtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr() as *const _, ldab,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztbtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, kd: i32,
                   nrhs: i32, ab: &[c64], ldab: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztbtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, kd, nrhs, ab.as_ptr() as *const _, ldab,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stfsm_work(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8,
                  m: i32, n: i32, alpha: f32, a: &[f32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stfsm_work(matrix_layout.into(), transr as c_char, side as c_char,
                                uplo as c_char, trans as c_char, diag as c_char, m, n, alpha,
                                a.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtfsm_work(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8,
                  m: i32, n: i32, alpha: f64, a: &[f64], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtfsm_work(matrix_layout.into(), transr as c_char, side as c_char,
                                uplo as c_char, trans as c_char, diag as c_char, m, n, alpha,
                                a.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctfsm_work(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8,
                  m: i32, n: i32, alpha: c32, a: &[c32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctfsm_work(matrix_layout.into(), transr as c_char, side as c_char,
                                uplo as c_char, trans as c_char, diag as c_char, m, n,
                                transmute(alpha), a.as_ptr() as *const _, b.as_mut_ptr() as *mut _,
                                ldb)
    }
}

#[inline]
pub fn ztfsm_work(matrix_layout: Layout, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8,
                  m: i32, n: i32, alpha: c64, a: &[c64], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztfsm_work(matrix_layout.into(), transr as c_char, side as c_char,
                                uplo as c_char, trans as c_char, diag as c_char, m, n,
                                transmute(alpha), a.as_ptr() as *const _, b.as_mut_ptr() as *mut _,
                                ldb)
    }
}

#[inline]
pub fn stftri_work(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
                   a: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stftri_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_mut_ptr())
    }
}

#[inline]
pub fn dtftri_work(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
                   a: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtftri_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_mut_ptr())
    }
}

#[inline]
pub fn ctftri_work(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
                   a: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctftri_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztftri_work(matrix_layout: Layout, transr: u8, uplo: u8, diag: u8, n: i32,
                   a: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztftri_work(matrix_layout.into(), transr as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stfttp_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f32],
                   ap: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stfttp_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr(), ap.as_mut_ptr())
    }
}

#[inline]
pub fn dtfttp_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f64],
                   ap: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtfttp_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr(), ap.as_mut_ptr())
    }
}

#[inline]
pub fn ctfttp_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c32],
                   ap: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctfttp_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr() as *const _, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztfttp_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c64],
                   ap: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztfttp_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr() as *const _, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stfttr_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f32], a: &mut [f32],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stfttr_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr(), a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dtfttr_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[f64], a: &mut [f64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtfttr_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr(), a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn ctfttr_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c32], a: &mut [c32],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctfttr_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr() as *const _, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ztfttr_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, arf: &[c64], a: &mut [c64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztfttr_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 arf.as_ptr() as *const _, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn stgevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[f32],
                   lds: i32, p: &[f32], ldp: i32, vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32,
                   mm: i32, m: &mut i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_ptr(), n, s.as_ptr(), lds, p.as_ptr(), ldp, vl, ldvl,
                                 vr, ldvr, mm, m, work.as_mut_ptr())
    }
}

#[inline]
pub fn dtgevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[f64],
                   lds: i32, p: &[f64], ldp: i32, vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32,
                   mm: i32, m: &mut i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_ptr(), n, s.as_ptr(), lds, p.as_ptr(), ldp, vl, ldvl,
                                 vr, ldvr, mm, m, work.as_mut_ptr())
    }
}

#[inline]
pub fn ctgevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[c32],
                   lds: i32, p: &[c32], ldp: i32, vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32,
                   mm: i32, m: &mut i32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_ptr(), n, s.as_ptr() as *const _, lds,
                                 p.as_ptr() as *const _, ldp, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, mm, m, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztgevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32, s: &[c64],
                   lds: i32, p: &[c64], ldp: i32, vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32,
                   mm: i32, m: &mut i32, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_ptr(), n, s.as_ptr() as *const _, lds,
                                 p.as_ptr() as *const _, ldp, vl as *mut _ as *mut _, ldvl,
                                 vr as *mut _ as *mut _, ldvr, mm, m, work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn stgexc_work(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, q: &mut f32, ldq: i32, z: &mut [f32], ldz: i32,
                   ifst: &mut [i32], ilst: &mut [i32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stgexc_work(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz,
                                 ifst.as_mut_ptr(), ilst.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dtgexc_work(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, q: &mut f64, ldq: i32, z: &mut [f64], ldz: i32,
                   ifst: &mut [i32], ilst: &mut [i32], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgexc_work(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, q, ldq, z.as_mut_ptr(), ldz,
                                 ifst.as_mut_ptr(), ilst.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn ctgexc_work(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, q: &mut c32, ldq: i32, z: &mut [c32], ldz: i32,
                   ifst: i32, ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgexc_work(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, q as *mut _ as *mut _, ldq,
                                 z.as_mut_ptr() as *mut _, ldz, ifst, ilst)
    }
}

#[inline]
pub fn ztgexc_work(matrix_layout: Layout, wantq: i32, wantz: i32, n: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, q: &mut c64, ldq: i32, z: &mut [c64], ldz: i32,
                   ifst: i32, ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgexc_work(matrix_layout.into(), wantq, wantz, n, a.as_mut_ptr() as *mut _,
                                 lda, b.as_mut_ptr() as *mut _, ldb, q as *mut _ as *mut _, ldq,
                                 z.as_mut_ptr() as *mut _, ldz, ifst, ilst)
    }
}

#[inline]
pub fn stgsen_work(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32],
                   n: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, alphar: &mut f32,
                   alphai: &mut f32, beta: &mut f32, q: &mut f32, ldq: i32, z: &mut [f32],
                   ldz: i32, m: &mut i32, pl: &mut [f32], pr: &mut [f32], dif: &mut [f32],
                   work: &mut [f32], lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsen_work(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, q,
                                 ldq, z.as_mut_ptr(), ldz, m, pl.as_mut_ptr(), pr.as_mut_ptr(),
                                 dif.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 liwork)
    }
}

#[inline]
pub fn dtgsen_work(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32],
                   n: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, alphar: &mut f64,
                   alphai: &mut f64, beta: &mut f64, q: &mut f64, ldq: i32, z: &mut [f64],
                   ldz: i32, m: &mut i32, pl: &mut [f64], pr: &mut [f64], dif: &mut [f64],
                   work: &mut [f64], lwork: i32, iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsen_work(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                                 a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb, alphar, alphai, beta, q,
                                 ldq, z.as_mut_ptr(), ldz, m, pl.as_mut_ptr(), pr.as_mut_ptr(),
                                 dif.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr(),
                                 liwork)
    }
}

#[inline]
pub fn ctgsen_work(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32],
                   n: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, alpha: &mut c32,
                   beta: &mut c32, q: &mut c32, ldq: i32, z: &mut [c32], ldz: i32, m: &mut i32,
                   pl: &mut [f32], pr: &mut [f32], dif: &mut [f32], work: &mut [c32], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsen_work(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                 q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz, m,
                                 pl.as_mut_ptr(), pr.as_mut_ptr(), dif.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ztgsen_work(matrix_layout: Layout, ijob: i32, wantq: i32, wantz: i32, select: &[i32],
                   n: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, alpha: &mut c64,
                   beta: &mut c64, q: &mut c64, ldq: i32, z: &mut [c64], ldz: i32, m: &mut i32,
                   pl: &mut [f64], pr: &mut [f64], dif: &mut [f64], work: &mut [c64], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsen_work(matrix_layout.into(), ijob, wantq, wantz, select.as_ptr(), n,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 alpha as *mut _ as *mut _, beta as *mut _ as *mut _,
                                 q as *mut _ as *mut _, ldq, z.as_mut_ptr() as *mut _, ldz, m,
                                 pl.as_mut_ptr(), pr.as_mut_ptr(), dif.as_mut_ptr(),
                                 work.as_mut_ptr() as *mut _, lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn stgsja_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   k: i32, l: i32, a: &mut [f32], lda: i32, b: &mut [f32], ldb: i32, tola: f32,
                   tolb: f32, alpha: &mut f32, beta: &mut f32, u: &mut [f32], ldu: i32,
                   v: &mut [f32], ldv: i32, q: &mut f32, ldq: i32, work: &mut [f32],
                   ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsja_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, k, l, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, tola, tolb, alpha, beta, u.as_mut_ptr(), ldu,
                                 v.as_mut_ptr(), ldv, q, ldq, work.as_mut_ptr(),
                                 ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn dtgsja_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   k: i32, l: i32, a: &mut [f64], lda: i32, b: &mut [f64], ldb: i32, tola: f64,
                   tolb: f64, alpha: &mut f64, beta: &mut f64, u: &mut [f64], ldu: i32,
                   v: &mut [f64], ldv: i32, q: &mut f64, ldq: i32, work: &mut [f64],
                   ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsja_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, k, l, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, tola, tolb, alpha, beta, u.as_mut_ptr(), ldu,
                                 v.as_mut_ptr(), ldv, q, ldq, work.as_mut_ptr(),
                                 ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn ctgsja_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   k: i32, l: i32, a: &mut [c32], lda: i32, b: &mut [c32], ldb: i32, tola: f32,
                   tolb: f32, alpha: &mut f32, beta: &mut f32, u: &mut [c32], ldu: i32,
                   v: &mut [c32], ldv: i32, q: &mut c32, ldq: i32, work: &mut [c32],
                   ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsja_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, k, l, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, tola, tolb, alpha, beta,
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _,
                                 ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn ztgsja_work(matrix_layout: Layout, jobu: u8, jobv: u8, jobq: u8, m: i32, p: i32, n: i32,
                   k: i32, l: i32, a: &mut [c64], lda: i32, b: &mut [c64], ldb: i32, tola: f64,
                   tolb: f64, alpha: &mut f64, beta: &mut f64, u: &mut [c64], ldu: i32,
                   v: &mut [c64], ldv: i32, q: &mut c64, ldq: i32, work: &mut [c64],
                   ncycle: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsja_work(matrix_layout.into(), jobu as c_char, jobv as c_char,
                                 jobq as c_char, m, p, n, k, l, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, tola, tolb, alpha, beta,
                                 u.as_mut_ptr() as *mut _, ldu, v.as_mut_ptr() as *mut _, ldv,
                                 q as *mut _ as *mut _, ldq, work.as_mut_ptr() as *mut _,
                                 ncycle.as_mut_ptr())
    }
}

#[inline]
pub fn stgsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[f32],
                   lda: i32, b: &[f32], ldb: i32, vl: &[f32], ldvl: i32, vr: &[f32], ldvr: i32,
                   s: &mut [f32], dif: &mut [f32], mm: i32, m: &mut i32, work: &mut [f32],
                   lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, a.as_ptr(), lda, b.as_ptr(), ldb, vl.as_ptr(),
                                 ldvl, vr.as_ptr(), ldvr, s.as_mut_ptr(), dif.as_mut_ptr(), mm, m,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtgsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[f64],
                   lda: i32, b: &[f64], ldb: i32, vl: &[f64], ldvl: i32, vr: &[f64], ldvr: i32,
                   s: &mut [f64], dif: &mut [f64], mm: i32, m: &mut i32, work: &mut [f64],
                   lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, a.as_ptr(), lda, b.as_ptr(), ldb, vl.as_ptr(),
                                 ldvl, vr.as_ptr(), ldvr, s.as_mut_ptr(), dif.as_mut_ptr(), mm, m,
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctgsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[c32],
                   lda: i32, b: &[c32], ldb: i32, vl: &[c32], ldvl: i32, vr: &[c32], ldvr: i32,
                   s: &mut [f32], dif: &mut [f32], mm: i32, m: &mut i32, work: &mut [c32],
                   lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, a.as_ptr() as *const _, lda,
                                 b.as_ptr() as *const _, ldb, vl.as_ptr() as *const _, ldvl,
                                 vr.as_ptr() as *const _, ldvr, s.as_mut_ptr(), dif.as_mut_ptr(),
                                 mm, m, work.as_mut_ptr() as *mut _, lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztgsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, a: &[c64],
                   lda: i32, b: &[c64], ldb: i32, vl: &[c64], ldvl: i32, vr: &[c64], ldvr: i32,
                   s: &mut [f64], dif: &mut [f64], mm: i32, m: &mut i32, work: &mut [c64],
                   lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, a.as_ptr() as *const _, lda,
                                 b.as_ptr() as *const _, ldb, vl.as_ptr() as *const _, ldvl,
                                 vr.as_ptr() as *const _, ldvr, s.as_mut_ptr(), dif.as_mut_ptr(),
                                 mm, m, work.as_mut_ptr() as *mut _, lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn stgsyl_work(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[f32],
                   lda: i32, b: &[f32], ldb: i32, c: &mut [f32], ldc: i32, d: &[f32], ldd: i32,
                   e: &[f32], lde: i32, f: &mut [f32], ldf: i32, scale: &mut [f32],
                   dif: &mut [f32], work: &mut [f32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stgsyl_work(matrix_layout.into(), trans as c_char, ijob, m, n, a.as_ptr(),
                                 lda, b.as_ptr(), ldb, c.as_mut_ptr(), ldc, d.as_ptr(), ldd,
                                 e.as_ptr(), lde, f.as_mut_ptr(), ldf, scale.as_mut_ptr(),
                                 dif.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtgsyl_work(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[f64],
                   lda: i32, b: &[f64], ldb: i32, c: &mut [f64], ldc: i32, d: &[f64], ldd: i32,
                   e: &[f64], lde: i32, f: &mut [f64], ldf: i32, scale: &mut [f64],
                   dif: &mut [f64], work: &mut [f64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtgsyl_work(matrix_layout.into(), trans as c_char, ijob, m, n, a.as_ptr(),
                                 lda, b.as_ptr(), ldb, c.as_mut_ptr(), ldc, d.as_ptr(), ldd,
                                 e.as_ptr(), lde, f.as_mut_ptr(), ldf, scale.as_mut_ptr(),
                                 dif.as_mut_ptr(), work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctgsyl_work(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[c32],
                   lda: i32, b: &[c32], ldb: i32, c: &mut [c32], ldc: i32, d: &[c32], ldd: i32,
                   e: &[c32], lde: i32, f: &mut [c32], ldf: i32, scale: &mut [f32],
                   dif: &mut [f32], work: &mut [c32], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctgsyl_work(matrix_layout.into(), trans as c_char, ijob, m, n,
                                 a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                                 c.as_mut_ptr() as *mut _, ldc, d.as_ptr() as *const _, ldd,
                                 e.as_ptr() as *const _, lde, f.as_mut_ptr() as *mut _, ldf,
                                 scale.as_mut_ptr(), dif.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztgsyl_work(matrix_layout: Layout, trans: u8, ijob: i32, m: i32, n: i32, a: &[c64],
                   lda: i32, b: &[c64], ldb: i32, c: &mut [c64], ldc: i32, d: &[c64], ldd: i32,
                   e: &[c64], lde: i32, f: &mut [c64], ldf: i32, scale: &mut [f64],
                   dif: &mut [f64], work: &mut [c64], lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztgsyl_work(matrix_layout.into(), trans as c_char, ijob, m, n,
                                 a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                                 c.as_mut_ptr() as *mut _, ldc, d.as_ptr() as *const _, ldd,
                                 e.as_ptr() as *const _, lde, f.as_mut_ptr() as *mut _, ldf,
                                 scale.as_mut_ptr(), dif.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn stpcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[f32],
                   rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stpcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, ap.as_ptr(), rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtpcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[f64],
                   rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, ap.as_ptr(), rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctpcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[c32],
                   rcond: &mut f32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, ap.as_ptr() as *const _, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztpcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, ap: &[c64],
                   rcond: &mut f64, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, ap.as_ptr() as *const _, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn stprfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[f32], b: &[f32], ldb: i32, x: &[f32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stprfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr(), b.as_ptr(), ldb, x.as_ptr(),
                                 ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtprfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[f64], b: &[f64], ldb: i32, x: &[f64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtprfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr(), b.as_ptr(), ldb, x.as_ptr(),
                                 ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctprfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[c32], b: &[c32], ldb: i32, x: &[c32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctprfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr() as *const _,
                                 b.as_ptr() as *const _, ldb, x.as_ptr() as *const _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztprfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[c64], b: &[c64], ldb: i32, x: &[c64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztprfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr() as *const _,
                                 b.as_ptr() as *const _, ldb, x.as_ptr() as *const _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn stptri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_stptri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 ap.as_mut_ptr())
    }
}

#[inline]
pub fn dtptri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dtptri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 ap.as_mut_ptr())
    }
}

#[inline]
pub fn ctptri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [c32]) -> i32 {
    unsafe {
        ffi::LAPACKE_ctptri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztptri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, ap: &mut [c64]) -> i32 {
    unsafe {
        ffi::LAPACKE_ztptri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stptrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[f32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stptrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtptrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[f64], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtptrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctptrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[c32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctptrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr() as *const _,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztptrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   ap: &[c64], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztptrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, ap.as_ptr() as *const _,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stpttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[f32],
                   arf: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stpttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 ap.as_ptr(), arf.as_mut_ptr())
    }
}

#[inline]
pub fn dtpttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[f64],
                   arf: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 ap.as_ptr(), arf.as_mut_ptr())
    }
}

#[inline]
pub fn ctpttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[c32],
                   arf: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 ap.as_ptr() as *const _, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztpttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, ap: &[c64],
                   arf: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 ap.as_ptr() as *const _, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stpttr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f32], a: &mut [f32],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpttr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dtpttr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[f64], a: &mut [f64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpttr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr(),
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn ctpttr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], a: &mut [c32],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpttr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ztpttr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], a: &mut [c64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpttr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn strcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[f32],
                   lda: i32, rcond: &mut f32, work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_ptr(), lda, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtrcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[f64],
                   lda: i32, rcond: &mut f64, work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_ptr(), lda, rcond, work.as_mut_ptr(),
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctrcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[c32],
                   lda: i32, rcond: &mut f32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_ptr() as *const _, lda, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztrcon_work(matrix_layout: Layout, norm: u8, uplo: u8, diag: u8, n: i32, a: &[c64],
                   lda: i32, rcond: &mut f64, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrcon_work(matrix_layout.into(), norm as c_char, uplo as c_char,
                                 diag as c_char, n, a.as_ptr() as *const _, lda, rcond,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn strevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &mut [i32], n: i32,
                   t: &[f32], ldt: i32, vl: &mut f32, ldvl: i32, vr: &mut f32, ldvr: i32, mm: i32,
                   m: &mut i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_mut_ptr(), n, t.as_ptr(), ldt, vl, ldvl, vr, ldvr, mm,
                                 m, work.as_mut_ptr())
    }
}

#[inline]
pub fn dtrevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &mut [i32], n: i32,
                   t: &[f64], ldt: i32, vl: &mut f64, ldvl: i32, vr: &mut f64, ldvr: i32, mm: i32,
                   m: &mut i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_mut_ptr(), n, t.as_ptr(), ldt, vl, ldvl, vr, ldvr, mm,
                                 m, work.as_mut_ptr())
    }
}

#[inline]
pub fn ctrevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32,
                   t: &mut [c32], ldt: i32, vl: &mut c32, ldvl: i32, vr: &mut c32, ldvr: i32,
                   mm: i32, m: &mut i32, work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_ptr(), n, t.as_mut_ptr() as *mut _, ldt,
                                 vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr, mm, m,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztrevc_work(matrix_layout: Layout, side: u8, howmny: u8, select: &[i32], n: i32,
                   t: &mut [c64], ldt: i32, vl: &mut c64, ldvl: i32, vr: &mut c64, ldvr: i32,
                   mm: i32, m: &mut i32, work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrevc_work(matrix_layout.into(), side as c_char, howmny as c_char,
                                 select.as_ptr(), n, t.as_mut_ptr() as *mut _, ldt,
                                 vl as *mut _ as *mut _, ldvl, vr as *mut _ as *mut _, ldvr, mm, m,
                                 work.as_mut_ptr() as *mut _, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn strexc_work(matrix_layout: Layout, compq: u8, n: i32, t: &mut [f32], ldt: i32, q: &mut f32,
                   ldq: i32, ifst: &mut [i32], ilst: &mut [i32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strexc_work(matrix_layout.into(), compq as c_char, n, t.as_mut_ptr(), ldt, q,
                                 ldq, ifst.as_mut_ptr(), ilst.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dtrexc_work(matrix_layout: Layout, compq: u8, n: i32, t: &mut [f64], ldt: i32, q: &mut f64,
                   ldq: i32, ifst: &mut [i32], ilst: &mut [i32], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrexc_work(matrix_layout.into(), compq as c_char, n, t.as_mut_ptr(), ldt, q,
                                 ldq, ifst.as_mut_ptr(), ilst.as_mut_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn ctrexc_work(matrix_layout: Layout, compq: u8, n: i32, t: &mut [c32], ldt: i32, q: &mut c32,
                   ldq: i32, ifst: i32, ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrexc_work(matrix_layout.into(), compq as c_char, n,
                                 t.as_mut_ptr() as *mut _, ldt, q as *mut _ as *mut _, ldq, ifst,
                                 ilst)
    }
}

#[inline]
pub fn ztrexc_work(matrix_layout: Layout, compq: u8, n: i32, t: &mut [c64], ldt: i32, q: &mut c64,
                   ldq: i32, ifst: i32, ilst: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrexc_work(matrix_layout.into(), compq as c_char, n,
                                 t.as_mut_ptr() as *mut _, ldt, q as *mut _ as *mut _, ldq, ifst,
                                 ilst)
    }
}

#[inline]
pub fn strrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[f32], lda: i32, b: &[f32], ldb: i32, x: &[f32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [f32], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr(), lda, b.as_ptr(), ldb,
                                 x.as_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtrrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[f64], lda: i32, b: &[f64], ldb: i32, x: &[f64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [f64], iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr(), lda, b.as_ptr(), ldb,
                                 x.as_ptr(), ldx, ferr.as_mut_ptr(), berr.as_mut_ptr(),
                                 work.as_mut_ptr(), iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctrrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[c32], lda: i32, b: &[c32], ldb: i32, x: &[c32], ldx: i32, ferr: &mut [f32],
                   berr: &mut [f32], work: &mut [c32], rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr() as *const _, lda,
                                 b.as_ptr() as *const _, ldb, x.as_ptr() as *const _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztrrfs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[c64], lda: i32, b: &[c64], ldb: i32, x: &[c64], ldx: i32, ferr: &mut [f64],
                   berr: &mut [f64], work: &mut [c64], rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrrfs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr() as *const _, lda,
                                 b.as_ptr() as *const _, ldb, x.as_ptr() as *const _, ldx,
                                 ferr.as_mut_ptr(), berr.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 rwork.as_mut_ptr())
    }
}

#[inline]
pub fn strsen_work(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32,
                   t: &mut [f32], ldt: i32, q: &mut f32, ldq: i32, wr: &mut [f32], wi: &mut [f32],
                   m: &mut i32, s: &mut [f32], sep: &mut [f32], work: &mut [f32], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_strsen_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 select.as_ptr(), n, t.as_mut_ptr(), ldt, q, ldq, wr.as_mut_ptr(),
                                 wi.as_mut_ptr(), m, s.as_mut_ptr(), sep.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn dtrsen_work(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32,
                   t: &mut [f64], ldt: i32, q: &mut f64, ldq: i32, wr: &mut [f64], wi: &mut [f64],
                   m: &mut i32, s: &mut [f64], sep: &mut [f64], work: &mut [f64], lwork: i32,
                   iwork: &mut [i32], liwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrsen_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 select.as_ptr(), n, t.as_mut_ptr(), ldt, q, ldq, wr.as_mut_ptr(),
                                 wi.as_mut_ptr(), m, s.as_mut_ptr(), sep.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork, iwork.as_mut_ptr(), liwork)
    }
}

#[inline]
pub fn ctrsen_work(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32,
                   t: &mut [c32], ldt: i32, q: &mut c32, ldq: i32, w: &mut [c32], m: &mut i32,
                   s: &mut [f32], sep: &mut [f32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrsen_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 select.as_ptr(), n, t.as_mut_ptr() as *mut _, ldt,
                                 q as *mut _ as *mut _, ldq, w.as_mut_ptr() as *mut _, m,
                                 s.as_mut_ptr(), sep.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 lwork)
    }
}

#[inline]
pub fn ztrsen_work(matrix_layout: Layout, job: u8, compq: u8, select: &[i32], n: i32,
                   t: &mut [c64], ldt: i32, q: &mut c64, ldq: i32, w: &mut [c64], m: &mut i32,
                   s: &mut [f64], sep: &mut [f64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrsen_work(matrix_layout.into(), job as c_char, compq as c_char,
                                 select.as_ptr(), n, t.as_mut_ptr() as *mut _, ldt,
                                 q as *mut _ as *mut _, ldq, w.as_mut_ptr() as *mut _, m,
                                 s.as_mut_ptr(), sep.as_mut_ptr(), work.as_mut_ptr() as *mut _,
                                 lwork)
    }
}

#[inline]
pub fn strsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[f32],
                   ldt: i32, vl: &[f32], ldvl: i32, vr: &[f32], ldvr: i32, s: &mut [f32],
                   sep: &mut [f32], mm: i32, m: &mut i32, work: &mut [f32], ldwork: i32,
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, t.as_ptr(), ldt, vl.as_ptr(), ldvl,
                                 vr.as_ptr(), ldvr, s.as_mut_ptr(), sep.as_mut_ptr(), mm, m,
                                 work.as_mut_ptr(), ldwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dtrsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[f64],
                   ldt: i32, vl: &[f64], ldvl: i32, vr: &[f64], ldvr: i32, s: &mut [f64],
                   sep: &mut [f64], mm: i32, m: &mut i32, work: &mut [f64], ldwork: i32,
                   iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, t.as_ptr(), ldt, vl.as_ptr(), ldvl,
                                 vr.as_ptr(), ldvr, s.as_mut_ptr(), sep.as_mut_ptr(), mm, m,
                                 work.as_mut_ptr(), ldwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ctrsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[c32],
                   ldt: i32, vl: &[c32], ldvl: i32, vr: &[c32], ldvr: i32, s: &mut [f32],
                   sep: &mut [f32], mm: i32, m: &mut i32, work: &mut [c32], ldwork: i32,
                   rwork: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, t.as_ptr() as *const _, ldt,
                                 vl.as_ptr() as *const _, ldvl, vr.as_ptr() as *const _, ldvr,
                                 s.as_mut_ptr(), sep.as_mut_ptr(), mm, m,
                                 work.as_mut_ptr() as *mut _, ldwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn ztrsna_work(matrix_layout: Layout, job: u8, howmny: u8, select: &[i32], n: i32, t: &[c64],
                   ldt: i32, vl: &[c64], ldvl: i32, vr: &[c64], ldvr: i32, s: &mut [f64],
                   sep: &mut [f64], mm: i32, m: &mut i32, work: &mut [c64], ldwork: i32,
                   rwork: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrsna_work(matrix_layout.into(), job as c_char, howmny as c_char,
                                 select.as_ptr(), n, t.as_ptr() as *const _, ldt,
                                 vl.as_ptr() as *const _, ldvl, vr.as_ptr() as *const _, ldvr,
                                 s.as_mut_ptr(), sep.as_mut_ptr(), mm, m,
                                 work.as_mut_ptr() as *mut _, ldwork, rwork.as_mut_ptr())
    }
}

#[inline]
pub fn strsyl_work(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32,
                   a: &[f32], lda: i32, b: &[f32], ldb: i32, c: &mut [f32], ldc: i32,
                   scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strsyl_work(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m,
                                 n, a.as_ptr(), lda, b.as_ptr(), ldb, c.as_mut_ptr(), ldc,
                                 scale.as_mut_ptr())
    }
}

#[inline]
pub fn dtrsyl_work(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32,
                   a: &[f64], lda: i32, b: &[f64], ldb: i32, c: &mut [f64], ldc: i32,
                   scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrsyl_work(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m,
                                 n, a.as_ptr(), lda, b.as_ptr(), ldb, c.as_mut_ptr(), ldc,
                                 scale.as_mut_ptr())
    }
}

#[inline]
pub fn ctrsyl_work(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32,
                   a: &[c32], lda: i32, b: &[c32], ldb: i32, c: &mut [c32], ldc: i32,
                   scale: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrsyl_work(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m,
                                 n, a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                                 c.as_mut_ptr() as *mut _, ldc, scale.as_mut_ptr())
    }
}

#[inline]
pub fn ztrsyl_work(matrix_layout: Layout, trana: u8, tranb: u8, isgn: i32, m: i32, n: i32,
                   a: &[c64], lda: i32, b: &[c64], ldb: i32, c: &mut [c64], ldc: i32,
                   scale: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrsyl_work(matrix_layout.into(), trana as c_char, tranb as c_char, isgn, m,
                                 n, a.as_ptr() as *const _, lda, b.as_ptr() as *const _, ldb,
                                 c.as_mut_ptr() as *mut _, ldc, scale.as_mut_ptr())
    }
}

#[inline]
pub fn strtri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [f32],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_strtri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn dtrtri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [f64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrtri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 a.as_mut_ptr(), lda)
    }
}

#[inline]
pub fn ctrtri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [c32],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrtri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ztrtri_work(matrix_layout: Layout, uplo: u8, diag: u8, n: i32, a: &mut [c64],
                   lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrtri_work(matrix_layout.into(), uplo as c_char, diag as c_char, n,
                                 a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn strtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[f32], lda: i32, b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_strtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr(), lda, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtrtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[f64], lda: i32, b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr(), lda, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctrtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[c32], lda: i32, b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr() as *const _, lda,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztrtrs_work(matrix_layout: Layout, uplo: u8, trans: u8, diag: u8, n: i32, nrhs: i32,
                   a: &[c64], lda: i32, b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrtrs_work(matrix_layout.into(), uplo as c_char, trans as c_char,
                                 diag as c_char, n, nrhs, a.as_ptr() as *const _, lda,
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn strttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[f32], lda: i32,
                   arf: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_ptr(), lda, arf.as_mut_ptr())
    }
}

#[inline]
pub fn dtrttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[f64], lda: i32,
                   arf: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_ptr(), lda, arf.as_mut_ptr())
    }
}

#[inline]
pub fn ctrttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[c32], lda: i32,
                   arf: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_ptr() as *const _, lda, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztrttf_work(matrix_layout: Layout, transr: u8, uplo: u8, n: i32, a: &[c64], lda: i32,
                   arf: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrttf_work(matrix_layout.into(), transr as c_char, uplo as c_char, n,
                                 a.as_ptr() as *const _, lda, arf.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn strttp_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f32], lda: i32,
                   ap: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_strttp_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                                 ap.as_mut_ptr())
    }
}

#[inline]
pub fn dtrttp_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[f64], lda: i32,
                   ap: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtrttp_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr(), lda,
                                 ap.as_mut_ptr())
    }
}

#[inline]
pub fn ctrttp_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c32], lda: i32,
                   ap: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctrttp_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztrttp_work(matrix_layout: Layout, uplo: u8, n: i32, a: &[c64], lda: i32,
                   ap: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztrttp_work(matrix_layout.into(), uplo as c_char, n, a.as_ptr() as *const _,
                                 lda, ap.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stzrzf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, tau: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stzrzf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dtzrzf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, tau: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtzrzf_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, tau.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn ctzrzf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, tau: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctzrzf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn ztzrzf_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, tau: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztzrzf_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cungbr_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [c32],
                   lda: i32, tau: &[c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cungbr_work(matrix_layout.into(), vect as c_char, m, n, k,
                                 a.as_mut_ptr() as *mut _, lda, tau.as_ptr() as *const _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zungbr_work(matrix_layout: Layout, vect: u8, m: i32, n: i32, k: i32, a: &mut [c64],
                   lda: i32, tau: &[c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zungbr_work(matrix_layout.into(), vect as c_char, m, n, k,
                                 a.as_mut_ptr() as *mut _, lda, tau.as_ptr() as *const _,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunghr_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c32], lda: i32,
                   tau: &[c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunghr_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunghr_work(matrix_layout: Layout, n: i32, ilo: i32, ihi: i32, a: &mut [c64], lda: i32,
                   tau: &[c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunghr_work(matrix_layout.into(), n, ilo, ihi, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunglq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
                   tau: &[c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunglq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunglq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
                   tau: &[c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunglq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cungql_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
                   tau: &[c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cungql_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zungql_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
                   tau: &[c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zungql_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cungqr_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
                   tau: &[c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cungqr_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zungqr_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
                   tau: &[c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zungqr_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cungrq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c32], lda: i32,
                   tau: &[c32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cungrq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zungrq_work(matrix_layout: Layout, m: i32, n: i32, k: i32, a: &mut [c64], lda: i32,
                   tau: &[c64], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zungrq_work(matrix_layout.into(), m, n, k, a.as_mut_ptr() as *mut _, lda,
                                 tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cungtr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, tau: &[c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cungtr_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zungtr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, tau: &[c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zungtr_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, tau.as_ptr() as *const _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmbr_work(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
                   a: &[c32], lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmbr_work(matrix_layout.into(), vect as c_char, side as c_char,
                                 trans as c_char, m, n, k, a.as_ptr() as *const _, lda,
                                 tau.as_ptr() as *const _, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmbr_work(matrix_layout: Layout, vect: u8, side: u8, trans: u8, m: i32, n: i32, k: i32,
                   a: &[c64], lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmbr_work(matrix_layout.into(), vect as c_char, side as c_char,
                                 trans as c_char, m, n, k, a.as_ptr() as *const _, lda,
                                 tau.as_ptr() as *const _, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmhr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
                   a: &[c32], lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmhr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo,
                                 ihi, a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmhr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, ilo: i32, ihi: i32,
                   a: &[c64], lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmhr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, ilo,
                                 ihi, a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmlq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
                   lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmlq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmlq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
                   lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmlq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmql_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
                   lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmql_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmql_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
                   lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmql_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmqr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
                   lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmqr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmqr_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
                   lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmqr_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmrq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c32],
                   lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmrq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmrq_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, a: &[c64],
                   lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmrq_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmrz_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                   a: &[c32], lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmrz_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmrz_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                   a: &[c64], lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmrz_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l,
                                 a.as_ptr() as *const _, lda, tau.as_ptr() as *const _,
                                 c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cunmtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[c32],
                   lda: i32, tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunmtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, a.as_ptr() as *const _, lda,
                                 tau.as_ptr() as *const _, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zunmtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32, a: &[c64],
                   lda: i32, tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64],
                   lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunmtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, a.as_ptr() as *const _, lda,
                                 tau.as_ptr() as *const _, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cupgtr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c32], tau: &[c32], q: &mut c32,
                   ldq: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cupgtr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 tau.as_ptr() as *const _, q as *mut _ as *mut _, ldq,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zupgtr_work(matrix_layout: Layout, uplo: u8, n: i32, ap: &[c64], tau: &[c64], q: &mut c64,
                   ldq: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zupgtr_work(matrix_layout.into(), uplo as c_char, n, ap.as_ptr() as *const _,
                                 tau.as_ptr() as *const _, q as *mut _ as *mut _, ldq,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn cupmtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32,
                   ap: &[c32], tau: &[c32], c: &mut [c32], ldc: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cupmtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, ap.as_ptr() as *const _,
                                 tau.as_ptr() as *const _, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zupmtr_work(matrix_layout: Layout, side: u8, uplo: u8, trans: u8, m: i32, n: i32,
                   ap: &[c64], tau: &[c64], c: &mut [c64], ldc: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zupmtr_work(matrix_layout.into(), side as c_char, uplo as c_char,
                                 trans as c_char, m, n, ap.as_ptr() as *const _,
                                 tau.as_ptr() as *const _, c.as_mut_ptr() as *mut _, ldc,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn claghe(matrix_layout: Layout, n: i32, k: i32, d: &[f32], a: &mut [c32], lda: i32,
              iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_claghe(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _, lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn zlaghe(matrix_layout: Layout, n: i32, k: i32, d: &[f64], a: &mut [c64], lda: i32,
              iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlaghe(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _, lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn slagsy(matrix_layout: Layout, n: i32, k: i32, d: &[f32], a: &mut [f32], lda: i32,
              iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_slagsy(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr(), lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn dlagsy(matrix_layout: Layout, n: i32, k: i32, d: &[f64], a: &mut [f64], lda: i32,
              iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dlagsy(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr(), lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn clagsy(matrix_layout: Layout, n: i32, k: i32, d: &[f32], a: &mut [c32], lda: i32,
              iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_clagsy(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _, lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn zlagsy(matrix_layout: Layout, n: i32, k: i32, d: &[f64], a: &mut [c64], lda: i32,
              iseed: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zlagsy(matrix_layout.into(), n, k, d.as_ptr(), a.as_mut_ptr() as *mut _, lda,
                            iseed.as_mut_ptr())
    }
}

#[inline]
pub fn slapmr(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f32], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slapmr(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn dlapmr(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f64], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlapmr(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn clapmr(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c32], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clapmr(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx, k)
    }
}

#[inline]
pub fn zlapmr(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c64], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlapmr(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx, k)
    }
}

#[inline]
pub fn slapmt(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f32], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_slapmt(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn dlapmt(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [f64], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dlapmt(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr(), ldx, k)
    }
}

#[inline]
pub fn clapmt(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c32], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_clapmt(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx, k)
    }
}

#[inline]
pub fn zlapmt(matrix_layout: Layout, forwrd: i32, m: i32, n: i32, x: &mut [c64], ldx: i32,
              k: &mut i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zlapmt(matrix_layout.into(), forwrd, m, n, x.as_mut_ptr() as *mut _, ldx, k)
    }
}

#[inline]
pub fn slapy2(x: f32, y: f32) -> f32 {
    unsafe {
        ffi::LAPACKE_slapy2(x, y)
    }
}

#[inline]
pub fn dlapy2(x: f64, y: f64) -> f64 {
    unsafe {
        ffi::LAPACKE_dlapy2(x, y)
    }
}

#[inline]
pub fn slapy3(x: f32, y: f32, z: f32) -> f32 {
    unsafe {
        ffi::LAPACKE_slapy3(x, y, z)
    }
}

#[inline]
pub fn dlapy3(x: f64, y: f64, z: f64) -> f64 {
    unsafe {
        ffi::LAPACKE_dlapy3(x, y, z)
    }
}

#[inline]
pub fn slartgp(f: f32, g: f32, cs: &mut [f32], sn: &mut [f32], r: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slartgp(f, g, cs.as_mut_ptr(), sn.as_mut_ptr(), r.as_mut_ptr())
    }
}

#[inline]
pub fn dlartgp(f: f64, g: f64, cs: &mut [f64], sn: &mut [f64], r: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlartgp(f, g, cs.as_mut_ptr(), sn.as_mut_ptr(), r.as_mut_ptr())
    }
}

#[inline]
pub fn slartgs(x: f32, y: f32, sigma: f32, cs: &mut [f32], sn: &mut [f32]) -> i32 {
    unsafe {
        ffi::LAPACKE_slartgs(x, y, sigma, cs.as_mut_ptr(), sn.as_mut_ptr())
    }
}

#[inline]
pub fn dlartgs(x: f64, y: f64, sigma: f64, cs: &mut [f64], sn: &mut [f64]) -> i32 {
    unsafe {
        ffi::LAPACKE_dlartgs(x, y, sigma, cs.as_mut_ptr(), sn.as_mut_ptr())
    }
}

#[inline]
pub fn cbbcsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              m: i32, p: i32, q: i32, theta: &mut [f32], phi: &mut [f32], u1: &mut [c32],
              ldu1: i32, u2: &mut [c32], ldu2: i32, v1t: &mut [c32], ldv1t: i32, v2t: &mut [c32],
              ldv2t: i32, b11d: &mut [f32], b11e: &mut [f32], b12d: &mut [f32], b12e: &mut [f32],
              b21d: &mut [f32], b21e: &mut [f32], b22d: &mut [f32], b22e: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cbbcsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                            theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr() as *mut _, ldu1,
                            u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _, ldv1t,
                            v2t.as_mut_ptr() as *mut _, ldv2t, b11d.as_mut_ptr(),
                            b11e.as_mut_ptr(), b12d.as_mut_ptr(), b12e.as_mut_ptr(),
                            b21d.as_mut_ptr(), b21e.as_mut_ptr(), b22d.as_mut_ptr(),
                            b22e.as_mut_ptr())
    }
}

#[inline]
pub fn cbbcsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   m: i32, p: i32, q: i32, theta: &mut [f32], phi: &mut [f32], u1: &mut [c32],
                   ldu1: i32, u2: &mut [c32], ldu2: i32, v1t: &mut [c32], ldv1t: i32,
                   v2t: &mut [c32], ldv2t: i32, b11d: &mut [f32], b11e: &mut [f32],
                   b12d: &mut [f32], b12e: &mut [f32], b21d: &mut [f32], b21e: &mut [f32],
                   b22d: &mut [f32], b22e: &mut [f32], rwork: &mut [f32], lrwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cbbcsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                                 theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr() as *mut _,
                                 ldu1, u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _,
                                 ldv1t, v2t.as_mut_ptr() as *mut _, ldv2t, b11d.as_mut_ptr(),
                                 b11e.as_mut_ptr(), b12d.as_mut_ptr(), b12e.as_mut_ptr(),
                                 b21d.as_mut_ptr(), b21e.as_mut_ptr(), b22d.as_mut_ptr(),
                                 b22e.as_mut_ptr(), rwork.as_mut_ptr(), lrwork)
    }
}

#[inline]
pub fn cheswapr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], i1: i32, i2: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_cheswapr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              i1, i2)
    }
}

#[inline]
pub fn cheswapr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], i1: i32,
                     i2: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cheswapr_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, i1, i2)
    }
}

#[inline]
pub fn chetri2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
               ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetri2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                             lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn chetri2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                    work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetri2_work(matrix_layout.into(), uplo as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                  work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn chetri2x(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetri2x(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              lda, ipiv.as_ptr(), nb)
    }
}

#[inline]
pub fn chetri2x_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                     ipiv: &[i32], work: &mut [c32], nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetri2x_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                   work.as_mut_ptr() as *mut _, nb)
    }
}

#[inline]
pub fn chetrs2(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
               ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrs2(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                             lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chetrs2_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                    ipiv: &[i32], b: &mut [c32], ldb: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrs2_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn csyconv(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [c32], lda: i32,
               ipiv: &[i32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyconv(matrix_layout.into(), uplo as c_char, way as c_char, n,
                             a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                             work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn csyconv_work(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [c32], lda: i32,
                    ipiv: &[i32], work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csyconv_work(matrix_layout.into(), uplo as c_char, way as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn csyswapr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], i1: i32, i2: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_csyswapr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              i1, i2)
    }
}

#[inline]
pub fn csyswapr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], i1: i32,
                     i2: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csyswapr_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, i1, i2)
    }
}

#[inline]
pub fn csytri2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
               ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csytri2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                             lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn csytri2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                    work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytri2_work(matrix_layout.into(), uplo as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                  work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn csytri2x(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32, ipiv: &[i32],
                nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytri2x(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              lda, ipiv.as_ptr(), nb)
    }
}

#[inline]
pub fn csytri2x_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                     ipiv: &[i32], work: &mut [c32], nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytri2x_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                   work.as_mut_ptr() as *mut _, nb)
    }
}

#[inline]
pub fn csytrs2(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
               ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrs2(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                             lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn csytrs2_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                    ipiv: &[i32], b: &mut [c32], ldb: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrs2_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn cunbdb(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32, x11: &mut [c32],
              ldx11: i32, x12: &mut [c32], ldx12: i32, x21: &mut [c32], ldx21: i32,
              x22: &mut [c32], ldx22: i32, theta: &mut [f32], phi: &mut [f32], taup1: &mut [c32],
              taup2: &mut [c32], tauq1: &mut [c32], tauq2: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cunbdb(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                            x11.as_mut_ptr() as *mut _, ldx11, x12.as_mut_ptr() as *mut _, ldx12,
                            x21.as_mut_ptr() as *mut _, ldx21, x22.as_mut_ptr() as *mut _, ldx22,
                            theta.as_mut_ptr(), phi.as_mut_ptr(), taup1.as_mut_ptr() as *mut _,
                            taup2.as_mut_ptr() as *mut _, tauq1.as_mut_ptr() as *mut _,
                            tauq2.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn cunbdb_work(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32,
                   x11: &mut [c32], ldx11: i32, x12: &mut [c32], ldx12: i32, x21: &mut [c32],
                   ldx21: i32, x22: &mut [c32], ldx22: i32, theta: &mut [f32], phi: &mut [f32],
                   taup1: &mut [c32], taup2: &mut [c32], tauq1: &mut [c32], tauq2: &mut [c32],
                   work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cunbdb_work(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                                 x11.as_mut_ptr() as *mut _, ldx11, x12.as_mut_ptr() as *mut _,
                                 ldx12, x21.as_mut_ptr() as *mut _, ldx21,
                                 x22.as_mut_ptr() as *mut _, ldx22, theta.as_mut_ptr(),
                                 phi.as_mut_ptr(), taup1.as_mut_ptr() as *mut _,
                                 taup2.as_mut_ptr() as *mut _, tauq1.as_mut_ptr() as *mut _,
                                 tauq2.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn cuncsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              signs: u8, m: i32, p: i32, q: i32, x11: &mut [c32], ldx11: i32, x12: &mut [c32],
              ldx12: i32, x21: &mut [c32], ldx21: i32, x22: &mut [c32], ldx22: i32,
              theta: &mut [f32], u1: &mut [c32], ldu1: i32, u2: &mut [c32], ldu2: i32,
              v1t: &mut [c32], ldv1t: i32, v2t: &mut [c32], ldv2t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cuncsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, signs as c_char,
                            m, p, q, x11.as_mut_ptr() as *mut _, ldx11, x12.as_mut_ptr() as *mut _,
                            ldx12, x21.as_mut_ptr() as *mut _, ldx21, x22.as_mut_ptr() as *mut _,
                            ldx22, theta.as_mut_ptr(), u1.as_mut_ptr() as *mut _, ldu1,
                            u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _, ldv1t,
                            v2t.as_mut_ptr() as *mut _, ldv2t)
    }
}

#[inline]
pub fn cuncsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   signs: u8, m: i32, p: i32, q: i32, x11: &mut [c32], ldx11: i32, x12: &mut [c32],
                   ldx12: i32, x21: &mut [c32], ldx21: i32, x22: &mut [c32], ldx22: i32,
                   theta: &mut [f32], u1: &mut [c32], ldu1: i32, u2: &mut [c32], ldu2: i32,
                   v1t: &mut [c32], ldv1t: i32, v2t: &mut [c32], ldv2t: i32, work: &mut [c32],
                   lwork: i32, rwork: &mut [f32], lrwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cuncsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char,
                                 signs as c_char, m, p, q, x11.as_mut_ptr() as *mut _, ldx11,
                                 x12.as_mut_ptr() as *mut _, ldx12, x21.as_mut_ptr() as *mut _,
                                 ldx21, x22.as_mut_ptr() as *mut _, ldx22, theta.as_mut_ptr(),
                                 u1.as_mut_ptr() as *mut _, ldu1, u2.as_mut_ptr() as *mut _, ldu2,
                                 v1t.as_mut_ptr() as *mut _, ldv1t, v2t.as_mut_ptr() as *mut _,
                                 ldv2t, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 lrwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn cuncsd2by1(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32, q: i32,
                  x11: &mut [c32], ldx11: i32, x21: &mut [c32], ldx21: i32, theta: &mut [c32],
                  u1: &mut [c32], ldu1: i32, u2: &mut [c32], ldu2: i32, v1t: &mut [c32],
                  ldv1t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cuncsd2by1(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                jobv1t as c_char, m, p, q, x11.as_mut_ptr() as *mut _, ldx11,
                                x21.as_mut_ptr() as *mut _, ldx21, theta.as_mut_ptr() as *mut _,
                                u1.as_mut_ptr() as *mut _, ldu1, u2.as_mut_ptr() as *mut _, ldu2,
                                v1t.as_mut_ptr() as *mut _, ldv1t)
    }
}

#[inline]
pub fn cuncsd2by1_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32,
                       q: i32, x11: &mut [c32], ldx11: i32, x21: &mut [c32], ldx21: i32,
                       theta: &mut [c32], u1: &mut [c32], ldu1: i32, u2: &mut [c32], ldu2: i32,
                       v1t: &mut [c32], ldv1t: i32, work: &mut [c32], lwork: i32,
                       rwork: &mut [f32], lrwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cuncsd2by1_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                     jobv1t as c_char, m, p, q, x11.as_mut_ptr() as *mut _, ldx11,
                                     x21.as_mut_ptr() as *mut _, ldx21,
                                     theta.as_mut_ptr() as *mut _, u1.as_mut_ptr() as *mut _, ldu1,
                                     u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _,
                                     ldv1t, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                     lrwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dbbcsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              m: i32, p: i32, q: i32, theta: &mut [f64], phi: &mut [f64], u1: &mut [f64],
              ldu1: i32, u2: &mut [f64], ldu2: i32, v1t: &mut [f64], ldv1t: i32, v2t: &mut [f64],
              ldv2t: i32, b11d: &mut [f64], b11e: &mut [f64], b12d: &mut [f64], b12e: &mut [f64],
              b21d: &mut [f64], b21e: &mut [f64], b22d: &mut [f64], b22e: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dbbcsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                            theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr(), ldu1,
                            u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t, v2t.as_mut_ptr(),
                            ldv2t, b11d.as_mut_ptr(), b11e.as_mut_ptr(), b12d.as_mut_ptr(),
                            b12e.as_mut_ptr(), b21d.as_mut_ptr(), b21e.as_mut_ptr(),
                            b22d.as_mut_ptr(), b22e.as_mut_ptr())
    }
}

#[inline]
pub fn dbbcsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   m: i32, p: i32, q: i32, theta: &mut [f64], phi: &mut [f64], u1: &mut [f64],
                   ldu1: i32, u2: &mut [f64], ldu2: i32, v1t: &mut [f64], ldv1t: i32,
                   v2t: &mut [f64], ldv2t: i32, b11d: &mut [f64], b11e: &mut [f64],
                   b12d: &mut [f64], b12e: &mut [f64], b21d: &mut [f64], b21e: &mut [f64],
                   b22d: &mut [f64], b22e: &mut [f64], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dbbcsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                                 theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr(), ldu1,
                                 u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t, v2t.as_mut_ptr(),
                                 ldv2t, b11d.as_mut_ptr(), b11e.as_mut_ptr(), b12d.as_mut_ptr(),
                                 b12e.as_mut_ptr(), b21d.as_mut_ptr(), b21e.as_mut_ptr(),
                                 b22d.as_mut_ptr(), b22e.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorbdb(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32, x11: &mut [f64],
              ldx11: i32, x12: &mut [f64], ldx12: i32, x21: &mut [f64], ldx21: i32,
              x22: &mut [f64], ldx22: i32, theta: &mut [f64], phi: &mut [f64], taup1: &mut [f64],
              taup2: &mut [f64], tauq1: &mut [f64], tauq2: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorbdb(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                            x11.as_mut_ptr(), ldx11, x12.as_mut_ptr(), ldx12, x21.as_mut_ptr(),
                            ldx21, x22.as_mut_ptr(), ldx22, theta.as_mut_ptr(), phi.as_mut_ptr(),
                            taup1.as_mut_ptr(), taup2.as_mut_ptr(), tauq1.as_mut_ptr(),
                            tauq2.as_mut_ptr())
    }
}

#[inline]
pub fn dorbdb_work(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32,
                   x11: &mut [f64], ldx11: i32, x12: &mut [f64], ldx12: i32, x21: &mut [f64],
                   ldx21: i32, x22: &mut [f64], ldx22: i32, theta: &mut [f64], phi: &mut [f64],
                   taup1: &mut [f64], taup2: &mut [f64], tauq1: &mut [f64], tauq2: &mut [f64],
                   work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorbdb_work(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                                 x11.as_mut_ptr(), ldx11, x12.as_mut_ptr(), ldx12,
                                 x21.as_mut_ptr(), ldx21, x22.as_mut_ptr(), ldx22,
                                 theta.as_mut_ptr(), phi.as_mut_ptr(), taup1.as_mut_ptr(),
                                 taup2.as_mut_ptr(), tauq1.as_mut_ptr(), tauq2.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dorcsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              signs: u8, m: i32, p: i32, q: i32, x11: &mut [f64], ldx11: i32, x12: &mut [f64],
              ldx12: i32, x21: &mut [f64], ldx21: i32, x22: &mut [f64], ldx22: i32,
              theta: &mut [f64], u1: &mut [f64], ldu1: i32, u2: &mut [f64], ldu2: i32,
              v1t: &mut [f64], ldv1t: i32, v2t: &mut [f64], ldv2t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorcsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, signs as c_char,
                            m, p, q, x11.as_mut_ptr(), ldx11, x12.as_mut_ptr(), ldx12,
                            x21.as_mut_ptr(), ldx21, x22.as_mut_ptr(), ldx22, theta.as_mut_ptr(),
                            u1.as_mut_ptr(), ldu1, u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t,
                            v2t.as_mut_ptr(), ldv2t)
    }
}

#[inline]
pub fn dorcsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   signs: u8, m: i32, p: i32, q: i32, x11: &mut [f64], ldx11: i32, x12: &mut [f64],
                   ldx12: i32, x21: &mut [f64], ldx21: i32, x22: &mut [f64], ldx22: i32,
                   theta: &mut [f64], u1: &mut [f64], ldu1: i32, u2: &mut [f64], ldu2: i32,
                   v1t: &mut [f64], ldv1t: i32, v2t: &mut [f64], ldv2t: i32, work: &mut [f64],
                   lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorcsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char,
                                 signs as c_char, m, p, q, x11.as_mut_ptr(), ldx11,
                                 x12.as_mut_ptr(), ldx12, x21.as_mut_ptr(), ldx21,
                                 x22.as_mut_ptr(), ldx22, theta.as_mut_ptr(), u1.as_mut_ptr(),
                                 ldu1, u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t,
                                 v2t.as_mut_ptr(), ldv2t, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dorcsd2by1(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32, q: i32,
                  x11: &mut [f64], ldx11: i32, x21: &mut [f64], ldx21: i32, theta: &mut [f64],
                  u1: &mut [f64], ldu1: i32, u2: &mut [f64], ldu2: i32, v1t: &mut [f64],
                  ldv1t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dorcsd2by1(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                jobv1t as c_char, m, p, q, x11.as_mut_ptr(), ldx11,
                                x21.as_mut_ptr(), ldx21, theta.as_mut_ptr(), u1.as_mut_ptr(), ldu1,
                                u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t)
    }
}

#[inline]
pub fn dorcsd2by1_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32,
                       q: i32, x11: &mut [f64], ldx11: i32, x21: &mut [f64], ldx21: i32,
                       theta: &mut [f64], u1: &mut [f64], ldu1: i32, u2: &mut [f64], ldu2: i32,
                       v1t: &mut [f64], ldv1t: i32, work: &mut [f64], lwork: i32,
                       iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dorcsd2by1_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                     jobv1t as c_char, m, p, q, x11.as_mut_ptr(), ldx11,
                                     x21.as_mut_ptr(), ldx21, theta.as_mut_ptr(), u1.as_mut_ptr(),
                                     ldu1, u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t,
                                     work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn dsyconv(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [f64], lda: i32,
               ipiv: &[i32], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyconv(matrix_layout.into(), uplo as c_char, way as c_char, n,
                             a.as_mut_ptr(), lda, ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dsyconv_work(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [f64], lda: i32,
                    ipiv: &[i32], work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyconv_work(matrix_layout.into(), uplo as c_char, way as c_char, n,
                                  a.as_mut_ptr(), lda, ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn dsyswapr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], i1: i32, i2: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_dsyswapr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), i1, i2)
    }
}

#[inline]
pub fn dsyswapr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], i1: i32,
                     i2: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsyswapr_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), i1, i2)
    }
}

#[inline]
pub fn dsytri2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
               ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytri2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                             ipiv.as_ptr())
    }
}

#[inline]
pub fn dsytri2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, ipiv: &[i32],
                    work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytri2_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                  ipiv.as_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn dsytri2x(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32, ipiv: &[i32],
                nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytri2x(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                              ipiv.as_ptr(), nb)
    }
}

#[inline]
pub fn dsytri2x_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                     ipiv: &[i32], work: &mut [f64], nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytri2x_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                   ipiv.as_ptr(), work.as_mut_ptr(), nb)
    }
}

#[inline]
pub fn dsytrs2(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
               ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrs2(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                             ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsytrs2_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                    ipiv: &[i32], b: &mut [f64], ldb: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrs2_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                  ipiv.as_ptr(), b.as_mut_ptr(), ldb, work.as_mut_ptr())
    }
}

#[inline]
pub fn sbbcsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              m: i32, p: i32, q: i32, theta: &mut [f32], phi: &mut [f32], u1: &mut [f32],
              ldu1: i32, u2: &mut [f32], ldu2: i32, v1t: &mut [f32], ldv1t: i32, v2t: &mut [f32],
              ldv2t: i32, b11d: &mut [f32], b11e: &mut [f32], b12d: &mut [f32], b12e: &mut [f32],
              b21d: &mut [f32], b21e: &mut [f32], b22d: &mut [f32], b22e: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sbbcsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                            theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr(), ldu1,
                            u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t, v2t.as_mut_ptr(),
                            ldv2t, b11d.as_mut_ptr(), b11e.as_mut_ptr(), b12d.as_mut_ptr(),
                            b12e.as_mut_ptr(), b21d.as_mut_ptr(), b21e.as_mut_ptr(),
                            b22d.as_mut_ptr(), b22e.as_mut_ptr())
    }
}

#[inline]
pub fn sbbcsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   m: i32, p: i32, q: i32, theta: &mut [f32], phi: &mut [f32], u1: &mut [f32],
                   ldu1: i32, u2: &mut [f32], ldu2: i32, v1t: &mut [f32], ldv1t: i32,
                   v2t: &mut [f32], ldv2t: i32, b11d: &mut [f32], b11e: &mut [f32],
                   b12d: &mut [f32], b12e: &mut [f32], b21d: &mut [f32], b21e: &mut [f32],
                   b22d: &mut [f32], b22e: &mut [f32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sbbcsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                                 theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr(), ldu1,
                                 u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t, v2t.as_mut_ptr(),
                                 ldv2t, b11d.as_mut_ptr(), b11e.as_mut_ptr(), b12d.as_mut_ptr(),
                                 b12e.as_mut_ptr(), b21d.as_mut_ptr(), b21e.as_mut_ptr(),
                                 b22d.as_mut_ptr(), b22e.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorbdb(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32, x11: &mut [f32],
              ldx11: i32, x12: &mut [f32], ldx12: i32, x21: &mut [f32], ldx21: i32,
              x22: &mut [f32], ldx22: i32, theta: &mut [f32], phi: &mut [f32], taup1: &mut [f32],
              taup2: &mut [f32], tauq1: &mut [f32], tauq2: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorbdb(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                            x11.as_mut_ptr(), ldx11, x12.as_mut_ptr(), ldx12, x21.as_mut_ptr(),
                            ldx21, x22.as_mut_ptr(), ldx22, theta.as_mut_ptr(), phi.as_mut_ptr(),
                            taup1.as_mut_ptr(), taup2.as_mut_ptr(), tauq1.as_mut_ptr(),
                            tauq2.as_mut_ptr())
    }
}

#[inline]
pub fn sorbdb_work(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32,
                   x11: &mut [f32], ldx11: i32, x12: &mut [f32], ldx12: i32, x21: &mut [f32],
                   ldx21: i32, x22: &mut [f32], ldx22: i32, theta: &mut [f32], phi: &mut [f32],
                   taup1: &mut [f32], taup2: &mut [f32], tauq1: &mut [f32], tauq2: &mut [f32],
                   work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorbdb_work(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                                 x11.as_mut_ptr(), ldx11, x12.as_mut_ptr(), ldx12,
                                 x21.as_mut_ptr(), ldx21, x22.as_mut_ptr(), ldx22,
                                 theta.as_mut_ptr(), phi.as_mut_ptr(), taup1.as_mut_ptr(),
                                 taup2.as_mut_ptr(), tauq1.as_mut_ptr(), tauq2.as_mut_ptr(),
                                 work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn sorcsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              signs: u8, m: i32, p: i32, q: i32, x11: &mut [f32], ldx11: i32, x12: &mut [f32],
              ldx12: i32, x21: &mut [f32], ldx21: i32, x22: &mut [f32], ldx22: i32,
              theta: &mut [f32], u1: &mut [f32], ldu1: i32, u2: &mut [f32], ldu2: i32,
              v1t: &mut [f32], ldv1t: i32, v2t: &mut [f32], ldv2t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorcsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, signs as c_char,
                            m, p, q, x11.as_mut_ptr(), ldx11, x12.as_mut_ptr(), ldx12,
                            x21.as_mut_ptr(), ldx21, x22.as_mut_ptr(), ldx22, theta.as_mut_ptr(),
                            u1.as_mut_ptr(), ldu1, u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t,
                            v2t.as_mut_ptr(), ldv2t)
    }
}

#[inline]
pub fn sorcsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   signs: u8, m: i32, p: i32, q: i32, x11: &mut [f32], ldx11: i32, x12: &mut [f32],
                   ldx12: i32, x21: &mut [f32], ldx21: i32, x22: &mut [f32], ldx22: i32,
                   theta: &mut [f32], u1: &mut [f32], ldu1: i32, u2: &mut [f32], ldu2: i32,
                   v1t: &mut [f32], ldv1t: i32, v2t: &mut [f32], ldv2t: i32, work: &mut [f32],
                   lwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorcsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char,
                                 signs as c_char, m, p, q, x11.as_mut_ptr(), ldx11,
                                 x12.as_mut_ptr(), ldx12, x21.as_mut_ptr(), ldx21,
                                 x22.as_mut_ptr(), ldx22, theta.as_mut_ptr(), u1.as_mut_ptr(),
                                 ldu1, u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t,
                                 v2t.as_mut_ptr(), ldv2t, work.as_mut_ptr(), lwork,
                                 iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sorcsd2by1(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32, q: i32,
                  x11: &mut [f32], ldx11: i32, x21: &mut [f32], ldx21: i32, theta: &mut [f32],
                  u1: &mut [f32], ldu1: i32, u2: &mut [f32], ldu2: i32, v1t: &mut [f32],
                  ldv1t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sorcsd2by1(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                jobv1t as c_char, m, p, q, x11.as_mut_ptr(), ldx11,
                                x21.as_mut_ptr(), ldx21, theta.as_mut_ptr(), u1.as_mut_ptr(), ldu1,
                                u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t)
    }
}

#[inline]
pub fn sorcsd2by1_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32,
                       q: i32, x11: &mut [f32], ldx11: i32, x21: &mut [f32], ldx21: i32,
                       theta: &mut [f32], u1: &mut [f32], ldu1: i32, u2: &mut [f32], ldu2: i32,
                       v1t: &mut [f32], ldv1t: i32, work: &mut [f32], lwork: i32,
                       iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sorcsd2by1_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                     jobv1t as c_char, m, p, q, x11.as_mut_ptr(), ldx11,
                                     x21.as_mut_ptr(), ldx21, theta.as_mut_ptr(), u1.as_mut_ptr(),
                                     ldu1, u2.as_mut_ptr(), ldu2, v1t.as_mut_ptr(), ldv1t,
                                     work.as_mut_ptr(), lwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn ssyconv(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [f32], lda: i32,
               ipiv: &[i32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyconv(matrix_layout.into(), uplo as c_char, way as c_char, n,
                             a.as_mut_ptr(), lda, ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn ssyconv_work(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [f32], lda: i32,
                    ipiv: &[i32], work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyconv_work(matrix_layout.into(), uplo as c_char, way as c_char, n,
                                  a.as_mut_ptr(), lda, ipiv.as_ptr(), work.as_mut_ptr())
    }
}

#[inline]
pub fn ssyswapr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], i1: i32, i2: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_ssyswapr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), i1, i2)
    }
}

#[inline]
pub fn ssyswapr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], i1: i32,
                     i2: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssyswapr_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), i1, i2)
    }
}

#[inline]
pub fn ssytri2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
               ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytri2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                             ipiv.as_ptr())
    }
}

#[inline]
pub fn ssytri2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, ipiv: &[i32],
                    work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytri2_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                  ipiv.as_ptr(), work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn ssytri2x(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32, ipiv: &[i32],
                nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytri2x(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                              ipiv.as_ptr(), nb)
    }
}

#[inline]
pub fn ssytri2x_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                     ipiv: &[i32], work: &mut [f32], nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytri2x_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                   ipiv.as_ptr(), work.as_mut_ptr(), nb)
    }
}

#[inline]
pub fn ssytrs2(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
               ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrs2(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                             ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ssytrs2_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                    ipiv: &[i32], b: &mut [f32], ldb: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrs2_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                  ipiv.as_ptr(), b.as_mut_ptr(), ldb, work.as_mut_ptr())
    }
}

#[inline]
pub fn zbbcsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              m: i32, p: i32, q: i32, theta: &mut [f64], phi: &mut [f64], u1: &mut [c64],
              ldu1: i32, u2: &mut [c64], ldu2: i32, v1t: &mut [c64], ldv1t: i32, v2t: &mut [c64],
              ldv2t: i32, b11d: &mut [f64], b11e: &mut [f64], b12d: &mut [f64], b12e: &mut [f64],
              b21d: &mut [f64], b21e: &mut [f64], b22d: &mut [f64], b22e: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zbbcsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                            theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr() as *mut _, ldu1,
                            u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _, ldv1t,
                            v2t.as_mut_ptr() as *mut _, ldv2t, b11d.as_mut_ptr(),
                            b11e.as_mut_ptr(), b12d.as_mut_ptr(), b12e.as_mut_ptr(),
                            b21d.as_mut_ptr(), b21e.as_mut_ptr(), b22d.as_mut_ptr(),
                            b22e.as_mut_ptr())
    }
}

#[inline]
pub fn zbbcsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   m: i32, p: i32, q: i32, theta: &mut [f64], phi: &mut [f64], u1: &mut [c64],
                   ldu1: i32, u2: &mut [c64], ldu2: i32, v1t: &mut [c64], ldv1t: i32,
                   v2t: &mut [c64], ldv2t: i32, b11d: &mut [f64], b11e: &mut [f64],
                   b12d: &mut [f64], b12e: &mut [f64], b21d: &mut [f64], b21e: &mut [f64],
                   b22d: &mut [f64], b22e: &mut [f64], rwork: &mut [f64], lrwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zbbcsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char, m, p, q,
                                 theta.as_mut_ptr(), phi.as_mut_ptr(), u1.as_mut_ptr() as *mut _,
                                 ldu1, u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _,
                                 ldv1t, v2t.as_mut_ptr() as *mut _, ldv2t, b11d.as_mut_ptr(),
                                 b11e.as_mut_ptr(), b12d.as_mut_ptr(), b12e.as_mut_ptr(),
                                 b21d.as_mut_ptr(), b21e.as_mut_ptr(), b22d.as_mut_ptr(),
                                 b22e.as_mut_ptr(), rwork.as_mut_ptr(), lrwork)
    }
}

#[inline]
pub fn zheswapr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], i1: i32, i2: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zheswapr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              i1, i2)
    }
}

#[inline]
pub fn zheswapr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], i1: i32,
                     i2: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zheswapr_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, i1, i2)
    }
}

#[inline]
pub fn zhetri2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
               ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetri2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                             lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn zhetri2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                    work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetri2_work(matrix_layout.into(), uplo as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                  work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zhetri2x(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetri2x(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              lda, ipiv.as_ptr(), nb)
    }
}

#[inline]
pub fn zhetri2x_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                     ipiv: &[i32], work: &mut [c64], nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetri2x_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                   work.as_mut_ptr() as *mut _, nb)
    }
}

#[inline]
pub fn zhetrs2(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
               ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrs2(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                             lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhetrs2_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                    ipiv: &[i32], b: &mut [c64], ldb: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrs2_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsyconv(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [c64], lda: i32,
               ipiv: &[i32], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyconv(matrix_layout.into(), uplo as c_char, way as c_char, n,
                             a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                             work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsyconv_work(matrix_layout: Layout, uplo: u8, way: u8, n: i32, a: &mut [c64], lda: i32,
                    ipiv: &[i32], work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyconv_work(matrix_layout.into(), uplo as c_char, way as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zsyswapr(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], i1: i32, i2: i32) -> i32 {
    unsafe {
        ffi::LAPACKE_zsyswapr(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              i1, i2)
    }
}

#[inline]
pub fn zsyswapr_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], i1: i32,
                     i2: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyswapr_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, i1, i2)
    }
}

#[inline]
pub fn zsytri2(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
               ipiv: &[i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytri2(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                             lda, ipiv.as_ptr())
    }
}

#[inline]
pub fn zsytri2_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                    work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytri2_work(matrix_layout.into(), uplo as c_char, n,
                                  a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                  work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zsytri2x(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32, ipiv: &[i32],
                nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytri2x(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                              lda, ipiv.as_ptr(), nb)
    }
}

#[inline]
pub fn zsytri2x_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                     ipiv: &[i32], work: &mut [c64], nb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytri2x_work(matrix_layout.into(), uplo as c_char, n,
                                   a.as_mut_ptr() as *mut _, lda, ipiv.as_ptr(),
                                   work.as_mut_ptr() as *mut _, nb)
    }
}

#[inline]
pub fn zsytrs2(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
               ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrs2(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr() as *const _,
                             lda, ipiv.as_ptr(), b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsytrs2_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                    ipiv: &[i32], b: &mut [c64], ldb: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrs2_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                  a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                  b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zunbdb(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32, x11: &mut [c64],
              ldx11: i32, x12: &mut [c64], ldx12: i32, x21: &mut [c64], ldx21: i32,
              x22: &mut [c64], ldx22: i32, theta: &mut [f64], phi: &mut [f64], taup1: &mut [c64],
              taup2: &mut [c64], tauq1: &mut [c64], tauq2: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zunbdb(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                            x11.as_mut_ptr() as *mut _, ldx11, x12.as_mut_ptr() as *mut _, ldx12,
                            x21.as_mut_ptr() as *mut _, ldx21, x22.as_mut_ptr() as *mut _, ldx22,
                            theta.as_mut_ptr(), phi.as_mut_ptr(), taup1.as_mut_ptr() as *mut _,
                            taup2.as_mut_ptr() as *mut _, tauq1.as_mut_ptr() as *mut _,
                            tauq2.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zunbdb_work(matrix_layout: Layout, trans: u8, signs: u8, m: i32, p: i32, q: i32,
                   x11: &mut [c64], ldx11: i32, x12: &mut [c64], ldx12: i32, x21: &mut [c64],
                   ldx21: i32, x22: &mut [c64], ldx22: i32, theta: &mut [f64], phi: &mut [f64],
                   taup1: &mut [c64], taup2: &mut [c64], tauq1: &mut [c64], tauq2: &mut [c64],
                   work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zunbdb_work(matrix_layout.into(), trans as c_char, signs as c_char, m, p, q,
                                 x11.as_mut_ptr() as *mut _, ldx11, x12.as_mut_ptr() as *mut _,
                                 ldx12, x21.as_mut_ptr() as *mut _, ldx21,
                                 x22.as_mut_ptr() as *mut _, ldx22, theta.as_mut_ptr(),
                                 phi.as_mut_ptr(), taup1.as_mut_ptr() as *mut _,
                                 taup2.as_mut_ptr() as *mut _, tauq1.as_mut_ptr() as *mut _,
                                 tauq2.as_mut_ptr() as *mut _, work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zuncsd(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
              signs: u8, m: i32, p: i32, q: i32, x11: &mut [c64], ldx11: i32, x12: &mut [c64],
              ldx12: i32, x21: &mut [c64], ldx21: i32, x22: &mut [c64], ldx22: i32,
              theta: &mut [f64], u1: &mut [c64], ldu1: i32, u2: &mut [c64], ldu2: i32,
              v1t: &mut [c64], ldv1t: i32, v2t: &mut [c64], ldv2t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zuncsd(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                            jobv1t as c_char, jobv2t as c_char, trans as c_char, signs as c_char,
                            m, p, q, x11.as_mut_ptr() as *mut _, ldx11, x12.as_mut_ptr() as *mut _,
                            ldx12, x21.as_mut_ptr() as *mut _, ldx21, x22.as_mut_ptr() as *mut _,
                            ldx22, theta.as_mut_ptr(), u1.as_mut_ptr() as *mut _, ldu1,
                            u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _, ldv1t,
                            v2t.as_mut_ptr() as *mut _, ldv2t)
    }
}

#[inline]
pub fn zuncsd_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8,
                   signs: u8, m: i32, p: i32, q: i32, x11: &mut [c64], ldx11: i32, x12: &mut [c64],
                   ldx12: i32, x21: &mut [c64], ldx21: i32, x22: &mut [c64], ldx22: i32,
                   theta: &mut [f64], u1: &mut [c64], ldu1: i32, u2: &mut [c64], ldu2: i32,
                   v1t: &mut [c64], ldv1t: i32, v2t: &mut [c64], ldv2t: i32, work: &mut [c64],
                   lwork: i32, rwork: &mut [f64], lrwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zuncsd_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                 jobv1t as c_char, jobv2t as c_char, trans as c_char,
                                 signs as c_char, m, p, q, x11.as_mut_ptr() as *mut _, ldx11,
                                 x12.as_mut_ptr() as *mut _, ldx12, x21.as_mut_ptr() as *mut _,
                                 ldx21, x22.as_mut_ptr() as *mut _, ldx22, theta.as_mut_ptr(),
                                 u1.as_mut_ptr() as *mut _, ldu1, u2.as_mut_ptr() as *mut _, ldu2,
                                 v1t.as_mut_ptr() as *mut _, ldv1t, v2t.as_mut_ptr() as *mut _,
                                 ldv2t, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                 lrwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn zuncsd2by1(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32, q: i32,
                  x11: &mut [c64], ldx11: i32, x21: &mut [c64], ldx21: i32, theta: &mut [c64],
                  u1: &mut [c64], ldu1: i32, u2: &mut [c64], ldu2: i32, v1t: &mut [c64],
                  ldv1t: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zuncsd2by1(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                jobv1t as c_char, m, p, q, x11.as_mut_ptr() as *mut _, ldx11,
                                x21.as_mut_ptr() as *mut _, ldx21, theta.as_mut_ptr() as *mut _,
                                u1.as_mut_ptr() as *mut _, ldu1, u2.as_mut_ptr() as *mut _, ldu2,
                                v1t.as_mut_ptr() as *mut _, ldv1t)
    }
}

#[inline]
pub fn zuncsd2by1_work(matrix_layout: Layout, jobu1: u8, jobu2: u8, jobv1t: u8, m: i32, p: i32,
                       q: i32, x11: &mut [c64], ldx11: i32, x21: &mut [c64], ldx21: i32,
                       theta: &mut [c64], u1: &mut [c64], ldu1: i32, u2: &mut [c64], ldu2: i32,
                       v1t: &mut [c64], ldv1t: i32, work: &mut [c64], lwork: i32,
                       rwork: &mut [f64], lrwork: i32, iwork: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zuncsd2by1_work(matrix_layout.into(), jobu1 as c_char, jobu2 as c_char,
                                     jobv1t as c_char, m, p, q, x11.as_mut_ptr() as *mut _, ldx11,
                                     x21.as_mut_ptr() as *mut _, ldx21,
                                     theta.as_mut_ptr() as *mut _, u1.as_mut_ptr() as *mut _, ldu1,
                                     u2.as_mut_ptr() as *mut _, ldu2, v1t.as_mut_ptr() as *mut _,
                                     ldv1t, work.as_mut_ptr() as *mut _, lwork, rwork.as_mut_ptr(),
                                     lrwork, iwork.as_mut_ptr())
    }
}

#[inline]
pub fn sgemqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
               v: &[f32], ldv: i32, t: &[f32], ldt: i32, c: &mut [f32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgemqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, nb,
                             v.as_ptr(), ldv, t.as_ptr(), ldt, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn dgemqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
               v: &[f64], ldv: i32, t: &[f64], ldt: i32, c: &mut [f64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgemqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, nb,
                             v.as_ptr(), ldv, t.as_ptr(), ldt, c.as_mut_ptr(), ldc)
    }
}

#[inline]
pub fn cgemqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
               v: &[c32], ldv: i32, t: &[c32], ldt: i32, c: &mut [c32], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgemqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, nb,
                             v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                             c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn zgemqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
               v: &[c64], ldv: i32, t: &[c64], ldt: i32, c: &mut [c64], ldc: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgemqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, nb,
                             v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                             c.as_mut_ptr() as *mut _, ldc)
    }
}

#[inline]
pub fn sgeqrt(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [f32], lda: i32,
              t: &mut [f32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrt(matrix_layout.into(), m, n, nb, a.as_mut_ptr(), lda, t.as_mut_ptr(),
                            ldt)
    }
}

#[inline]
pub fn dgeqrt(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [f64], lda: i32,
              t: &mut [f64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrt(matrix_layout.into(), m, n, nb, a.as_mut_ptr(), lda, t.as_mut_ptr(),
                            ldt)
    }
}

#[inline]
pub fn cgeqrt(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [c32], lda: i32,
              t: &mut [c32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrt(matrix_layout.into(), m, n, nb, a.as_mut_ptr() as *mut _, lda,
                            t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zgeqrt(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [c64], lda: i32,
              t: &mut [c64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrt(matrix_layout.into(), m, n, nb, a.as_mut_ptr() as *mut _, lda,
                            t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn sgeqrt2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, t: &mut [f32],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrt2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dgeqrt2(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, t: &mut [f64],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrt2(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn cgeqrt2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, t: &mut [c32],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrt2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zgeqrt2(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, t: &mut [c64],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrt2(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn sgeqrt3(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, t: &mut [f32],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrt3(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dgeqrt3(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, t: &mut [f64],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrt3(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn cgeqrt3(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, t: &mut [c32],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrt3(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zgeqrt3(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, t: &mut [c64],
               ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrt3(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                             t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn stpmqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32, nb: i32,
               v: &[f32], ldv: i32, t: &[f32], ldt: i32, a: &mut [f32], lda: i32, b: &mut [f32],
               ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpmqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l, nb,
                             v.as_ptr(), ldv, t.as_ptr(), ldt, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                             ldb)
    }
}

#[inline]
pub fn dtpmqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32, nb: i32,
               v: &[f64], ldv: i32, t: &[f64], ldt: i32, a: &mut [f64], lda: i32, b: &mut [f64],
               ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpmqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l, nb,
                             v.as_ptr(), ldv, t.as_ptr(), ldt, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                             ldb)
    }
}

#[inline]
pub fn ctpmqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32, nb: i32,
               v: &[c32], ldv: i32, t: &[c32], ldt: i32, a: &mut [c32], lda: i32, b: &mut [c32],
               ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpmqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l, nb,
                             v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                             a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztpmqrt(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32, nb: i32,
               v: &[c64], ldv: i32, t: &[c64], ldt: i32, a: &mut [c64], lda: i32, b: &mut [c64],
               ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpmqrt(matrix_layout.into(), side as c_char, trans as c_char, m, n, k, l, nb,
                             v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                             a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn stpqrt(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32, t: &mut [f32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpqrt(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dtpqrt(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32, t: &mut [f64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpqrt(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                            ldb, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn ctpqrt(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32, t: &mut [c32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpqrt(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn ztpqrt(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32, t: &mut [c64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpqrt(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn stpqrt2(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [f32], lda: i32,
               b: &mut [f32], ldb: i32, t: &mut [f32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpqrt2(matrix_layout.into(), m, n, l, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                             ldb, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dtpqrt2(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [f64], lda: i32,
               b: &mut [f64], ldb: i32, t: &mut [f64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpqrt2(matrix_layout.into(), m, n, l, a.as_mut_ptr(), lda, b.as_mut_ptr(),
                             ldb, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn ctpqrt2(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [c32], lda: i32,
               b: &mut [c32], ldb: i32, t: &mut [c32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpqrt2(matrix_layout.into(), m, n, l, a.as_mut_ptr() as *mut _, lda,
                             b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn ztpqrt2(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [c64], lda: i32,
               b: &mut [c64], ldb: i32, t: &mut [c64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpqrt2(matrix_layout.into(), m, n, l, a.as_mut_ptr() as *mut _, lda,
                             b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn stprfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, l: i32, v: &[f32], ldv: i32, t: &[f32], ldt: i32, a: &mut [f32], lda: i32,
              b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stprfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, l, v.as_ptr(), ldv,
                            t.as_ptr(), ldt, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dtprfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, l: i32, v: &[f64], ldv: i32, t: &[f64], ldt: i32, a: &mut [f64], lda: i32,
              b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtprfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, l, v.as_ptr(), ldv,
                            t.as_ptr(), ldt, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn ctprfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, l: i32, v: &[c32], ldv: i32, t: &[c32], ldt: i32, a: &mut [c32], lda: i32,
              b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctprfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, l, v.as_ptr() as *const _,
                            ldv, t.as_ptr() as *const _, ldt, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ztprfb(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32, n: i32,
              k: i32, l: i32, v: &[c64], ldv: i32, t: &[c64], ldt: i32, a: &mut [c64], lda: i32,
              b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztprfb(matrix_layout.into(), side as c_char, trans as c_char,
                            direct as c_char, storev as c_char, m, n, k, l, v.as_ptr() as *const _,
                            ldv, t.as_ptr() as *const _, ldt, a.as_mut_ptr() as *mut _, lda,
                            b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn sgemqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
                    v: &[f32], ldv: i32, t: &[f32], ldt: i32, c: &mut [f32], ldc: i32,
                    work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgemqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  nb, v.as_ptr(), ldv, t.as_ptr(), ldt, c.as_mut_ptr(), ldc,
                                  work.as_mut_ptr())
    }
}

#[inline]
pub fn dgemqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
                    v: &[f64], ldv: i32, t: &[f64], ldt: i32, c: &mut [f64], ldc: i32,
                    work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgemqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  nb, v.as_ptr(), ldv, t.as_ptr(), ldt, c.as_mut_ptr(), ldc,
                                  work.as_mut_ptr())
    }
}

#[inline]
pub fn cgemqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
                    v: &[c32], ldv: i32, t: &[c32], ldt: i32, c: &mut [c32], ldc: i32,
                    work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgemqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  nb, v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                  c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgemqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, nb: i32,
                    v: &[c64], ldv: i32, t: &[c64], ldt: i32, c: &mut [c64], ldc: i32,
                    work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgemqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  nb, v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                  c.as_mut_ptr() as *mut _, ldc, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqrt_work(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [f32], lda: i32,
                   t: &mut [f32], ldt: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrt_work(matrix_layout.into(), m, n, nb, a.as_mut_ptr(), lda,
                                 t.as_mut_ptr(), ldt, work.as_mut_ptr())
    }
}

#[inline]
pub fn dgeqrt_work(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [f64], lda: i32,
                   t: &mut [f64], ldt: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrt_work(matrix_layout.into(), m, n, nb, a.as_mut_ptr(), lda,
                                 t.as_mut_ptr(), ldt, work.as_mut_ptr())
    }
}

#[inline]
pub fn cgeqrt_work(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [c32], lda: i32,
                   t: &mut [c32], ldt: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrt_work(matrix_layout.into(), m, n, nb, a.as_mut_ptr() as *mut _, lda,
                                 t.as_mut_ptr() as *mut _, ldt, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn zgeqrt_work(matrix_layout: Layout, m: i32, n: i32, nb: i32, a: &mut [c64], lda: i32,
                   t: &mut [c64], ldt: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrt_work(matrix_layout.into(), m, n, nb, a.as_mut_ptr() as *mut _, lda,
                                 t.as_mut_ptr() as *mut _, ldt, work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn sgeqrt2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, t: &mut [f32],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrt2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(),
                                  ldt)
    }
}

#[inline]
pub fn dgeqrt2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, t: &mut [f64],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrt2_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(),
                                  ldt)
    }
}

#[inline]
pub fn cgeqrt2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, t: &mut [c32],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrt2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zgeqrt2_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, t: &mut [c64],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrt2_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn sgeqrt3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f32], lda: i32, t: &mut [f32],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_sgeqrt3_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(),
                                  ldt)
    }
}

#[inline]
pub fn dgeqrt3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [f64], lda: i32, t: &mut [f64],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dgeqrt3_work(matrix_layout.into(), m, n, a.as_mut_ptr(), lda, t.as_mut_ptr(),
                                  ldt)
    }
}

#[inline]
pub fn cgeqrt3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c32], lda: i32, t: &mut [c32],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_cgeqrt3_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn zgeqrt3_work(matrix_layout: Layout, m: i32, n: i32, a: &mut [c64], lda: i32, t: &mut [c64],
                    ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zgeqrt3_work(matrix_layout.into(), m, n, a.as_mut_ptr() as *mut _, lda,
                                  t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn stpmqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                    nb: i32, v: &[f32], ldv: i32, t: &[f32], ldt: i32, a: &mut [f32], lda: i32,
                    b: &mut [f32], ldb: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stpmqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  l, nb, v.as_ptr(), ldv, t.as_ptr(), ldt, a.as_mut_ptr(), lda,
                                  b.as_mut_ptr(), ldb, work.as_mut_ptr())
    }
}

#[inline]
pub fn dtpmqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                    nb: i32, v: &[f64], ldv: i32, t: &[f64], ldt: i32, a: &mut [f64], lda: i32,
                    b: &mut [f64], ldb: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpmqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  l, nb, v.as_ptr(), ldv, t.as_ptr(), ldt, a.as_mut_ptr(), lda,
                                  b.as_mut_ptr(), ldb, work.as_mut_ptr())
    }
}

#[inline]
pub fn ctpmqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                    nb: i32, v: &[c32], ldv: i32, t: &[c32], ldt: i32, a: &mut [c32], lda: i32,
                    b: &mut [c32], ldb: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpmqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  l, nb, v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                  a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztpmqrt_work(matrix_layout: Layout, side: u8, trans: u8, m: i32, n: i32, k: i32, l: i32,
                    nb: i32, v: &[c64], ldv: i32, t: &[c64], ldt: i32, a: &mut [c64], lda: i32,
                    b: &mut [c64], ldb: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpmqrt_work(matrix_layout.into(), side as c_char, trans as c_char, m, n, k,
                                  l, nb, v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                  a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                  work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stpqrt_work(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [f32], lda: i32,
                   b: &mut [f32], ldb: i32, t: &mut [f32], ldt: i32, work: &mut [f32]) -> i32 {

    unsafe {
        ffi::LAPACKE_stpqrt_work(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, t.as_mut_ptr(), ldt, work.as_mut_ptr())
    }
}

#[inline]
pub fn dtpqrt_work(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [f64], lda: i32,
                   b: &mut [f64], ldb: i32, t: &mut [f64], ldt: i32, work: &mut [f64]) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpqrt_work(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr(), lda,
                                 b.as_mut_ptr(), ldb, t.as_mut_ptr(), ldt, work.as_mut_ptr())
    }
}

#[inline]
pub fn ctpqrt_work(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [c32], lda: i32,
                   b: &mut [c32], ldb: i32, t: &mut [c32], ldt: i32, work: &mut [c32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpqrt_work(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn ztpqrt_work(matrix_layout: Layout, m: i32, n: i32, l: i32, nb: i32, a: &mut [c64], lda: i32,
                   b: &mut [c64], ldb: i32, t: &mut [c64], ldt: i32, work: &mut [c64]) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpqrt_work(matrix_layout.into(), m, n, l, nb, a.as_mut_ptr() as *mut _, lda,
                                 b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt,
                                 work.as_mut_ptr() as *mut _)
    }
}

#[inline]
pub fn stpqrt2_work(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [f32], lda: i32,
                    b: &mut [f32], ldb: i32, t: &mut [f32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stpqrt2_work(matrix_layout.into(), m, n, l, a.as_mut_ptr(), lda,
                                  b.as_mut_ptr(), ldb, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn dtpqrt2_work(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [f64], lda: i32,
                    b: &mut [f64], ldb: i32, t: &mut [f64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtpqrt2_work(matrix_layout.into(), m, n, l, a.as_mut_ptr(), lda,
                                  b.as_mut_ptr(), ldb, t.as_mut_ptr(), ldt)
    }
}

#[inline]
pub fn ctpqrt2_work(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [c32], lda: i32,
                    b: &mut [c32], ldb: i32, t: &mut [c32], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctpqrt2_work(matrix_layout.into(), m, n, l, a.as_mut_ptr() as *mut _, lda,
                                  b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn ztpqrt2_work(matrix_layout: Layout, m: i32, n: i32, l: i32, a: &mut [c64], lda: i32,
                    b: &mut [c64], ldb: i32, t: &mut [c64], ldt: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztpqrt2_work(matrix_layout.into(), m, n, l, a.as_mut_ptr() as *mut _, lda,
                                  b.as_mut_ptr() as *mut _, ldb, t.as_mut_ptr() as *mut _, ldt)
    }
}

#[inline]
pub fn stprfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, l: i32, v: &[f32], ldv: i32, t: &[f32], ldt: i32, a: &mut [f32],
                   lda: i32, b: &mut [f32], ldb: i32, work: &[f32], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_stprfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k, l, v.as_ptr(), ldv,
                                 t.as_ptr(), ldt, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb,
                                 work.as_ptr(), ldwork)
    }
}

#[inline]
pub fn dtprfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, l: i32, v: &[f64], ldv: i32, t: &[f64], ldt: i32, a: &mut [f64],
                   lda: i32, b: &mut [f64], ldb: i32, work: &[f64], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dtprfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k, l, v.as_ptr(), ldv,
                                 t.as_ptr(), ldt, a.as_mut_ptr(), lda, b.as_mut_ptr(), ldb,
                                 work.as_ptr(), ldwork)
    }
}

#[inline]
pub fn ctprfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, l: i32, v: &[c32], ldv: i32, t: &[c32], ldt: i32, a: &mut [c32],
                   lda: i32, b: &mut [c32], ldb: i32, work: &mut [c32], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ctprfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k, l,
                                 v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 work.as_mut_ptr() as *mut _, ldwork)
    }
}

#[inline]
pub fn ztprfb_work(matrix_layout: Layout, side: u8, trans: u8, direct: u8, storev: u8, m: i32,
                   n: i32, k: i32, l: i32, v: &[c64], ldv: i32, t: &[c64], ldt: i32, a: &mut [c64],
                   lda: i32, b: &mut [c64], ldb: i32, work: &mut [c64], ldwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ztprfb_work(matrix_layout.into(), side as c_char, trans as c_char,
                                 direct as c_char, storev as c_char, m, n, k, l,
                                 v.as_ptr() as *const _, ldv, t.as_ptr() as *const _, ldt,
                                 a.as_mut_ptr() as *mut _, lda, b.as_mut_ptr() as *mut _, ldb,
                                 work.as_mut_ptr() as *mut _, ldwork)
    }
}

#[inline]
pub fn ssysv_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                  ipiv: &mut [i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysv_rook(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsysv_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                  ipiv: &mut [i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysv_rook(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(), lda,
                                ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csysv_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                  ipiv: &mut [i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csysv_rook(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsysv_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                  ipiv: &mut [i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysv_rook(matrix_layout.into(), uplo as c_char, n, nrhs,
                                a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn ssytrf_rook(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrf_rook(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn dsytrf_rook(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrf_rook(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                 ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn csytrf_rook(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrf_rook(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zsytrf_rook(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrf_rook(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn ssytrs_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                   ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrs_rook(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsytrs_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                   ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrs_rook(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(), lda,
                                 ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csytrs_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrs_rook(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsytrs_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrs_rook(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chetrf_rook(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrf_rook(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn zhetrf_rook(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                   ipiv: &mut [i32]) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrf_rook(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr() as *mut _,
                                 lda, ipiv.as_mut_ptr())
    }
}

#[inline]
pub fn chetrs_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                   ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrs_rook(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhetrs_rook(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                   ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrs_rook(matrix_layout.into(), uplo as c_char, n, nrhs,
                                 a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                 b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn csyr(matrix_layout: Layout, uplo: u8, n: i32, alpha: c32, x: &[c32], incx: i32,
            a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csyr(matrix_layout.into(), uplo as c_char, n, transmute(alpha),
                          x.as_ptr() as *const _, incx, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zsyr(matrix_layout: Layout, uplo: u8, n: i32, alpha: c64, x: &[c64], incx: i32,
            a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyr(matrix_layout.into(), uplo as c_char, n, transmute(alpha),
                          x.as_ptr() as *const _, incx, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ssysv_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f32], lda: i32,
                       ipiv: &mut [i32], b: &mut [f32], ldb: i32, work: &mut [f32],
                       lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssysv_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(),
                                     lda, ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                     work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsysv_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [f64], lda: i32,
                       ipiv: &mut [i32], b: &mut [f64], ldb: i32, work: &mut [f64],
                       lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsysv_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_mut_ptr(),
                                     lda, ipiv.as_mut_ptr(), b.as_mut_ptr(), ldb,
                                     work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn csysv_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c32], lda: i32,
                       ipiv: &mut [i32], b: &mut [c32], ldb: i32, work: &mut [c32],
                       lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csysv_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                     a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                     b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _,
                                     lwork)
    }
}

#[inline]
pub fn zsysv_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &mut [c64], lda: i32,
                       ipiv: &mut [i32], b: &mut [c64], ldb: i32, work: &mut [c64],
                       lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsysv_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                     a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                     b.as_mut_ptr() as *mut _, ldb, work.as_mut_ptr() as *mut _,
                                     lwork)
    }
}

#[inline]
pub fn ssytrf_rook_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f32], lda: i32,
                        ipiv: &mut [i32], work: &mut [f32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrf_rook_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                      ipiv.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn dsytrf_rook_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [f64], lda: i32,
                        ipiv: &mut [i32], work: &mut [f64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrf_rook_work(matrix_layout.into(), uplo as c_char, n, a.as_mut_ptr(), lda,
                                      ipiv.as_mut_ptr(), work.as_mut_ptr(), lwork)
    }
}

#[inline]
pub fn csytrf_rook_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                        ipiv: &mut [i32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrf_rook_work(matrix_layout.into(), uplo as c_char, n,
                                      a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                      work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zsytrf_rook_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                        ipiv: &mut [i32], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrf_rook_work(matrix_layout.into(), uplo as c_char, n,
                                      a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                      work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn ssytrs_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f32], lda: i32,
                        ipiv: &[i32], b: &mut [f32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_ssytrs_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(),
                                      lda, ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn dsytrs_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[f64], lda: i32,
                        ipiv: &[i32], b: &mut [f64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_dsytrs_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs, a.as_ptr(),
                                      lda, ipiv.as_ptr(), b.as_mut_ptr(), ldb)
    }
}

#[inline]
pub fn csytrs_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                        ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csytrs_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                      a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                      b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zsytrs_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                        ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsytrs_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                      a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                      b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn chetrf_rook_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c32], lda: i32,
                        ipiv: &mut [i32], work: &mut [c32], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrf_rook_work(matrix_layout.into(), uplo as c_char, n,
                                      a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                      work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn zhetrf_rook_work(matrix_layout: Layout, uplo: u8, n: i32, a: &mut [c64], lda: i32,
                        ipiv: &mut [i32], work: &mut [c64], lwork: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrf_rook_work(matrix_layout.into(), uplo as c_char, n,
                                      a.as_mut_ptr() as *mut _, lda, ipiv.as_mut_ptr(),
                                      work.as_mut_ptr() as *mut _, lwork)
    }
}

#[inline]
pub fn chetrs_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c32], lda: i32,
                        ipiv: &[i32], b: &mut [c32], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_chetrs_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                      a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                      b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn zhetrs_rook_work(matrix_layout: Layout, uplo: u8, n: i32, nrhs: i32, a: &[c64], lda: i32,
                        ipiv: &[i32], b: &mut [c64], ldb: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zhetrs_rook_work(matrix_layout.into(), uplo as c_char, n, nrhs,
                                      a.as_ptr() as *const _, lda, ipiv.as_ptr(),
                                      b.as_mut_ptr() as *mut _, ldb)
    }
}

#[inline]
pub fn csyr_work(matrix_layout: Layout, uplo: u8, n: i32, alpha: c32, x: &[c32], incx: i32,
                 a: &mut [c32], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_csyr_work(matrix_layout.into(), uplo as c_char, n, transmute(alpha),
                               x.as_ptr() as *const _, incx, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn zsyr_work(matrix_layout: Layout, uplo: u8, n: i32, alpha: c64, x: &[c64], incx: i32,
                 a: &mut [c64], lda: i32) -> i32 {

    unsafe {
        ffi::LAPACKE_zsyr_work(matrix_layout.into(), uplo as c_char, n, transmute(alpha),
                               x.as_ptr() as *const _, incx, a.as_mut_ptr() as *mut _, lda)
    }
}

#[inline]
pub fn ilaver(vers_major: &mut i32, vers_minor: &mut i32, vers_patch: &mut i32) {
    unsafe {
        ffi::LAPACKE_ilaver(vers_major, vers_minor, vers_patch)
    }
}
